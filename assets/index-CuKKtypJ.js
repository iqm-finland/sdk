(function(){const l=document.createElement("link").relList;if(l&&l.supports&&l.supports("modulepreload"))return;for(const _ of document.querySelectorAll('link[rel="modulepreload"]'))y(_);new MutationObserver(_=>{for(const q of _)if(q.type==="childList")for(const v of q.addedNodes)v.tagName==="LINK"&&v.rel==="modulepreload"&&y(v)}).observe(document,{childList:!0,subtree:!0});function r(_){const q={};return _.integrity&&(q.integrity=_.integrity),_.referrerPolicy&&(q.referrerPolicy=_.referrerPolicy),_.crossOrigin==="use-credentials"?q.credentials="include":_.crossOrigin==="anonymous"?q.credentials="omit":q.credentials="same-origin",q}function y(_){if(_.ep)return;_.ep=!0;const q=r(_);fetch(_.href,q)}})();var Os={exports:{}},In={},zs={exports:{}},X={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Uu;function pm(){if(Uu)return X;Uu=1;var c=Symbol.for("react.element"),l=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),q=Symbol.for("react.provider"),v=Symbol.for("react.context"),I=Symbol.for("react.forward_ref"),M=Symbol.for("react.suspense"),S=Symbol.for("react.memo"),R=Symbol.for("react.lazy"),B=Symbol.iterator;function A(p){return p===null||typeof p!="object"?null:(p=B&&p[B]||p["@@iterator"],typeof p=="function"?p:null)}var U={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Y=Object.assign,Z={};function W(p,w,H){this.props=p,this.context=w,this.refs=Z,this.updater=H||U}W.prototype.isReactComponent={},W.prototype.setState=function(p,w){if(typeof p!="object"&&typeof p!="function"&&p!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,p,w,"setState")},W.prototype.forceUpdate=function(p){this.updater.enqueueForceUpdate(this,p,"forceUpdate")};function Me(){}Me.prototype=W.prototype;function qe(p,w,H){this.props=p,this.context=w,this.refs=Z,this.updater=H||U}var xe=qe.prototype=new Me;xe.constructor=qe,Y(xe,W.prototype),xe.isPureReactComponent=!0;var ue=Array.isArray,Je=Object.prototype.hasOwnProperty,ke={current:null},ae={key:!0,ref:!0,__self:!0,__source:!0};function _e(p,w,H){var J,$={},ee=null,oe=null;if(w!=null)for(J in w.ref!==void 0&&(oe=w.ref),w.key!==void 0&&(ee=""+w.key),w)Je.call(w,J)&&!ae.hasOwnProperty(J)&&($[J]=w[J]);var ie=arguments.length-2;if(ie===1)$.children=H;else if(1<ie){for(var ce=Array(ie),Ye=0;Ye<ie;Ye++)ce[Ye]=arguments[Ye+2];$.children=ce}if(p&&p.defaultProps)for(J in ie=p.defaultProps,ie)$[J]===void 0&&($[J]=ie[J]);return{$$typeof:c,type:p,key:ee,ref:oe,props:$,_owner:ke.current}}function Be(p,w){return{$$typeof:c,type:p.type,key:w,ref:p.ref,props:p.props,_owner:p._owner}}function nt(p){return typeof p=="object"&&p!==null&&p.$$typeof===c}function ct(p){var w={"=":"=0",":":"=2"};return"$"+p.replace(/[=:]/g,function(H){return w[H]})}var Te=/\/+/g;function je(p,w){return typeof p=="object"&&p!==null&&p.key!=null?ct(""+p.key):w.toString(36)}function me(p,w,H,J,$){var ee=typeof p;(ee==="undefined"||ee==="boolean")&&(p=null);var oe=!1;if(p===null)oe=!0;else switch(ee){case"string":case"number":oe=!0;break;case"object":switch(p.$$typeof){case c:case l:oe=!0}}if(oe)return oe=p,$=$(oe),p=J===""?"."+je(oe,0):J,ue($)?(H="",p!=null&&(H=p.replace(Te,"$&/")+"/"),me($,w,H,"",function(Ye){return Ye})):$!=null&&(nt($)&&($=Be($,H+(!$.key||oe&&oe.key===$.key?"":(""+$.key).replace(Te,"$&/")+"/")+p)),w.push($)),1;if(oe=0,J=J===""?".":J+":",ue(p))for(var ie=0;ie<p.length;ie++){ee=p[ie];var ce=J+je(ee,ie);oe+=me(ee,w,H,ce,$)}else if(ce=A(p),typeof ce=="function")for(p=ce.call(p),ie=0;!(ee=p.next()).done;)ee=ee.value,ce=J+je(ee,ie++),oe+=me(ee,w,H,ce,$);else if(ee==="object")throw w=String(p),Error("Objects are not valid as a React child (found: "+(w==="[object Object]"?"object with keys {"+Object.keys(p).join(", ")+"}":w)+"). If you meant to render a collection of children, use an array instead.");return oe}function Ee(p,w,H){if(p==null)return p;var J=[],$=0;return me(p,J,"","",function(ee){return w.call(H,ee,$++)}),J}function Re(p){if(p._status===-1){var w=p._result;w=w(),w.then(function(H){(p._status===0||p._status===-1)&&(p._status=1,p._result=H)},function(H){(p._status===0||p._status===-1)&&(p._status=2,p._result=H)}),p._status===-1&&(p._status=0,p._result=w)}if(p._status===1)return p._result.default;throw p._result}var fe={current:null},T={transition:null},G={ReactCurrentDispatcher:fe,ReactCurrentBatchConfig:T,ReactCurrentOwner:ke};function O(){throw Error("act(...) is not supported in production builds of React.")}return X.Children={map:Ee,forEach:function(p,w,H){Ee(p,function(){w.apply(this,arguments)},H)},count:function(p){var w=0;return Ee(p,function(){w++}),w},toArray:function(p){return Ee(p,function(w){return w})||[]},only:function(p){if(!nt(p))throw Error("React.Children.only expected to receive a single React element child.");return p}},X.Component=W,X.Fragment=r,X.Profiler=_,X.PureComponent=qe,X.StrictMode=y,X.Suspense=M,X.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=G,X.act=O,X.cloneElement=function(p,w,H){if(p==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+p+".");var J=Y({},p.props),$=p.key,ee=p.ref,oe=p._owner;if(w!=null){if(w.ref!==void 0&&(ee=w.ref,oe=ke.current),w.key!==void 0&&($=""+w.key),p.type&&p.type.defaultProps)var ie=p.type.defaultProps;for(ce in w)Je.call(w,ce)&&!ae.hasOwnProperty(ce)&&(J[ce]=w[ce]===void 0&&ie!==void 0?ie[ce]:w[ce])}var ce=arguments.length-2;if(ce===1)J.children=H;else if(1<ce){ie=Array(ce);for(var Ye=0;Ye<ce;Ye++)ie[Ye]=arguments[Ye+2];J.children=ie}return{$$typeof:c,type:p.type,key:$,ref:ee,props:J,_owner:oe}},X.createContext=function(p){return p={$$typeof:v,_currentValue:p,_currentValue2:p,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},p.Provider={$$typeof:q,_context:p},p.Consumer=p},X.createElement=_e,X.createFactory=function(p){var w=_e.bind(null,p);return w.type=p,w},X.createRef=function(){return{current:null}},X.forwardRef=function(p){return{$$typeof:I,render:p}},X.isValidElement=nt,X.lazy=function(p){return{$$typeof:R,_payload:{_status:-1,_result:p},_init:Re}},X.memo=function(p,w){return{$$typeof:S,type:p,compare:w===void 0?null:w}},X.startTransition=function(p){var w=T.transition;T.transition={};try{p()}finally{T.transition=w}},X.unstable_act=O,X.useCallback=function(p,w){return fe.current.useCallback(p,w)},X.useContext=function(p){return fe.current.useContext(p)},X.useDebugValue=function(){},X.useDeferredValue=function(p){return fe.current.useDeferredValue(p)},X.useEffect=function(p,w){return fe.current.useEffect(p,w)},X.useId=function(){return fe.current.useId()},X.useImperativeHandle=function(p,w,H){return fe.current.useImperativeHandle(p,w,H)},X.useInsertionEffect=function(p,w){return fe.current.useInsertionEffect(p,w)},X.useLayoutEffect=function(p,w){return fe.current.useLayoutEffect(p,w)},X.useMemo=function(p,w){return fe.current.useMemo(p,w)},X.useReducer=function(p,w,H){return fe.current.useReducer(p,w,H)},X.useRef=function(p){return fe.current.useRef(p)},X.useState=function(p){return fe.current.useState(p)},X.useSyncExternalStore=function(p,w,H){return fe.current.useSyncExternalStore(p,w,H)},X.useTransition=function(){return fe.current.useTransition()},X.version="18.3.1",X}var Wu;function Xs(){return Wu||(Wu=1,zs.exports=pm()),zs.exports}/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Hu;function hm(){if(Hu)return In;Hu=1;var c=Xs(),l=Symbol.for("react.element"),r=Symbol.for("react.fragment"),y=Object.prototype.hasOwnProperty,_=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,q={key:!0,ref:!0,__self:!0,__source:!0};function v(I,M,S){var R,B={},A=null,U=null;S!==void 0&&(A=""+S),M.key!==void 0&&(A=""+M.key),M.ref!==void 0&&(U=M.ref);for(R in M)y.call(M,R)&&!q.hasOwnProperty(R)&&(B[R]=M[R]);if(I&&I.defaultProps)for(R in M=I.defaultProps,M)B[R]===void 0&&(B[R]=M[R]);return{$$typeof:l,type:I,key:A,ref:U,props:B,_owner:_.current}}return In.Fragment=r,In.jsx=v,In.jsxs=v,In}var Zu;function fm(){return Zu||(Zu=1,Os.exports=hm()),Os.exports}var b=fm(),Ge=Xs(),La={},Ls={exports:{}},Xe={},Es={exports:{}},Fs={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Xu;function gm(){return Xu||(Xu=1,function(c){function l(T,G){var O=T.length;T.push(G);e:for(;0<O;){var p=O-1>>>1,w=T[p];if(0<_(w,G))T[p]=G,T[O]=w,O=p;else break e}}function r(T){return T.length===0?null:T[0]}function y(T){if(T.length===0)return null;var G=T[0],O=T.pop();if(O!==G){T[0]=O;e:for(var p=0,w=T.length,H=w>>>1;p<H;){var J=2*(p+1)-1,$=T[J],ee=J+1,oe=T[ee];if(0>_($,O))ee<w&&0>_(oe,$)?(T[p]=oe,T[ee]=O,p=ee):(T[p]=$,T[J]=O,p=J);else if(ee<w&&0>_(oe,O))T[p]=oe,T[ee]=O,p=ee;else break e}}return G}function _(T,G){var O=T.sortIndex-G.sortIndex;return O!==0?O:T.id-G.id}if(typeof performance=="object"&&typeof performance.now=="function"){var q=performance;c.unstable_now=function(){return q.now()}}else{var v=Date,I=v.now();c.unstable_now=function(){return v.now()-I}}var M=[],S=[],R=1,B=null,A=3,U=!1,Y=!1,Z=!1,W=typeof setTimeout=="function"?setTimeout:null,Me=typeof clearTimeout=="function"?clearTimeout:null,qe=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function xe(T){for(var G=r(S);G!==null;){if(G.callback===null)y(S);else if(G.startTime<=T)y(S),G.sortIndex=G.expirationTime,l(M,G);else break;G=r(S)}}function ue(T){if(Z=!1,xe(T),!Y)if(r(M)!==null)Y=!0,Re(Je);else{var G=r(S);G!==null&&fe(ue,G.startTime-T)}}function Je(T,G){Y=!1,Z&&(Z=!1,Me(_e),_e=-1),U=!0;var O=A;try{for(xe(G),B=r(M);B!==null&&(!(B.expirationTime>G)||T&&!ct());){var p=B.callback;if(typeof p=="function"){B.callback=null,A=B.priorityLevel;var w=p(B.expirationTime<=G);G=c.unstable_now(),typeof w=="function"?B.callback=w:B===r(M)&&y(M),xe(G)}else y(M);B=r(M)}if(B!==null)var H=!0;else{var J=r(S);J!==null&&fe(ue,J.startTime-G),H=!1}return H}finally{B=null,A=O,U=!1}}var ke=!1,ae=null,_e=-1,Be=5,nt=-1;function ct(){return!(c.unstable_now()-nt<Be)}function Te(){if(ae!==null){var T=c.unstable_now();nt=T;var G=!0;try{G=ae(!0,T)}finally{G?je():(ke=!1,ae=null)}}else ke=!1}var je;if(typeof qe=="function")je=function(){qe(Te)};else if(typeof MessageChannel<"u"){var me=new MessageChannel,Ee=me.port2;me.port1.onmessage=Te,je=function(){Ee.postMessage(null)}}else je=function(){W(Te,0)};function Re(T){ae=T,ke||(ke=!0,je())}function fe(T,G){_e=W(function(){T(c.unstable_now())},G)}c.unstable_IdlePriority=5,c.unstable_ImmediatePriority=1,c.unstable_LowPriority=4,c.unstable_NormalPriority=3,c.unstable_Profiling=null,c.unstable_UserBlockingPriority=2,c.unstable_cancelCallback=function(T){T.callback=null},c.unstable_continueExecution=function(){Y||U||(Y=!0,Re(Je))},c.unstable_forceFrameRate=function(T){0>T||125<T?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Be=0<T?Math.floor(1e3/T):5},c.unstable_getCurrentPriorityLevel=function(){return A},c.unstable_getFirstCallbackNode=function(){return r(M)},c.unstable_next=function(T){switch(A){case 1:case 2:case 3:var G=3;break;default:G=A}var O=A;A=G;try{return T()}finally{A=O}},c.unstable_pauseExecution=function(){},c.unstable_requestPaint=function(){},c.unstable_runWithPriority=function(T,G){switch(T){case 1:case 2:case 3:case 4:case 5:break;default:T=3}var O=A;A=T;try{return G()}finally{A=O}},c.unstable_scheduleCallback=function(T,G,O){var p=c.unstable_now();switch(typeof O=="object"&&O!==null?(O=O.delay,O=typeof O=="number"&&0<O?p+O:p):O=p,T){case 1:var w=-1;break;case 2:w=250;break;case 5:w=1073741823;break;case 4:w=1e4;break;default:w=5e3}return w=O+w,T={id:R++,callback:G,priorityLevel:T,startTime:O,expirationTime:w,sortIndex:-1},O>p?(T.sortIndex=O,l(S,T),r(M)===null&&T===r(S)&&(Z?(Me(_e),_e=-1):Z=!0,fe(ue,O-p))):(T.sortIndex=w,l(M,T),Y||U||(Y=!0,Re(Je))),T},c.unstable_shouldYield=ct,c.unstable_wrapCallback=function(T){var G=A;return function(){var O=A;A=G;try{return T.apply(this,arguments)}finally{A=O}}}}(Fs)),Fs}var Ju;function _m(){return Ju||(Ju=1,Es.exports=gm()),Es.exports}/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Yu;function bm(){if(Yu)return Xe;Yu=1;var c=Xs(),l=_m();function r(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,i=1;i<arguments.length;i++)t+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y=new Set,_={};function q(e,t){v(e,t),v(e+"Capture",t)}function v(e,t){for(_[e]=t,e=0;e<t.length;e++)y.add(t[e])}var I=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),M=Object.prototype.hasOwnProperty,S=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,R={},B={};function A(e){return M.call(B,e)?!0:M.call(R,e)?!1:S.test(e)?B[e]=!0:(R[e]=!0,!1)}function U(e,t,i,n){if(i!==null&&i.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return n?!1:i!==null?!i.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function Y(e,t,i,n){if(t===null||typeof t>"u"||U(e,t,i,n))return!0;if(n)return!1;if(i!==null)switch(i.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Z(e,t,i,n,a,o,s){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=n,this.attributeNamespace=a,this.mustUseProperty=i,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=s}var W={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){W[e]=new Z(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];W[t]=new Z(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){W[e]=new Z(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){W[e]=new Z(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){W[e]=new Z(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){W[e]=new Z(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){W[e]=new Z(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){W[e]=new Z(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){W[e]=new Z(e,5,!1,e.toLowerCase(),null,!1,!1)});var Me=/[\-:]([a-z])/g;function qe(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Me,qe);W[t]=new Z(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Me,qe);W[t]=new Z(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Me,qe);W[t]=new Z(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){W[e]=new Z(e,1,!1,e.toLowerCase(),null,!1,!1)}),W.xlinkHref=new Z("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){W[e]=new Z(e,1,!1,e.toLowerCase(),null,!0,!0)});function xe(e,t,i,n){var a=W.hasOwnProperty(t)?W[t]:null;(a!==null?a.type!==0:n||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(Y(t,i,a,n)&&(i=null),n||a===null?A(t)&&(i===null?e.removeAttribute(t):e.setAttribute(t,""+i)):a.mustUseProperty?e[a.propertyName]=i===null?a.type===3?!1:"":i:(t=a.attributeName,n=a.attributeNamespace,i===null?e.removeAttribute(t):(a=a.type,i=a===3||a===4&&i===!0?"":""+i,n?e.setAttributeNS(n,t,i):e.setAttribute(t,i))))}var ue=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Je=Symbol.for("react.element"),ke=Symbol.for("react.portal"),ae=Symbol.for("react.fragment"),_e=Symbol.for("react.strict_mode"),Be=Symbol.for("react.profiler"),nt=Symbol.for("react.provider"),ct=Symbol.for("react.context"),Te=Symbol.for("react.forward_ref"),je=Symbol.for("react.suspense"),me=Symbol.for("react.suspense_list"),Ee=Symbol.for("react.memo"),Re=Symbol.for("react.lazy"),fe=Symbol.for("react.offscreen"),T=Symbol.iterator;function G(e){return e===null||typeof e!="object"?null:(e=T&&e[T]||e["@@iterator"],typeof e=="function"?e:null)}var O=Object.assign,p;function w(e){if(p===void 0)try{throw Error()}catch(i){var t=i.stack.trim().match(/\n( *(at )?)/);p=t&&t[1]||""}return`
`+p+e}var H=!1;function J(e,t){if(!e||H)return"";H=!0;var i=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(g){var n=g}Reflect.construct(e,[],t)}else{try{t.call()}catch(g){n=g}e.call(t.prototype)}else{try{throw Error()}catch(g){n=g}e()}}catch(g){if(g&&n&&typeof g.stack=="string"){for(var a=g.stack.split(`
`),o=n.stack.split(`
`),s=a.length-1,u=o.length-1;1<=s&&0<=u&&a[s]!==o[u];)u--;for(;1<=s&&0<=u;s--,u--)if(a[s]!==o[u]){if(s!==1||u!==1)do if(s--,u--,0>u||a[s]!==o[u]){var d=`
`+a[s].replace(" at new "," at ");return e.displayName&&d.includes("<anonymous>")&&(d=d.replace("<anonymous>",e.displayName)),d}while(1<=s&&0<=u);break}}}finally{H=!1,Error.prepareStackTrace=i}return(e=e?e.displayName||e.name:"")?w(e):""}function $(e){switch(e.tag){case 5:return w(e.type);case 16:return w("Lazy");case 13:return w("Suspense");case 19:return w("SuspenseList");case 0:case 2:case 15:return e=J(e.type,!1),e;case 11:return e=J(e.type.render,!1),e;case 1:return e=J(e.type,!0),e;default:return""}}function ee(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case ae:return"Fragment";case ke:return"Portal";case Be:return"Profiler";case _e:return"StrictMode";case je:return"Suspense";case me:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case ct:return(e.displayName||"Context")+".Consumer";case nt:return(e._context.displayName||"Context")+".Provider";case Te:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Ee:return t=e.displayName||null,t!==null?t:ee(e.type)||"Memo";case Re:t=e._payload,e=e._init;try{return ee(e(t))}catch{}}return null}function oe(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return ee(t);case 8:return t===_e?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function ie(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function ce(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Ye(e){var t=ce(e)?"checked":"value",i=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&typeof i<"u"&&typeof i.get=="function"&&typeof i.set=="function"){var a=i.get,o=i.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(s){n=""+s,o.call(this,s)}}),Object.defineProperty(e,t,{enumerable:i.enumerable}),{getValue:function(){return n},setValue:function(s){n=""+s},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Qn(e){e._valueTracker||(e._valueTracker=Ye(e))}function Ys(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var i=t.getValue(),n="";return e&&(n=ce(e)?e.checked?"true":"false":e.value),e=n,e!==i?(t.setValue(e),!0):!1}function Sn(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Ga(e,t){var i=t.checked;return O({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:i??e._wrapperState.initialChecked})}function Ks(e,t){var i=t.defaultValue==null?"":t.defaultValue,n=t.checked!=null?t.checked:t.defaultChecked;i=ie(t.value!=null?t.value:i),e._wrapperState={initialChecked:n,initialValue:i,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function $s(e,t){t=t.checked,t!=null&&xe(e,"checked",t,!1)}function ja(e,t){$s(e,t);var i=ie(t.value),n=t.type;if(i!=null)n==="number"?(i===0&&e.value===""||e.value!=i)&&(e.value=""+i):e.value!==""+i&&(e.value=""+i);else if(n==="submit"||n==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?Va(e,t.type,i):t.hasOwnProperty("defaultValue")&&Va(e,t.type,ie(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function er(e,t,i){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!(n!=="submit"&&n!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,i||t===e.value||(e.value=t),e.defaultValue=t}i=e.name,i!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,i!==""&&(e.name=i)}function Va(e,t,i){(t!=="number"||Sn(e.ownerDocument)!==e)&&(i==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+i&&(e.defaultValue=""+i))}var Ni=Array.isArray;function hi(e,t,i,n){if(e=e.options,t){t={};for(var a=0;a<i.length;a++)t["$"+i[a]]=!0;for(i=0;i<e.length;i++)a=t.hasOwnProperty("$"+e[i].value),e[i].selected!==a&&(e[i].selected=a),a&&n&&(e[i].defaultSelected=!0)}else{for(i=""+ie(i),t=null,a=0;a<e.length;a++){if(e[a].value===i){e[a].selected=!0,n&&(e[a].defaultSelected=!0);return}t!==null||e[a].disabled||(t=e[a])}t!==null&&(t.selected=!0)}}function Ua(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(r(91));return O({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function tr(e,t){var i=t.value;if(i==null){if(i=t.children,t=t.defaultValue,i!=null){if(t!=null)throw Error(r(92));if(Ni(i)){if(1<i.length)throw Error(r(93));i=i[0]}t=i}t==null&&(t=""),i=t}e._wrapperState={initialValue:ie(i)}}function ir(e,t){var i=ie(t.value),n=ie(t.defaultValue);i!=null&&(i=""+i,i!==e.value&&(e.value=i),t.defaultValue==null&&e.defaultValue!==i&&(e.defaultValue=i)),n!=null&&(e.defaultValue=""+n)}function nr(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function ar(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Wa(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?ar(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Bn,or=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,i,n,a){MSApp.execUnsafeLocalFunction(function(){return e(t,i,n,a)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Bn=Bn||document.createElement("div"),Bn.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Bn.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Gi(e,t){if(t){var i=e.firstChild;if(i&&i===e.lastChild&&i.nodeType===3){i.nodeValue=t;return}}e.textContent=t}var ji={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},_c=["Webkit","ms","Moz","O"];Object.keys(ji).forEach(function(e){_c.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ji[t]=ji[e]})});function sr(e,t,i){return t==null||typeof t=="boolean"||t===""?"":i||typeof t!="number"||t===0||ji.hasOwnProperty(e)&&ji[e]?(""+t).trim():t+"px"}function rr(e,t){e=e.style;for(var i in t)if(t.hasOwnProperty(i)){var n=i.indexOf("--")===0,a=sr(i,t[i],n);i==="float"&&(i="cssFloat"),n?e.setProperty(i,a):e[i]=a}}var bc=O({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ha(e,t){if(t){if(bc[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(r(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(r(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(r(61))}if(t.style!=null&&typeof t.style!="object")throw Error(r(62))}}function Za(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Xa=null;function Ja(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Ya=null,fi=null,gi=null;function lr(e){if(e=mn(e)){if(typeof Ya!="function")throw Error(r(280));var t=e.stateNode;t&&(t=$n(t),Ya(e.stateNode,e.type,t))}}function ur(e){fi?gi?gi.push(e):gi=[e]:fi=e}function cr(){if(fi){var e=fi,t=gi;if(gi=fi=null,lr(e),t)for(e=0;e<t.length;e++)lr(t[e])}}function dr(e,t){return e(t)}function mr(){}var Ka=!1;function pr(e,t,i){if(Ka)return e(t,i);Ka=!0;try{return dr(e,t,i)}finally{Ka=!1,(fi!==null||gi!==null)&&(mr(),cr())}}function Vi(e,t){var i=e.stateNode;if(i===null)return null;var n=$n(i);if(n===null)return null;i=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(e=e.type,n=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!n;break e;default:e=!1}if(e)return null;if(i&&typeof i!="function")throw Error(r(231,t,typeof i));return i}var $a=!1;if(I)try{var Ui={};Object.defineProperty(Ui,"passive",{get:function(){$a=!0}}),window.addEventListener("test",Ui,Ui),window.removeEventListener("test",Ui,Ui)}catch{$a=!1}function yc(e,t,i,n,a,o,s,u,d){var g=Array.prototype.slice.call(arguments,3);try{t.apply(i,g)}catch(C){this.onError(C)}}var Wi=!1,Tn=null,Rn=!1,eo=null,qc={onError:function(e){Wi=!0,Tn=e}};function vc(e,t,i,n,a,o,s,u,d){Wi=!1,Tn=null,yc.apply(qc,arguments)}function kc(e,t,i,n,a,o,s,u,d){if(vc.apply(this,arguments),Wi){if(Wi){var g=Tn;Wi=!1,Tn=null}else throw Error(r(198));Rn||(Rn=!0,eo=g)}}function $t(e){var t=e,i=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,(t.flags&4098)!==0&&(i=t.return),e=t.return;while(e)}return t.tag===3?i:null}function hr(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function fr(e){if($t(e)!==e)throw Error(r(188))}function wc(e){var t=e.alternate;if(!t){if(t=$t(e),t===null)throw Error(r(188));return t!==e?null:e}for(var i=e,n=t;;){var a=i.return;if(a===null)break;var o=a.alternate;if(o===null){if(n=a.return,n!==null){i=n;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===i)return fr(a),e;if(o===n)return fr(a),t;o=o.sibling}throw Error(r(188))}if(i.return!==n.return)i=a,n=o;else{for(var s=!1,u=a.child;u;){if(u===i){s=!0,i=a,n=o;break}if(u===n){s=!0,n=a,i=o;break}u=u.sibling}if(!s){for(u=o.child;u;){if(u===i){s=!0,i=o,n=a;break}if(u===n){s=!0,n=o,i=a;break}u=u.sibling}if(!s)throw Error(r(189))}}if(i.alternate!==n)throw Error(r(190))}if(i.tag!==3)throw Error(r(188));return i.stateNode.current===i?e:t}function gr(e){return e=wc(e),e!==null?_r(e):null}function _r(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=_r(e);if(t!==null)return t;e=e.sibling}return null}var br=l.unstable_scheduleCallback,yr=l.unstable_cancelCallback,Cc=l.unstable_shouldYield,Mc=l.unstable_requestPaint,be=l.unstable_now,xc=l.unstable_getCurrentPriorityLevel,to=l.unstable_ImmediatePriority,qr=l.unstable_UserBlockingPriority,An=l.unstable_NormalPriority,Ic=l.unstable_LowPriority,vr=l.unstable_IdlePriority,Pn=null,bt=null;function Qc(e){if(bt&&typeof bt.onCommitFiberRoot=="function")try{bt.onCommitFiberRoot(Pn,e,void 0,(e.current.flags&128)===128)}catch{}}var dt=Math.clz32?Math.clz32:Tc,Sc=Math.log,Bc=Math.LN2;function Tc(e){return e>>>=0,e===0?32:31-(Sc(e)/Bc|0)|0}var Dn=64,On=4194304;function Hi(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function zn(e,t){var i=e.pendingLanes;if(i===0)return 0;var n=0,a=e.suspendedLanes,o=e.pingedLanes,s=i&268435455;if(s!==0){var u=s&~a;u!==0?n=Hi(u):(o&=s,o!==0&&(n=Hi(o)))}else s=i&~a,s!==0?n=Hi(s):o!==0&&(n=Hi(o));if(n===0)return 0;if(t!==0&&t!==n&&(t&a)===0&&(a=n&-n,o=t&-t,a>=o||a===16&&(o&4194240)!==0))return t;if((n&4)!==0&&(n|=i&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=n;0<t;)i=31-dt(t),a=1<<i,n|=e[i],t&=~a;return n}function Rc(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Ac(e,t){for(var i=e.suspendedLanes,n=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var s=31-dt(o),u=1<<s,d=a[s];d===-1?((u&i)===0||(u&n)!==0)&&(a[s]=Rc(u,t)):d<=t&&(e.expiredLanes|=u),o&=~u}}function io(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function kr(){var e=Dn;return Dn<<=1,(Dn&4194240)===0&&(Dn=64),e}function no(e){for(var t=[],i=0;31>i;i++)t.push(e);return t}function Zi(e,t,i){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-dt(t),e[t]=i}function Pc(e,t){var i=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<i;){var a=31-dt(i),o=1<<a;t[a]=0,n[a]=-1,e[a]=-1,i&=~o}}function ao(e,t){var i=e.entangledLanes|=t;for(e=e.entanglements;i;){var n=31-dt(i),a=1<<n;a&t|e[n]&t&&(e[n]|=t),i&=~a}}var ne=0;function wr(e){return e&=-e,1<e?4<e?(e&268435455)!==0?16:536870912:4:1}var Cr,oo,Mr,xr,Ir,so=!1,Ln=[],At=null,Pt=null,Dt=null,Xi=new Map,Ji=new Map,Ot=[],Dc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Qr(e,t){switch(e){case"focusin":case"focusout":At=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Dt=null;break;case"pointerover":case"pointerout":Xi.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ji.delete(t.pointerId)}}function Yi(e,t,i,n,a,o){return e===null||e.nativeEvent!==o?(e={blockedOn:t,domEventName:i,eventSystemFlags:n,nativeEvent:o,targetContainers:[a]},t!==null&&(t=mn(t),t!==null&&oo(t)),e):(e.eventSystemFlags|=n,t=e.targetContainers,a!==null&&t.indexOf(a)===-1&&t.push(a),e)}function Oc(e,t,i,n,a){switch(t){case"focusin":return At=Yi(At,e,t,i,n,a),!0;case"dragenter":return Pt=Yi(Pt,e,t,i,n,a),!0;case"mouseover":return Dt=Yi(Dt,e,t,i,n,a),!0;case"pointerover":var o=a.pointerId;return Xi.set(o,Yi(Xi.get(o)||null,e,t,i,n,a)),!0;case"gotpointercapture":return o=a.pointerId,Ji.set(o,Yi(Ji.get(o)||null,e,t,i,n,a)),!0}return!1}function Sr(e){var t=ei(e.target);if(t!==null){var i=$t(t);if(i!==null){if(t=i.tag,t===13){if(t=hr(i),t!==null){e.blockedOn=t,Ir(e.priority,function(){Mr(i)});return}}else if(t===3&&i.stateNode.current.memoizedState.isDehydrated){e.blockedOn=i.tag===3?i.stateNode.containerInfo:null;return}}}e.blockedOn=null}function En(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var i=lo(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(i===null){i=e.nativeEvent;var n=new i.constructor(i.type,i);Xa=n,i.target.dispatchEvent(n),Xa=null}else return t=mn(i),t!==null&&oo(t),e.blockedOn=i,!1;t.shift()}return!0}function Br(e,t,i){En(e)&&i.delete(t)}function zc(){so=!1,At!==null&&En(At)&&(At=null),Pt!==null&&En(Pt)&&(Pt=null),Dt!==null&&En(Dt)&&(Dt=null),Xi.forEach(Br),Ji.forEach(Br)}function Ki(e,t){e.blockedOn===t&&(e.blockedOn=null,so||(so=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,zc)))}function $i(e){function t(a){return Ki(a,e)}if(0<Ln.length){Ki(Ln[0],e);for(var i=1;i<Ln.length;i++){var n=Ln[i];n.blockedOn===e&&(n.blockedOn=null)}}for(At!==null&&Ki(At,e),Pt!==null&&Ki(Pt,e),Dt!==null&&Ki(Dt,e),Xi.forEach(t),Ji.forEach(t),i=0;i<Ot.length;i++)n=Ot[i],n.blockedOn===e&&(n.blockedOn=null);for(;0<Ot.length&&(i=Ot[0],i.blockedOn===null);)Sr(i),i.blockedOn===null&&Ot.shift()}var _i=ue.ReactCurrentBatchConfig,Fn=!0;function Lc(e,t,i,n){var a=ne,o=_i.transition;_i.transition=null;try{ne=1,ro(e,t,i,n)}finally{ne=a,_i.transition=o}}function Ec(e,t,i,n){var a=ne,o=_i.transition;_i.transition=null;try{ne=4,ro(e,t,i,n)}finally{ne=a,_i.transition=o}}function ro(e,t,i,n){if(Fn){var a=lo(e,t,i,n);if(a===null)xo(e,t,n,Nn,i),Qr(e,n);else if(Oc(a,e,t,i,n))n.stopPropagation();else if(Qr(e,n),t&4&&-1<Dc.indexOf(e)){for(;a!==null;){var o=mn(a);if(o!==null&&Cr(o),o=lo(e,t,i,n),o===null&&xo(e,t,n,Nn,i),o===a)break;a=o}a!==null&&n.stopPropagation()}else xo(e,t,n,null,i)}}var Nn=null;function lo(e,t,i,n){if(Nn=null,e=Ja(n),e=ei(e),e!==null)if(t=$t(e),t===null)e=null;else if(i=t.tag,i===13){if(e=hr(t),e!==null)return e;e=null}else if(i===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Nn=e,null}function Tr(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(xc()){case to:return 1;case qr:return 4;case An:case Ic:return 16;case vr:return 536870912;default:return 16}default:return 16}}var zt=null,uo=null,Gn=null;function Rr(){if(Gn)return Gn;var e,t=uo,i=t.length,n,a="value"in zt?zt.value:zt.textContent,o=a.length;for(e=0;e<i&&t[e]===a[e];e++);var s=i-e;for(n=1;n<=s&&t[i-n]===a[o-n];n++);return Gn=a.slice(e,1<n?1-n:void 0)}function jn(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Vn(){return!0}function Ar(){return!1}function Ke(e){function t(i,n,a,o,s){this._reactName=i,this._targetInst=a,this.type=n,this.nativeEvent=o,this.target=s,this.currentTarget=null;for(var u in e)e.hasOwnProperty(u)&&(i=e[u],this[u]=i?i(o):o[u]);return this.isDefaultPrevented=(o.defaultPrevented!=null?o.defaultPrevented:o.returnValue===!1)?Vn:Ar,this.isPropagationStopped=Ar,this}return O(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var i=this.nativeEvent;i&&(i.preventDefault?i.preventDefault():typeof i.returnValue!="unknown"&&(i.returnValue=!1),this.isDefaultPrevented=Vn)},stopPropagation:function(){var i=this.nativeEvent;i&&(i.stopPropagation?i.stopPropagation():typeof i.cancelBubble!="unknown"&&(i.cancelBubble=!0),this.isPropagationStopped=Vn)},persist:function(){},isPersistent:Vn}),t}var bi={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},co=Ke(bi),en=O({},bi,{view:0,detail:0}),Fc=Ke(en),mo,po,tn,Un=O({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:fo,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==tn&&(tn&&e.type==="mousemove"?(mo=e.screenX-tn.screenX,po=e.screenY-tn.screenY):po=mo=0,tn=e),mo)},movementY:function(e){return"movementY"in e?e.movementY:po}}),Pr=Ke(Un),Nc=O({},Un,{dataTransfer:0}),Gc=Ke(Nc),jc=O({},en,{relatedTarget:0}),ho=Ke(jc),Vc=O({},bi,{animationName:0,elapsedTime:0,pseudoElement:0}),Uc=Ke(Vc),Wc=O({},bi,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Hc=Ke(Wc),Zc=O({},bi,{data:0}),Dr=Ke(Zc),Xc={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jc={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Yc={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Kc(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=Yc[e])?!!t[e]:!1}function fo(){return Kc}var $c=O({},en,{key:function(e){if(e.key){var t=Xc[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=jn(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Jc[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:fo,charCode:function(e){return e.type==="keypress"?jn(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?jn(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),ed=Ke($c),td=O({},Un,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Or=Ke(td),id=O({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:fo}),nd=Ke(id),ad=O({},bi,{propertyName:0,elapsedTime:0,pseudoElement:0}),od=Ke(ad),sd=O({},Un,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),rd=Ke(sd),ld=[9,13,27,32],go=I&&"CompositionEvent"in window,nn=null;I&&"documentMode"in document&&(nn=document.documentMode);var ud=I&&"TextEvent"in window&&!nn,zr=I&&(!go||nn&&8<nn&&11>=nn),Lr=" ",Er=!1;function Fr(e,t){switch(e){case"keyup":return ld.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Nr(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var yi=!1;function cd(e,t){switch(e){case"compositionend":return Nr(t);case"keypress":return t.which!==32?null:(Er=!0,Lr);case"textInput":return e=t.data,e===Lr&&Er?null:e;default:return null}}function dd(e,t){if(yi)return e==="compositionend"||!go&&Fr(e,t)?(e=Rr(),Gn=uo=zt=null,yi=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zr&&t.locale!=="ko"?null:t.data;default:return null}}var md={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Gr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!md[e.type]:t==="textarea"}function jr(e,t,i,n){ur(n),t=Jn(t,"onChange"),0<t.length&&(i=new co("onChange","change",null,i,n),e.push({event:i,listeners:t}))}var an=null,on=null;function pd(e){rl(e,0)}function Wn(e){var t=Ci(e);if(Ys(t))return e}function hd(e,t){if(e==="change")return t}var Vr=!1;if(I){var _o;if(I){var bo="oninput"in document;if(!bo){var Ur=document.createElement("div");Ur.setAttribute("oninput","return;"),bo=typeof Ur.oninput=="function"}_o=bo}else _o=!1;Vr=_o&&(!document.documentMode||9<document.documentMode)}function Wr(){an&&(an.detachEvent("onpropertychange",Hr),on=an=null)}function Hr(e){if(e.propertyName==="value"&&Wn(on)){var t=[];jr(t,on,e,Ja(e)),pr(pd,t)}}function fd(e,t,i){e==="focusin"?(Wr(),an=t,on=i,an.attachEvent("onpropertychange",Hr)):e==="focusout"&&Wr()}function gd(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Wn(on)}function _d(e,t){if(e==="click")return Wn(t)}function bd(e,t){if(e==="input"||e==="change")return Wn(t)}function yd(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var mt=typeof Object.is=="function"?Object.is:yd;function sn(e,t){if(mt(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var i=Object.keys(e),n=Object.keys(t);if(i.length!==n.length)return!1;for(n=0;n<i.length;n++){var a=i[n];if(!M.call(t,a)||!mt(e[a],t[a]))return!1}return!0}function Zr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xr(e,t){var i=Zr(e);e=0;for(var n;i;){if(i.nodeType===3){if(n=e+i.textContent.length,e<=t&&n>=t)return{node:i,offset:t-e};e=n}e:{for(;i;){if(i.nextSibling){i=i.nextSibling;break e}i=i.parentNode}i=void 0}i=Zr(i)}}function Jr(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Jr(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Yr(){for(var e=window,t=Sn();t instanceof e.HTMLIFrameElement;){try{var i=typeof t.contentWindow.location.href=="string"}catch{i=!1}if(i)e=t.contentWindow;else break;t=Sn(e.document)}return t}function yo(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function qd(e){var t=Yr(),i=e.focusedElem,n=e.selectionRange;if(t!==i&&i&&i.ownerDocument&&Jr(i.ownerDocument.documentElement,i)){if(n!==null&&yo(i)){if(t=n.start,e=n.end,e===void 0&&(e=t),"selectionStart"in i)i.selectionStart=t,i.selectionEnd=Math.min(e,i.value.length);else if(e=(t=i.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var a=i.textContent.length,o=Math.min(n.start,a);n=n.end===void 0?o:Math.min(n.end,a),!e.extend&&o>n&&(a=n,n=o,o=a),a=Xr(i,o);var s=Xr(i,n);a&&s&&(e.rangeCount!==1||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&(t=t.createRange(),t.setStart(a.node,a.offset),e.removeAllRanges(),o>n?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}}for(t=[],e=i;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof i.focus=="function"&&i.focus(),i=0;i<t.length;i++)e=t[i],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var vd=I&&"documentMode"in document&&11>=document.documentMode,qi=null,qo=null,rn=null,vo=!1;function Kr(e,t,i){var n=i.window===i?i.document:i.nodeType===9?i:i.ownerDocument;vo||qi==null||qi!==Sn(n)||(n=qi,"selectionStart"in n&&yo(n)?n={start:n.selectionStart,end:n.selectionEnd}:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection(),n={anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}),rn&&sn(rn,n)||(rn=n,n=Jn(qo,"onSelect"),0<n.length&&(t=new co("onSelect","select",null,t,i),e.push({event:t,listeners:n}),t.target=qi)))}function Hn(e,t){var i={};return i[e.toLowerCase()]=t.toLowerCase(),i["Webkit"+e]="webkit"+t,i["Moz"+e]="moz"+t,i}var vi={animationend:Hn("Animation","AnimationEnd"),animationiteration:Hn("Animation","AnimationIteration"),animationstart:Hn("Animation","AnimationStart"),transitionend:Hn("Transition","TransitionEnd")},ko={},$r={};I&&($r=document.createElement("div").style,"AnimationEvent"in window||(delete vi.animationend.animation,delete vi.animationiteration.animation,delete vi.animationstart.animation),"TransitionEvent"in window||delete vi.transitionend.transition);function Zn(e){if(ko[e])return ko[e];if(!vi[e])return e;var t=vi[e],i;for(i in t)if(t.hasOwnProperty(i)&&i in $r)return ko[e]=t[i];return e}var el=Zn("animationend"),tl=Zn("animationiteration"),il=Zn("animationstart"),nl=Zn("transitionend"),al=new Map,ol="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lt(e,t){al.set(e,t),q(t,[e])}for(var wo=0;wo<ol.length;wo++){var Co=ol[wo],kd=Co.toLowerCase(),wd=Co[0].toUpperCase()+Co.slice(1);Lt(kd,"on"+wd)}Lt(el,"onAnimationEnd"),Lt(tl,"onAnimationIteration"),Lt(il,"onAnimationStart"),Lt("dblclick","onDoubleClick"),Lt("focusin","onFocus"),Lt("focusout","onBlur"),Lt(nl,"onTransitionEnd"),v("onMouseEnter",["mouseout","mouseover"]),v("onMouseLeave",["mouseout","mouseover"]),v("onPointerEnter",["pointerout","pointerover"]),v("onPointerLeave",["pointerout","pointerover"]),q("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),q("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),q("onBeforeInput",["compositionend","keypress","textInput","paste"]),q("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),q("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),q("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var ln="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Cd=new Set("cancel close invalid load scroll toggle".split(" ").concat(ln));function sl(e,t,i){var n=e.type||"unknown-event";e.currentTarget=i,kc(n,t,void 0,e),e.currentTarget=null}function rl(e,t){t=(t&4)!==0;for(var i=0;i<e.length;i++){var n=e[i],a=n.event;n=n.listeners;e:{var o=void 0;if(t)for(var s=n.length-1;0<=s;s--){var u=n[s],d=u.instance,g=u.currentTarget;if(u=u.listener,d!==o&&a.isPropagationStopped())break e;sl(a,u,g),o=d}else for(s=0;s<n.length;s++){if(u=n[s],d=u.instance,g=u.currentTarget,u=u.listener,d!==o&&a.isPropagationStopped())break e;sl(a,u,g),o=d}}}if(Rn)throw e=eo,Rn=!1,eo=null,e}function re(e,t){var i=t[Ro];i===void 0&&(i=t[Ro]=new Set);var n=e+"__bubble";i.has(n)||(ll(t,e,2,!1),i.add(n))}function Mo(e,t,i){var n=0;t&&(n|=4),ll(i,e,n,t)}var Xn="_reactListening"+Math.random().toString(36).slice(2);function un(e){if(!e[Xn]){e[Xn]=!0,y.forEach(function(i){i!=="selectionchange"&&(Cd.has(i)||Mo(i,!1,e),Mo(i,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Xn]||(t[Xn]=!0,Mo("selectionchange",!1,t))}}function ll(e,t,i,n){switch(Tr(t)){case 1:var a=Lc;break;case 4:a=Ec;break;default:a=ro}i=a.bind(null,t,i,e),a=void 0,!$a||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(a=!0),n?a!==void 0?e.addEventListener(t,i,{capture:!0,passive:a}):e.addEventListener(t,i,!0):a!==void 0?e.addEventListener(t,i,{passive:a}):e.addEventListener(t,i,!1)}function xo(e,t,i,n,a){var o=n;if((t&1)===0&&(t&2)===0&&n!==null)e:for(;;){if(n===null)return;var s=n.tag;if(s===3||s===4){var u=n.stateNode.containerInfo;if(u===a||u.nodeType===8&&u.parentNode===a)break;if(s===4)for(s=n.return;s!==null;){var d=s.tag;if((d===3||d===4)&&(d=s.stateNode.containerInfo,d===a||d.nodeType===8&&d.parentNode===a))return;s=s.return}for(;u!==null;){if(s=ei(u),s===null)return;if(d=s.tag,d===5||d===6){n=o=s;continue e}u=u.parentNode}}n=n.return}pr(function(){var g=o,C=Ja(i),x=[];e:{var k=al.get(e);if(k!==void 0){var P=co,z=e;switch(e){case"keypress":if(jn(i)===0)break e;case"keydown":case"keyup":P=ed;break;case"focusin":z="focus",P=ho;break;case"focusout":z="blur",P=ho;break;case"beforeblur":case"afterblur":P=ho;break;case"click":if(i.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":P=Pr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":P=Gc;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":P=nd;break;case el:case tl:case il:P=Uc;break;case nl:P=od;break;case"scroll":P=Fc;break;case"wheel":P=rd;break;case"copy":case"cut":case"paste":P=Hc;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":P=Or}var L=(t&4)!==0,ye=!L&&e==="scroll",h=L?k!==null?k+"Capture":null:k;L=[];for(var m=g,f;m!==null;){f=m;var Q=f.stateNode;if(f.tag===5&&Q!==null&&(f=Q,h!==null&&(Q=Vi(m,h),Q!=null&&L.push(cn(m,Q,f)))),ye)break;m=m.return}0<L.length&&(k=new P(k,z,null,i,C),x.push({event:k,listeners:L}))}}if((t&7)===0){e:{if(k=e==="mouseover"||e==="pointerover",P=e==="mouseout"||e==="pointerout",k&&i!==Xa&&(z=i.relatedTarget||i.fromElement)&&(ei(z)||z[Ct]))break e;if((P||k)&&(k=C.window===C?C:(k=C.ownerDocument)?k.defaultView||k.parentWindow:window,P?(z=i.relatedTarget||i.toElement,P=g,z=z?ei(z):null,z!==null&&(ye=$t(z),z!==ye||z.tag!==5&&z.tag!==6)&&(z=null)):(P=null,z=g),P!==z)){if(L=Pr,Q="onMouseLeave",h="onMouseEnter",m="mouse",(e==="pointerout"||e==="pointerover")&&(L=Or,Q="onPointerLeave",h="onPointerEnter",m="pointer"),ye=P==null?k:Ci(P),f=z==null?k:Ci(z),k=new L(Q,m+"leave",P,i,C),k.target=ye,k.relatedTarget=f,Q=null,ei(C)===g&&(L=new L(h,m+"enter",z,i,C),L.target=f,L.relatedTarget=ye,Q=L),ye=Q,P&&z)t:{for(L=P,h=z,m=0,f=L;f;f=ki(f))m++;for(f=0,Q=h;Q;Q=ki(Q))f++;for(;0<m-f;)L=ki(L),m--;for(;0<f-m;)h=ki(h),f--;for(;m--;){if(L===h||h!==null&&L===h.alternate)break t;L=ki(L),h=ki(h)}L=null}else L=null;P!==null&&ul(x,k,P,L,!1),z!==null&&ye!==null&&ul(x,ye,z,L,!0)}}e:{if(k=g?Ci(g):window,P=k.nodeName&&k.nodeName.toLowerCase(),P==="select"||P==="input"&&k.type==="file")var E=hd;else if(Gr(k))if(Vr)E=bd;else{E=gd;var F=fd}else(P=k.nodeName)&&P.toLowerCase()==="input"&&(k.type==="checkbox"||k.type==="radio")&&(E=_d);if(E&&(E=E(e,g))){jr(x,E,i,C);break e}F&&F(e,k,g),e==="focusout"&&(F=k._wrapperState)&&F.controlled&&k.type==="number"&&Va(k,"number",k.value)}switch(F=g?Ci(g):window,e){case"focusin":(Gr(F)||F.contentEditable==="true")&&(qi=F,qo=g,rn=null);break;case"focusout":rn=qo=qi=null;break;case"mousedown":vo=!0;break;case"contextmenu":case"mouseup":case"dragend":vo=!1,Kr(x,i,C);break;case"selectionchange":if(vd)break;case"keydown":case"keyup":Kr(x,i,C)}var N;if(go)e:{switch(e){case"compositionstart":var V="onCompositionStart";break e;case"compositionend":V="onCompositionEnd";break e;case"compositionupdate":V="onCompositionUpdate";break e}V=void 0}else yi?Fr(e,i)&&(V="onCompositionEnd"):e==="keydown"&&i.keyCode===229&&(V="onCompositionStart");V&&(zr&&i.locale!=="ko"&&(yi||V!=="onCompositionStart"?V==="onCompositionEnd"&&yi&&(N=Rr()):(zt=C,uo="value"in zt?zt.value:zt.textContent,yi=!0)),F=Jn(g,V),0<F.length&&(V=new Dr(V,e,null,i,C),x.push({event:V,listeners:F}),N?V.data=N:(N=Nr(i),N!==null&&(V.data=N)))),(N=ud?cd(e,i):dd(e,i))&&(g=Jn(g,"onBeforeInput"),0<g.length&&(C=new Dr("onBeforeInput","beforeinput",null,i,C),x.push({event:C,listeners:g}),C.data=N))}rl(x,t)})}function cn(e,t,i){return{instance:e,listener:t,currentTarget:i}}function Jn(e,t){for(var i=t+"Capture",n=[];e!==null;){var a=e,o=a.stateNode;a.tag===5&&o!==null&&(a=o,o=Vi(e,i),o!=null&&n.unshift(cn(e,o,a)),o=Vi(e,t),o!=null&&n.push(cn(e,o,a))),e=e.return}return n}function ki(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function ul(e,t,i,n,a){for(var o=t._reactName,s=[];i!==null&&i!==n;){var u=i,d=u.alternate,g=u.stateNode;if(d!==null&&d===n)break;u.tag===5&&g!==null&&(u=g,a?(d=Vi(i,o),d!=null&&s.unshift(cn(i,d,u))):a||(d=Vi(i,o),d!=null&&s.push(cn(i,d,u)))),i=i.return}s.length!==0&&e.push({event:t,listeners:s})}var Md=/\r\n?/g,xd=/\u0000|\uFFFD/g;function cl(e){return(typeof e=="string"?e:""+e).replace(Md,`
`).replace(xd,"")}function Yn(e,t,i){if(t=cl(t),cl(e)!==t&&i)throw Error(r(425))}function Kn(){}var Io=null,Qo=null;function So(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Bo=typeof setTimeout=="function"?setTimeout:void 0,Id=typeof clearTimeout=="function"?clearTimeout:void 0,dl=typeof Promise=="function"?Promise:void 0,Qd=typeof queueMicrotask=="function"?queueMicrotask:typeof dl<"u"?function(e){return dl.resolve(null).then(e).catch(Sd)}:Bo;function Sd(e){setTimeout(function(){throw e})}function To(e,t){var i=t,n=0;do{var a=i.nextSibling;if(e.removeChild(i),a&&a.nodeType===8)if(i=a.data,i==="/$"){if(n===0){e.removeChild(a),$i(t);return}n--}else i!=="$"&&i!=="$?"&&i!=="$!"||n++;i=a}while(i);$i(t)}function Et(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function ml(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var i=e.data;if(i==="$"||i==="$!"||i==="$?"){if(t===0)return e;t--}else i==="/$"&&t++}e=e.previousSibling}return null}var wi=Math.random().toString(36).slice(2),yt="__reactFiber$"+wi,dn="__reactProps$"+wi,Ct="__reactContainer$"+wi,Ro="__reactEvents$"+wi,Bd="__reactListeners$"+wi,Td="__reactHandles$"+wi;function ei(e){var t=e[yt];if(t)return t;for(var i=e.parentNode;i;){if(t=i[Ct]||i[yt]){if(i=t.alternate,t.child!==null||i!==null&&i.child!==null)for(e=ml(e);e!==null;){if(i=e[yt])return i;e=ml(e)}return t}e=i,i=e.parentNode}return null}function mn(e){return e=e[yt]||e[Ct],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Ci(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(r(33))}function $n(e){return e[dn]||null}var Ao=[],Mi=-1;function Ft(e){return{current:e}}function le(e){0>Mi||(e.current=Ao[Mi],Ao[Mi]=null,Mi--)}function se(e,t){Mi++,Ao[Mi]=e.current,e.current=t}var Nt={},De=Ft(Nt),Ve=Ft(!1),ti=Nt;function xi(e,t){var i=e.type.contextTypes;if(!i)return Nt;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var a={},o;for(o in i)a[o]=t[o];return n&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ue(e){return e=e.childContextTypes,e!=null}function ea(){le(Ve),le(De)}function pl(e,t,i){if(De.current!==Nt)throw Error(r(168));se(De,t),se(Ve,i)}function hl(e,t,i){var n=e.stateNode;if(t=t.childContextTypes,typeof n.getChildContext!="function")return i;n=n.getChildContext();for(var a in n)if(!(a in t))throw Error(r(108,oe(e)||"Unknown",a));return O({},i,n)}function ta(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Nt,ti=De.current,se(De,e),se(Ve,Ve.current),!0}function fl(e,t,i){var n=e.stateNode;if(!n)throw Error(r(169));i?(e=hl(e,t,ti),n.__reactInternalMemoizedMergedChildContext=e,le(Ve),le(De),se(De,e)):le(Ve),se(Ve,i)}var Mt=null,ia=!1,Po=!1;function gl(e){Mt===null?Mt=[e]:Mt.push(e)}function Rd(e){ia=!0,gl(e)}function Gt(){if(!Po&&Mt!==null){Po=!0;var e=0,t=ne;try{var i=Mt;for(ne=1;e<i.length;e++){var n=i[e];do n=n(!0);while(n!==null)}Mt=null,ia=!1}catch(a){throw Mt!==null&&(Mt=Mt.slice(e+1)),br(to,Gt),a}finally{ne=t,Po=!1}}return null}var Ii=[],Qi=0,na=null,aa=0,at=[],ot=0,ii=null,xt=1,It="";function ni(e,t){Ii[Qi++]=aa,Ii[Qi++]=na,na=e,aa=t}function _l(e,t,i){at[ot++]=xt,at[ot++]=It,at[ot++]=ii,ii=e;var n=xt;e=It;var a=32-dt(n)-1;n&=~(1<<a),i+=1;var o=32-dt(t)+a;if(30<o){var s=a-a%5;o=(n&(1<<s)-1).toString(32),n>>=s,a-=s,xt=1<<32-dt(t)+a|i<<a|n,It=o+e}else xt=1<<o|i<<a|n,It=e}function Do(e){e.return!==null&&(ni(e,1),_l(e,1,0))}function Oo(e){for(;e===na;)na=Ii[--Qi],Ii[Qi]=null,aa=Ii[--Qi],Ii[Qi]=null;for(;e===ii;)ii=at[--ot],at[ot]=null,It=at[--ot],at[ot]=null,xt=at[--ot],at[ot]=null}var $e=null,et=null,de=!1,pt=null;function bl(e,t){var i=ut(5,null,null,0);i.elementType="DELETED",i.stateNode=t,i.return=e,t=e.deletions,t===null?(e.deletions=[i],e.flags|=16):t.push(i)}function yl(e,t){switch(e.tag){case 5:var i=e.type;return t=t.nodeType!==1||i.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,$e=e,et=Et(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,$e=e,et=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(i=ii!==null?{id:xt,overflow:It}:null,e.memoizedState={dehydrated:t,treeContext:i,retryLane:1073741824},i=ut(18,null,null,0),i.stateNode=t,i.return=e,e.child=i,$e=e,et=null,!0):!1;default:return!1}}function zo(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Lo(e){if(de){var t=et;if(t){var i=t;if(!yl(e,t)){if(zo(e))throw Error(r(418));t=Et(i.nextSibling);var n=$e;t&&yl(e,t)?bl(n,i):(e.flags=e.flags&-4097|2,de=!1,$e=e)}}else{if(zo(e))throw Error(r(418));e.flags=e.flags&-4097|2,de=!1,$e=e}}}function ql(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;$e=e}function oa(e){if(e!==$e)return!1;if(!de)return ql(e),de=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!So(e.type,e.memoizedProps)),t&&(t=et)){if(zo(e))throw vl(),Error(r(418));for(;t;)bl(e,t),t=Et(t.nextSibling)}if(ql(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(r(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var i=e.data;if(i==="/$"){if(t===0){et=Et(e.nextSibling);break e}t--}else i!=="$"&&i!=="$!"&&i!=="$?"||t++}e=e.nextSibling}et=null}}else et=$e?Et(e.stateNode.nextSibling):null;return!0}function vl(){for(var e=et;e;)e=Et(e.nextSibling)}function Si(){et=$e=null,de=!1}function Eo(e){pt===null?pt=[e]:pt.push(e)}var Ad=ue.ReactCurrentBatchConfig;function pn(e,t,i){if(e=i.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(i._owner){if(i=i._owner,i){if(i.tag!==1)throw Error(r(309));var n=i.stateNode}if(!n)throw Error(r(147,e));var a=n,o=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===o?t.ref:(t=function(s){var u=a.refs;s===null?delete u[o]:u[o]=s},t._stringRef=o,t)}if(typeof e!="string")throw Error(r(284));if(!i._owner)throw Error(r(290,e))}return e}function sa(e,t){throw e=Object.prototype.toString.call(t),Error(r(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function kl(e){var t=e._init;return t(e._payload)}function wl(e){function t(h,m){if(e){var f=h.deletions;f===null?(h.deletions=[m],h.flags|=16):f.push(m)}}function i(h,m){if(!e)return null;for(;m!==null;)t(h,m),m=m.sibling;return null}function n(h,m){for(h=new Map;m!==null;)m.key!==null?h.set(m.key,m):h.set(m.index,m),m=m.sibling;return h}function a(h,m){return h=Jt(h,m),h.index=0,h.sibling=null,h}function o(h,m,f){return h.index=f,e?(f=h.alternate,f!==null?(f=f.index,f<m?(h.flags|=2,m):f):(h.flags|=2,m)):(h.flags|=1048576,m)}function s(h){return e&&h.alternate===null&&(h.flags|=2),h}function u(h,m,f,Q){return m===null||m.tag!==6?(m=Bs(f,h.mode,Q),m.return=h,m):(m=a(m,f),m.return=h,m)}function d(h,m,f,Q){var E=f.type;return E===ae?C(h,m,f.props.children,Q,f.key):m!==null&&(m.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===Re&&kl(E)===m.type)?(Q=a(m,f.props),Q.ref=pn(h,m,f),Q.return=h,Q):(Q=Ba(f.type,f.key,f.props,null,h.mode,Q),Q.ref=pn(h,m,f),Q.return=h,Q)}function g(h,m,f,Q){return m===null||m.tag!==4||m.stateNode.containerInfo!==f.containerInfo||m.stateNode.implementation!==f.implementation?(m=Ts(f,h.mode,Q),m.return=h,m):(m=a(m,f.children||[]),m.return=h,m)}function C(h,m,f,Q,E){return m===null||m.tag!==7?(m=di(f,h.mode,Q,E),m.return=h,m):(m=a(m,f),m.return=h,m)}function x(h,m,f){if(typeof m=="string"&&m!==""||typeof m=="number")return m=Bs(""+m,h.mode,f),m.return=h,m;if(typeof m=="object"&&m!==null){switch(m.$$typeof){case Je:return f=Ba(m.type,m.key,m.props,null,h.mode,f),f.ref=pn(h,null,m),f.return=h,f;case ke:return m=Ts(m,h.mode,f),m.return=h,m;case Re:var Q=m._init;return x(h,Q(m._payload),f)}if(Ni(m)||G(m))return m=di(m,h.mode,f,null),m.return=h,m;sa(h,m)}return null}function k(h,m,f,Q){var E=m!==null?m.key:null;if(typeof f=="string"&&f!==""||typeof f=="number")return E!==null?null:u(h,m,""+f,Q);if(typeof f=="object"&&f!==null){switch(f.$$typeof){case Je:return f.key===E?d(h,m,f,Q):null;case ke:return f.key===E?g(h,m,f,Q):null;case Re:return E=f._init,k(h,m,E(f._payload),Q)}if(Ni(f)||G(f))return E!==null?null:C(h,m,f,Q,null);sa(h,f)}return null}function P(h,m,f,Q,E){if(typeof Q=="string"&&Q!==""||typeof Q=="number")return h=h.get(f)||null,u(m,h,""+Q,E);if(typeof Q=="object"&&Q!==null){switch(Q.$$typeof){case Je:return h=h.get(Q.key===null?f:Q.key)||null,d(m,h,Q,E);case ke:return h=h.get(Q.key===null?f:Q.key)||null,g(m,h,Q,E);case Re:var F=Q._init;return P(h,m,f,F(Q._payload),E)}if(Ni(Q)||G(Q))return h=h.get(f)||null,C(m,h,Q,E,null);sa(m,Q)}return null}function z(h,m,f,Q){for(var E=null,F=null,N=m,V=m=0,Se=null;N!==null&&V<f.length;V++){N.index>V?(Se=N,N=null):Se=N.sibling;var te=k(h,N,f[V],Q);if(te===null){N===null&&(N=Se);break}e&&N&&te.alternate===null&&t(h,N),m=o(te,m,V),F===null?E=te:F.sibling=te,F=te,N=Se}if(V===f.length)return i(h,N),de&&ni(h,V),E;if(N===null){for(;V<f.length;V++)N=x(h,f[V],Q),N!==null&&(m=o(N,m,V),F===null?E=N:F.sibling=N,F=N);return de&&ni(h,V),E}for(N=n(h,N);V<f.length;V++)Se=P(N,h,V,f[V],Q),Se!==null&&(e&&Se.alternate!==null&&N.delete(Se.key===null?V:Se.key),m=o(Se,m,V),F===null?E=Se:F.sibling=Se,F=Se);return e&&N.forEach(function(Yt){return t(h,Yt)}),de&&ni(h,V),E}function L(h,m,f,Q){var E=G(f);if(typeof E!="function")throw Error(r(150));if(f=E.call(f),f==null)throw Error(r(151));for(var F=E=null,N=m,V=m=0,Se=null,te=f.next();N!==null&&!te.done;V++,te=f.next()){N.index>V?(Se=N,N=null):Se=N.sibling;var Yt=k(h,N,te.value,Q);if(Yt===null){N===null&&(N=Se);break}e&&N&&Yt.alternate===null&&t(h,N),m=o(Yt,m,V),F===null?E=Yt:F.sibling=Yt,F=Yt,N=Se}if(te.done)return i(h,N),de&&ni(h,V),E;if(N===null){for(;!te.done;V++,te=f.next())te=x(h,te.value,Q),te!==null&&(m=o(te,m,V),F===null?E=te:F.sibling=te,F=te);return de&&ni(h,V),E}for(N=n(h,N);!te.done;V++,te=f.next())te=P(N,h,V,te.value,Q),te!==null&&(e&&te.alternate!==null&&N.delete(te.key===null?V:te.key),m=o(te,m,V),F===null?E=te:F.sibling=te,F=te);return e&&N.forEach(function(mm){return t(h,mm)}),de&&ni(h,V),E}function ye(h,m,f,Q){if(typeof f=="object"&&f!==null&&f.type===ae&&f.key===null&&(f=f.props.children),typeof f=="object"&&f!==null){switch(f.$$typeof){case Je:e:{for(var E=f.key,F=m;F!==null;){if(F.key===E){if(E=f.type,E===ae){if(F.tag===7){i(h,F.sibling),m=a(F,f.props.children),m.return=h,h=m;break e}}else if(F.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===Re&&kl(E)===F.type){i(h,F.sibling),m=a(F,f.props),m.ref=pn(h,F,f),m.return=h,h=m;break e}i(h,F);break}else t(h,F);F=F.sibling}f.type===ae?(m=di(f.props.children,h.mode,Q,f.key),m.return=h,h=m):(Q=Ba(f.type,f.key,f.props,null,h.mode,Q),Q.ref=pn(h,m,f),Q.return=h,h=Q)}return s(h);case ke:e:{for(F=f.key;m!==null;){if(m.key===F)if(m.tag===4&&m.stateNode.containerInfo===f.containerInfo&&m.stateNode.implementation===f.implementation){i(h,m.sibling),m=a(m,f.children||[]),m.return=h,h=m;break e}else{i(h,m);break}else t(h,m);m=m.sibling}m=Ts(f,h.mode,Q),m.return=h,h=m}return s(h);case Re:return F=f._init,ye(h,m,F(f._payload),Q)}if(Ni(f))return z(h,m,f,Q);if(G(f))return L(h,m,f,Q);sa(h,f)}return typeof f=="string"&&f!==""||typeof f=="number"?(f=""+f,m!==null&&m.tag===6?(i(h,m.sibling),m=a(m,f),m.return=h,h=m):(i(h,m),m=Bs(f,h.mode,Q),m.return=h,h=m),s(h)):i(h,m)}return ye}var Bi=wl(!0),Cl=wl(!1),ra=Ft(null),la=null,Ti=null,Fo=null;function No(){Fo=Ti=la=null}function Go(e){var t=ra.current;le(ra),e._currentValue=t}function jo(e,t,i){for(;e!==null;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,n!==null&&(n.childLanes|=t)):n!==null&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===i)break;e=e.return}}function Ri(e,t){la=e,Fo=Ti=null,e=e.dependencies,e!==null&&e.firstContext!==null&&((e.lanes&t)!==0&&(We=!0),e.firstContext=null)}function st(e){var t=e._currentValue;if(Fo!==e)if(e={context:e,memoizedValue:t,next:null},Ti===null){if(la===null)throw Error(r(308));Ti=e,la.dependencies={lanes:0,firstContext:e}}else Ti=Ti.next=e;return t}var ai=null;function Vo(e){ai===null?ai=[e]:ai.push(e)}function Ml(e,t,i,n){var a=t.interleaved;return a===null?(i.next=i,Vo(t)):(i.next=a.next,a.next=i),t.interleaved=i,Qt(e,n)}function Qt(e,t){e.lanes|=t;var i=e.alternate;for(i!==null&&(i.lanes|=t),i=e,e=e.return;e!==null;)e.childLanes|=t,i=e.alternate,i!==null&&(i.childLanes|=t),i=e,e=e.return;return i.tag===3?i.stateNode:null}var jt=!1;function Uo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function xl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function St(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Vt(e,t,i){var n=e.updateQueue;if(n===null)return null;if(n=n.shared,(K&2)!==0){var a=n.pending;return a===null?t.next=t:(t.next=a.next,a.next=t),n.pending=t,Qt(e,i)}return a=n.interleaved,a===null?(t.next=t,Vo(n)):(t.next=a.next,a.next=t),n.interleaved=t,Qt(e,i)}function ua(e,t,i){if(t=t.updateQueue,t!==null&&(t=t.shared,(i&4194240)!==0)){var n=t.lanes;n&=e.pendingLanes,i|=n,t.lanes=i,ao(e,i)}}function Il(e,t){var i=e.updateQueue,n=e.alternate;if(n!==null&&(n=n.updateQueue,i===n)){var a=null,o=null;if(i=i.firstBaseUpdate,i!==null){do{var s={eventTime:i.eventTime,lane:i.lane,tag:i.tag,payload:i.payload,callback:i.callback,next:null};o===null?a=o=s:o=o.next=s,i=i.next}while(i!==null);o===null?a=o=t:o=o.next=t}else a=o=t;i={baseState:n.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:n.shared,effects:n.effects},e.updateQueue=i;return}e=i.lastBaseUpdate,e===null?i.firstBaseUpdate=t:e.next=t,i.lastBaseUpdate=t}function ca(e,t,i,n){var a=e.updateQueue;jt=!1;var o=a.firstBaseUpdate,s=a.lastBaseUpdate,u=a.shared.pending;if(u!==null){a.shared.pending=null;var d=u,g=d.next;d.next=null,s===null?o=g:s.next=g,s=d;var C=e.alternate;C!==null&&(C=C.updateQueue,u=C.lastBaseUpdate,u!==s&&(u===null?C.firstBaseUpdate=g:u.next=g,C.lastBaseUpdate=d))}if(o!==null){var x=a.baseState;s=0,C=g=d=null,u=o;do{var k=u.lane,P=u.eventTime;if((n&k)===k){C!==null&&(C=C.next={eventTime:P,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var z=e,L=u;switch(k=t,P=i,L.tag){case 1:if(z=L.payload,typeof z=="function"){x=z.call(P,x,k);break e}x=z;break e;case 3:z.flags=z.flags&-65537|128;case 0:if(z=L.payload,k=typeof z=="function"?z.call(P,x,k):z,k==null)break e;x=O({},x,k);break e;case 2:jt=!0}}u.callback!==null&&u.lane!==0&&(e.flags|=64,k=a.effects,k===null?a.effects=[u]:k.push(u))}else P={eventTime:P,lane:k,tag:u.tag,payload:u.payload,callback:u.callback,next:null},C===null?(g=C=P,d=x):C=C.next=P,s|=k;if(u=u.next,u===null){if(u=a.shared.pending,u===null)break;k=u,u=k.next,k.next=null,a.lastBaseUpdate=k,a.shared.pending=null}}while(!0);if(C===null&&(d=x),a.baseState=d,a.firstBaseUpdate=g,a.lastBaseUpdate=C,t=a.shared.interleaved,t!==null){a=t;do s|=a.lane,a=a.next;while(a!==t)}else o===null&&(a.shared.lanes=0);ri|=s,e.lanes=s,e.memoizedState=x}}function Ql(e,t,i){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var n=e[t],a=n.callback;if(a!==null){if(n.callback=null,n=i,typeof a!="function")throw Error(r(191,a));a.call(n)}}}var hn={},qt=Ft(hn),fn=Ft(hn),gn=Ft(hn);function oi(e){if(e===hn)throw Error(r(174));return e}function Wo(e,t){switch(se(gn,t),se(fn,e),se(qt,hn),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Wa(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Wa(t,e)}le(qt),se(qt,t)}function Ai(){le(qt),le(fn),le(gn)}function Sl(e){oi(gn.current);var t=oi(qt.current),i=Wa(t,e.type);t!==i&&(se(fn,e),se(qt,i))}function Ho(e){fn.current===e&&(le(qt),le(fn))}var pe=Ft(0);function da(e){for(var t=e;t!==null;){if(t.tag===13){var i=t.memoizedState;if(i!==null&&(i=i.dehydrated,i===null||i.data==="$?"||i.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Zo=[];function Xo(){for(var e=0;e<Zo.length;e++)Zo[e]._workInProgressVersionPrimary=null;Zo.length=0}var ma=ue.ReactCurrentDispatcher,Jo=ue.ReactCurrentBatchConfig,si=0,he=null,we=null,Ie=null,pa=!1,_n=!1,bn=0,Pd=0;function Oe(){throw Error(r(321))}function Yo(e,t){if(t===null)return!1;for(var i=0;i<t.length&&i<e.length;i++)if(!mt(e[i],t[i]))return!1;return!0}function Ko(e,t,i,n,a,o){if(si=o,he=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ma.current=e===null||e.memoizedState===null?Ld:Ed,e=i(n,a),_n){o=0;do{if(_n=!1,bn=0,25<=o)throw Error(r(301));o+=1,Ie=we=null,t.updateQueue=null,ma.current=Fd,e=i(n,a)}while(_n)}if(ma.current=ga,t=we!==null&&we.next!==null,si=0,Ie=we=he=null,pa=!1,t)throw Error(r(300));return e}function $o(){var e=bn!==0;return bn=0,e}function vt(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Ie===null?he.memoizedState=Ie=e:Ie=Ie.next=e,Ie}function rt(){if(we===null){var e=he.alternate;e=e!==null?e.memoizedState:null}else e=we.next;var t=Ie===null?he.memoizedState:Ie.next;if(t!==null)Ie=t,we=e;else{if(e===null)throw Error(r(310));we=e,e={memoizedState:we.memoizedState,baseState:we.baseState,baseQueue:we.baseQueue,queue:we.queue,next:null},Ie===null?he.memoizedState=Ie=e:Ie=Ie.next=e}return Ie}function yn(e,t){return typeof t=="function"?t(e):t}function es(e){var t=rt(),i=t.queue;if(i===null)throw Error(r(311));i.lastRenderedReducer=e;var n=we,a=n.baseQueue,o=i.pending;if(o!==null){if(a!==null){var s=a.next;a.next=o.next,o.next=s}n.baseQueue=a=o,i.pending=null}if(a!==null){o=a.next,n=n.baseState;var u=s=null,d=null,g=o;do{var C=g.lane;if((si&C)===C)d!==null&&(d=d.next={lane:0,action:g.action,hasEagerState:g.hasEagerState,eagerState:g.eagerState,next:null}),n=g.hasEagerState?g.eagerState:e(n,g.action);else{var x={lane:C,action:g.action,hasEagerState:g.hasEagerState,eagerState:g.eagerState,next:null};d===null?(u=d=x,s=n):d=d.next=x,he.lanes|=C,ri|=C}g=g.next}while(g!==null&&g!==o);d===null?s=n:d.next=u,mt(n,t.memoizedState)||(We=!0),t.memoizedState=n,t.baseState=s,t.baseQueue=d,i.lastRenderedState=n}if(e=i.interleaved,e!==null){a=e;do o=a.lane,he.lanes|=o,ri|=o,a=a.next;while(a!==e)}else a===null&&(i.lanes=0);return[t.memoizedState,i.dispatch]}function ts(e){var t=rt(),i=t.queue;if(i===null)throw Error(r(311));i.lastRenderedReducer=e;var n=i.dispatch,a=i.pending,o=t.memoizedState;if(a!==null){i.pending=null;var s=a=a.next;do o=e(o,s.action),s=s.next;while(s!==a);mt(o,t.memoizedState)||(We=!0),t.memoizedState=o,t.baseQueue===null&&(t.baseState=o),i.lastRenderedState=o}return[o,n]}function Bl(){}function Tl(e,t){var i=he,n=rt(),a=t(),o=!mt(n.memoizedState,a);if(o&&(n.memoizedState=a,We=!0),n=n.queue,is(Pl.bind(null,i,n,e),[e]),n.getSnapshot!==t||o||Ie!==null&&Ie.memoizedState.tag&1){if(i.flags|=2048,qn(9,Al.bind(null,i,n,a,t),void 0,null),Qe===null)throw Error(r(349));(si&30)!==0||Rl(i,t,a)}return a}function Rl(e,t,i){e.flags|=16384,e={getSnapshot:t,value:i},t=he.updateQueue,t===null?(t={lastEffect:null,stores:null},he.updateQueue=t,t.stores=[e]):(i=t.stores,i===null?t.stores=[e]:i.push(e))}function Al(e,t,i,n){t.value=i,t.getSnapshot=n,Dl(t)&&Ol(e)}function Pl(e,t,i){return i(function(){Dl(t)&&Ol(e)})}function Dl(e){var t=e.getSnapshot;e=e.value;try{var i=t();return!mt(e,i)}catch{return!0}}function Ol(e){var t=Qt(e,1);t!==null&&_t(t,e,1,-1)}function zl(e){var t=vt();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:yn,lastRenderedState:e},t.queue=e,e=e.dispatch=zd.bind(null,he,e),[t.memoizedState,e]}function qn(e,t,i,n){return e={tag:e,create:t,destroy:i,deps:n,next:null},t=he.updateQueue,t===null?(t={lastEffect:null,stores:null},he.updateQueue=t,t.lastEffect=e.next=e):(i=t.lastEffect,i===null?t.lastEffect=e.next=e:(n=i.next,i.next=e,e.next=n,t.lastEffect=e)),e}function Ll(){return rt().memoizedState}function ha(e,t,i,n){var a=vt();he.flags|=e,a.memoizedState=qn(1|t,i,void 0,n===void 0?null:n)}function fa(e,t,i,n){var a=rt();n=n===void 0?null:n;var o=void 0;if(we!==null){var s=we.memoizedState;if(o=s.destroy,n!==null&&Yo(n,s.deps)){a.memoizedState=qn(t,i,o,n);return}}he.flags|=e,a.memoizedState=qn(1|t,i,o,n)}function El(e,t){return ha(8390656,8,e,t)}function is(e,t){return fa(2048,8,e,t)}function Fl(e,t){return fa(4,2,e,t)}function Nl(e,t){return fa(4,4,e,t)}function Gl(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function jl(e,t,i){return i=i!=null?i.concat([e]):null,fa(4,4,Gl.bind(null,t,e),i)}function ns(){}function Vl(e,t){var i=rt();t=t===void 0?null:t;var n=i.memoizedState;return n!==null&&t!==null&&Yo(t,n[1])?n[0]:(i.memoizedState=[e,t],e)}function Ul(e,t){var i=rt();t=t===void 0?null:t;var n=i.memoizedState;return n!==null&&t!==null&&Yo(t,n[1])?n[0]:(e=e(),i.memoizedState=[e,t],e)}function Wl(e,t,i){return(si&21)===0?(e.baseState&&(e.baseState=!1,We=!0),e.memoizedState=i):(mt(i,t)||(i=kr(),he.lanes|=i,ri|=i,e.baseState=!0),t)}function Dd(e,t){var i=ne;ne=i!==0&&4>i?i:4,e(!0);var n=Jo.transition;Jo.transition={};try{e(!1),t()}finally{ne=i,Jo.transition=n}}function Hl(){return rt().memoizedState}function Od(e,t,i){var n=Zt(e);if(i={lane:n,action:i,hasEagerState:!1,eagerState:null,next:null},Zl(e))Xl(t,i);else if(i=Ml(e,t,i,n),i!==null){var a=Ne();_t(i,e,n,a),Jl(i,t,n)}}function zd(e,t,i){var n=Zt(e),a={lane:n,action:i,hasEagerState:!1,eagerState:null,next:null};if(Zl(e))Xl(t,a);else{var o=e.alternate;if(e.lanes===0&&(o===null||o.lanes===0)&&(o=t.lastRenderedReducer,o!==null))try{var s=t.lastRenderedState,u=o(s,i);if(a.hasEagerState=!0,a.eagerState=u,mt(u,s)){var d=t.interleaved;d===null?(a.next=a,Vo(t)):(a.next=d.next,d.next=a),t.interleaved=a;return}}catch{}finally{}i=Ml(e,t,a,n),i!==null&&(a=Ne(),_t(i,e,n,a),Jl(i,t,n))}}function Zl(e){var t=e.alternate;return e===he||t!==null&&t===he}function Xl(e,t){_n=pa=!0;var i=e.pending;i===null?t.next=t:(t.next=i.next,i.next=t),e.pending=t}function Jl(e,t,i){if((i&4194240)!==0){var n=t.lanes;n&=e.pendingLanes,i|=n,t.lanes=i,ao(e,i)}}var ga={readContext:st,useCallback:Oe,useContext:Oe,useEffect:Oe,useImperativeHandle:Oe,useInsertionEffect:Oe,useLayoutEffect:Oe,useMemo:Oe,useReducer:Oe,useRef:Oe,useState:Oe,useDebugValue:Oe,useDeferredValue:Oe,useTransition:Oe,useMutableSource:Oe,useSyncExternalStore:Oe,useId:Oe,unstable_isNewReconciler:!1},Ld={readContext:st,useCallback:function(e,t){return vt().memoizedState=[e,t===void 0?null:t],e},useContext:st,useEffect:El,useImperativeHandle:function(e,t,i){return i=i!=null?i.concat([e]):null,ha(4194308,4,Gl.bind(null,t,e),i)},useLayoutEffect:function(e,t){return ha(4194308,4,e,t)},useInsertionEffect:function(e,t){return ha(4,2,e,t)},useMemo:function(e,t){var i=vt();return t=t===void 0?null:t,e=e(),i.memoizedState=[e,t],e},useReducer:function(e,t,i){var n=vt();return t=i!==void 0?i(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=Od.bind(null,he,e),[n.memoizedState,e]},useRef:function(e){var t=vt();return e={current:e},t.memoizedState=e},useState:zl,useDebugValue:ns,useDeferredValue:function(e){return vt().memoizedState=e},useTransition:function(){var e=zl(!1),t=e[0];return e=Dd.bind(null,e[1]),vt().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,i){var n=he,a=vt();if(de){if(i===void 0)throw Error(r(407));i=i()}else{if(i=t(),Qe===null)throw Error(r(349));(si&30)!==0||Rl(n,t,i)}a.memoizedState=i;var o={value:i,getSnapshot:t};return a.queue=o,El(Pl.bind(null,n,o,e),[e]),n.flags|=2048,qn(9,Al.bind(null,n,o,i,t),void 0,null),i},useId:function(){var e=vt(),t=Qe.identifierPrefix;if(de){var i=It,n=xt;i=(n&~(1<<32-dt(n)-1)).toString(32)+i,t=":"+t+"R"+i,i=bn++,0<i&&(t+="H"+i.toString(32)),t+=":"}else i=Pd++,t=":"+t+"r"+i.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Ed={readContext:st,useCallback:Vl,useContext:st,useEffect:is,useImperativeHandle:jl,useInsertionEffect:Fl,useLayoutEffect:Nl,useMemo:Ul,useReducer:es,useRef:Ll,useState:function(){return es(yn)},useDebugValue:ns,useDeferredValue:function(e){var t=rt();return Wl(t,we.memoizedState,e)},useTransition:function(){var e=es(yn)[0],t=rt().memoizedState;return[e,t]},useMutableSource:Bl,useSyncExternalStore:Tl,useId:Hl,unstable_isNewReconciler:!1},Fd={readContext:st,useCallback:Vl,useContext:st,useEffect:is,useImperativeHandle:jl,useInsertionEffect:Fl,useLayoutEffect:Nl,useMemo:Ul,useReducer:ts,useRef:Ll,useState:function(){return ts(yn)},useDebugValue:ns,useDeferredValue:function(e){var t=rt();return we===null?t.memoizedState=e:Wl(t,we.memoizedState,e)},useTransition:function(){var e=ts(yn)[0],t=rt().memoizedState;return[e,t]},useMutableSource:Bl,useSyncExternalStore:Tl,useId:Hl,unstable_isNewReconciler:!1};function ht(e,t){if(e&&e.defaultProps){t=O({},t),e=e.defaultProps;for(var i in e)t[i]===void 0&&(t[i]=e[i]);return t}return t}function as(e,t,i,n){t=e.memoizedState,i=i(n,t),i=i==null?t:O({},t,i),e.memoizedState=i,e.lanes===0&&(e.updateQueue.baseState=i)}var _a={isMounted:function(e){return(e=e._reactInternals)?$t(e)===e:!1},enqueueSetState:function(e,t,i){e=e._reactInternals;var n=Ne(),a=Zt(e),o=St(n,a);o.payload=t,i!=null&&(o.callback=i),t=Vt(e,o,a),t!==null&&(_t(t,e,a,n),ua(t,e,a))},enqueueReplaceState:function(e,t,i){e=e._reactInternals;var n=Ne(),a=Zt(e),o=St(n,a);o.tag=1,o.payload=t,i!=null&&(o.callback=i),t=Vt(e,o,a),t!==null&&(_t(t,e,a,n),ua(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var i=Ne(),n=Zt(e),a=St(i,n);a.tag=2,t!=null&&(a.callback=t),t=Vt(e,a,n),t!==null&&(_t(t,e,n,i),ua(t,e,n))}};function Yl(e,t,i,n,a,o,s){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(n,o,s):t.prototype&&t.prototype.isPureReactComponent?!sn(i,n)||!sn(a,o):!0}function Kl(e,t,i){var n=!1,a=Nt,o=t.contextType;return typeof o=="object"&&o!==null?o=st(o):(a=Ue(t)?ti:De.current,n=t.contextTypes,o=(n=n!=null)?xi(e,a):Nt),t=new t(i,o),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=_a,e.stateNode=t,t._reactInternals=e,n&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function $l(e,t,i,n){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(i,n),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(i,n),t.state!==e&&_a.enqueueReplaceState(t,t.state,null)}function os(e,t,i,n){var a=e.stateNode;a.props=i,a.state=e.memoizedState,a.refs={},Uo(e);var o=t.contextType;typeof o=="object"&&o!==null?a.context=st(o):(o=Ue(t)?ti:De.current,a.context=xi(e,o)),a.state=e.memoizedState,o=t.getDerivedStateFromProps,typeof o=="function"&&(as(e,t,o,i),a.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof a.getSnapshotBeforeUpdate=="function"||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(t=a.state,typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount(),t!==a.state&&_a.enqueueReplaceState(a,a.state,null),ca(e,i,a,n),a.state=e.memoizedState),typeof a.componentDidMount=="function"&&(e.flags|=4194308)}function Pi(e,t){try{var i="",n=t;do i+=$(n),n=n.return;while(n);var a=i}catch(o){a=`
Error generating stack: `+o.message+`
`+o.stack}return{value:e,source:t,stack:a,digest:null}}function ss(e,t,i){return{value:e,source:null,stack:i??null,digest:t??null}}function rs(e,t){try{console.error(t.value)}catch(i){setTimeout(function(){throw i})}}var Nd=typeof WeakMap=="function"?WeakMap:Map;function eu(e,t,i){i=St(-1,i),i.tag=3,i.payload={element:null};var n=t.value;return i.callback=function(){Ca||(Ca=!0,ks=n),rs(e,t)},i}function tu(e,t,i){i=St(-1,i),i.tag=3;var n=e.type.getDerivedStateFromError;if(typeof n=="function"){var a=t.value;i.payload=function(){return n(a)},i.callback=function(){rs(e,t)}}var o=e.stateNode;return o!==null&&typeof o.componentDidCatch=="function"&&(i.callback=function(){rs(e,t),typeof n!="function"&&(Wt===null?Wt=new Set([this]):Wt.add(this));var s=t.stack;this.componentDidCatch(t.value,{componentStack:s!==null?s:""})}),i}function iu(e,t,i){var n=e.pingCache;if(n===null){n=e.pingCache=new Nd;var a=new Set;n.set(t,a)}else a=n.get(t),a===void 0&&(a=new Set,n.set(t,a));a.has(i)||(a.add(i),e=tm.bind(null,e,t,i),t.then(e,e))}function nu(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function au(e,t,i,n,a){return(e.mode&1)===0?(e===t?e.flags|=65536:(e.flags|=128,i.flags|=131072,i.flags&=-52805,i.tag===1&&(i.alternate===null?i.tag=17:(t=St(-1,1),t.tag=2,Vt(i,t,1))),i.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var Gd=ue.ReactCurrentOwner,We=!1;function Fe(e,t,i,n){t.child=e===null?Cl(t,null,i,n):Bi(t,e.child,i,n)}function ou(e,t,i,n,a){i=i.render;var o=t.ref;return Ri(t,a),n=Ko(e,t,i,n,o,a),i=$o(),e!==null&&!We?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Bt(e,t,a)):(de&&i&&Do(t),t.flags|=1,Fe(e,t,n,a),t.child)}function su(e,t,i,n,a){if(e===null){var o=i.type;return typeof o=="function"&&!Ss(o)&&o.defaultProps===void 0&&i.compare===null&&i.defaultProps===void 0?(t.tag=15,t.type=o,ru(e,t,o,n,a)):(e=Ba(i.type,null,n,t,t.mode,a),e.ref=t.ref,e.return=t,t.child=e)}if(o=e.child,(e.lanes&a)===0){var s=o.memoizedProps;if(i=i.compare,i=i!==null?i:sn,i(s,n)&&e.ref===t.ref)return Bt(e,t,a)}return t.flags|=1,e=Jt(o,n),e.ref=t.ref,e.return=t,t.child=e}function ru(e,t,i,n,a){if(e!==null){var o=e.memoizedProps;if(sn(o,n)&&e.ref===t.ref)if(We=!1,t.pendingProps=n=o,(e.lanes&a)!==0)(e.flags&131072)!==0&&(We=!0);else return t.lanes=e.lanes,Bt(e,t,a)}return ls(e,t,i,n,a)}function lu(e,t,i){var n=t.pendingProps,a=n.children,o=e!==null?e.memoizedState:null;if(n.mode==="hidden")if((t.mode&1)===0)t.memoizedState={baseLanes:0,cachePool:null,transitions:null},se(Oi,tt),tt|=i;else{if((i&1073741824)===0)return e=o!==null?o.baseLanes|i:i,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,se(Oi,tt),tt|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=o!==null?o.baseLanes:i,se(Oi,tt),tt|=n}else o!==null?(n=o.baseLanes|i,t.memoizedState=null):n=i,se(Oi,tt),tt|=n;return Fe(e,t,a,i),t.child}function uu(e,t){var i=t.ref;(e===null&&i!==null||e!==null&&e.ref!==i)&&(t.flags|=512,t.flags|=2097152)}function ls(e,t,i,n,a){var o=Ue(i)?ti:De.current;return o=xi(t,o),Ri(t,a),i=Ko(e,t,i,n,o,a),n=$o(),e!==null&&!We?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Bt(e,t,a)):(de&&n&&Do(t),t.flags|=1,Fe(e,t,i,a),t.child)}function cu(e,t,i,n,a){if(Ue(i)){var o=!0;ta(t)}else o=!1;if(Ri(t,a),t.stateNode===null)ya(e,t),Kl(t,i,n),os(t,i,n,a),n=!0;else if(e===null){var s=t.stateNode,u=t.memoizedProps;s.props=u;var d=s.context,g=i.contextType;typeof g=="object"&&g!==null?g=st(g):(g=Ue(i)?ti:De.current,g=xi(t,g));var C=i.getDerivedStateFromProps,x=typeof C=="function"||typeof s.getSnapshotBeforeUpdate=="function";x||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(u!==n||d!==g)&&$l(t,s,n,g),jt=!1;var k=t.memoizedState;s.state=k,ca(t,n,s,a),d=t.memoizedState,u!==n||k!==d||Ve.current||jt?(typeof C=="function"&&(as(t,i,C,n),d=t.memoizedState),(u=jt||Yl(t,i,u,n,k,d,g))?(x||typeof s.UNSAFE_componentWillMount!="function"&&typeof s.componentWillMount!="function"||(typeof s.componentWillMount=="function"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount=="function"&&s.UNSAFE_componentWillMount()),typeof s.componentDidMount=="function"&&(t.flags|=4194308)):(typeof s.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=d),s.props=n,s.state=d,s.context=g,n=u):(typeof s.componentDidMount=="function"&&(t.flags|=4194308),n=!1)}else{s=t.stateNode,xl(e,t),u=t.memoizedProps,g=t.type===t.elementType?u:ht(t.type,u),s.props=g,x=t.pendingProps,k=s.context,d=i.contextType,typeof d=="object"&&d!==null?d=st(d):(d=Ue(i)?ti:De.current,d=xi(t,d));var P=i.getDerivedStateFromProps;(C=typeof P=="function"||typeof s.getSnapshotBeforeUpdate=="function")||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(u!==x||k!==d)&&$l(t,s,n,d),jt=!1,k=t.memoizedState,s.state=k,ca(t,n,s,a);var z=t.memoizedState;u!==x||k!==z||Ve.current||jt?(typeof P=="function"&&(as(t,i,P,n),z=t.memoizedState),(g=jt||Yl(t,i,g,n,k,z,d)||!1)?(C||typeof s.UNSAFE_componentWillUpdate!="function"&&typeof s.componentWillUpdate!="function"||(typeof s.componentWillUpdate=="function"&&s.componentWillUpdate(n,z,d),typeof s.UNSAFE_componentWillUpdate=="function"&&s.UNSAFE_componentWillUpdate(n,z,d)),typeof s.componentDidUpdate=="function"&&(t.flags|=4),typeof s.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof s.componentDidUpdate!="function"||u===e.memoizedProps&&k===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||u===e.memoizedProps&&k===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=z),s.props=n,s.state=z,s.context=d,n=g):(typeof s.componentDidUpdate!="function"||u===e.memoizedProps&&k===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||u===e.memoizedProps&&k===e.memoizedState||(t.flags|=1024),n=!1)}return us(e,t,i,n,o,a)}function us(e,t,i,n,a,o){uu(e,t);var s=(t.flags&128)!==0;if(!n&&!s)return a&&fl(t,i,!1),Bt(e,t,o);n=t.stateNode,Gd.current=t;var u=s&&typeof i.getDerivedStateFromError!="function"?null:n.render();return t.flags|=1,e!==null&&s?(t.child=Bi(t,e.child,null,o),t.child=Bi(t,null,u,o)):Fe(e,t,u,o),t.memoizedState=n.state,a&&fl(t,i,!0),t.child}function du(e){var t=e.stateNode;t.pendingContext?pl(e,t.pendingContext,t.pendingContext!==t.context):t.context&&pl(e,t.context,!1),Wo(e,t.containerInfo)}function mu(e,t,i,n,a){return Si(),Eo(a),t.flags|=256,Fe(e,t,i,n),t.child}var cs={dehydrated:null,treeContext:null,retryLane:0};function ds(e){return{baseLanes:e,cachePool:null,transitions:null}}function pu(e,t,i){var n=t.pendingProps,a=pe.current,o=!1,s=(t.flags&128)!==0,u;if((u=s)||(u=e!==null&&e.memoizedState===null?!1:(a&2)!==0),u?(o=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(a|=1),se(pe,a&1),e===null)return Lo(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?((t.mode&1)===0?t.lanes=1:e.data==="$!"?t.lanes=8:t.lanes=1073741824,null):(s=n.children,e=n.fallback,o?(n=t.mode,o=t.child,s={mode:"hidden",children:s},(n&1)===0&&o!==null?(o.childLanes=0,o.pendingProps=s):o=Ta(s,n,0,null),e=di(e,n,i,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=ds(i),t.memoizedState=cs,e):ms(t,s));if(a=e.memoizedState,a!==null&&(u=a.dehydrated,u!==null))return jd(e,t,s,n,u,a,i);if(o){o=n.fallback,s=t.mode,a=e.child,u=a.sibling;var d={mode:"hidden",children:n.children};return(s&1)===0&&t.child!==a?(n=t.child,n.childLanes=0,n.pendingProps=d,t.deletions=null):(n=Jt(a,d),n.subtreeFlags=a.subtreeFlags&14680064),u!==null?o=Jt(u,o):(o=di(o,s,i,null),o.flags|=2),o.return=t,n.return=t,n.sibling=o,t.child=n,n=o,o=t.child,s=e.child.memoizedState,s=s===null?ds(i):{baseLanes:s.baseLanes|i,cachePool:null,transitions:s.transitions},o.memoizedState=s,o.childLanes=e.childLanes&~i,t.memoizedState=cs,n}return o=e.child,e=o.sibling,n=Jt(o,{mode:"visible",children:n.children}),(t.mode&1)===0&&(n.lanes=i),n.return=t,n.sibling=null,e!==null&&(i=t.deletions,i===null?(t.deletions=[e],t.flags|=16):i.push(e)),t.child=n,t.memoizedState=null,n}function ms(e,t){return t=Ta({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function ba(e,t,i,n){return n!==null&&Eo(n),Bi(t,e.child,null,i),e=ms(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function jd(e,t,i,n,a,o,s){if(i)return t.flags&256?(t.flags&=-257,n=ss(Error(r(422))),ba(e,t,s,n)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(o=n.fallback,a=t.mode,n=Ta({mode:"visible",children:n.children},a,0,null),o=di(o,a,s,null),o.flags|=2,n.return=t,o.return=t,n.sibling=o,t.child=n,(t.mode&1)!==0&&Bi(t,e.child,null,s),t.child.memoizedState=ds(s),t.memoizedState=cs,o);if((t.mode&1)===0)return ba(e,t,s,null);if(a.data==="$!"){if(n=a.nextSibling&&a.nextSibling.dataset,n)var u=n.dgst;return n=u,o=Error(r(419)),n=ss(o,n,void 0),ba(e,t,s,n)}if(u=(s&e.childLanes)!==0,We||u){if(n=Qe,n!==null){switch(s&-s){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}a=(a&(n.suspendedLanes|s))!==0?0:a,a!==0&&a!==o.retryLane&&(o.retryLane=a,Qt(e,a),_t(n,e,a,-1))}return Qs(),n=ss(Error(r(421))),ba(e,t,s,n)}return a.data==="$?"?(t.flags|=128,t.child=e.child,t=im.bind(null,e),a._reactRetry=t,null):(e=o.treeContext,et=Et(a.nextSibling),$e=t,de=!0,pt=null,e!==null&&(at[ot++]=xt,at[ot++]=It,at[ot++]=ii,xt=e.id,It=e.overflow,ii=t),t=ms(t,n.children),t.flags|=4096,t)}function hu(e,t,i){e.lanes|=t;var n=e.alternate;n!==null&&(n.lanes|=t),jo(e.return,t,i)}function ps(e,t,i,n,a){var o=e.memoizedState;o===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:i,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=n,o.tail=i,o.tailMode=a)}function fu(e,t,i){var n=t.pendingProps,a=n.revealOrder,o=n.tail;if(Fe(e,t,n.children,i),n=pe.current,(n&2)!==0)n=n&1|2,t.flags|=128;else{if(e!==null&&(e.flags&128)!==0)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&hu(e,i,t);else if(e.tag===19)hu(e,i,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(se(pe,n),(t.mode&1)===0)t.memoizedState=null;else switch(a){case"forwards":for(i=t.child,a=null;i!==null;)e=i.alternate,e!==null&&da(e)===null&&(a=i),i=i.sibling;i=a,i===null?(a=t.child,t.child=null):(a=i.sibling,i.sibling=null),ps(t,!1,a,i,o);break;case"backwards":for(i=null,a=t.child,t.child=null;a!==null;){if(e=a.alternate,e!==null&&da(e)===null){t.child=a;break}e=a.sibling,a.sibling=i,i=a,a=e}ps(t,!0,i,null,o);break;case"together":ps(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ya(e,t){(t.mode&1)===0&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Bt(e,t,i){if(e!==null&&(t.dependencies=e.dependencies),ri|=t.lanes,(i&t.childLanes)===0)return null;if(e!==null&&t.child!==e.child)throw Error(r(153));if(t.child!==null){for(e=t.child,i=Jt(e,e.pendingProps),t.child=i,i.return=t;e.sibling!==null;)e=e.sibling,i=i.sibling=Jt(e,e.pendingProps),i.return=t;i.sibling=null}return t.child}function Vd(e,t,i){switch(t.tag){case 3:du(t),Si();break;case 5:Sl(t);break;case 1:Ue(t.type)&&ta(t);break;case 4:Wo(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,a=t.memoizedProps.value;se(ra,n._currentValue),n._currentValue=a;break;case 13:if(n=t.memoizedState,n!==null)return n.dehydrated!==null?(se(pe,pe.current&1),t.flags|=128,null):(i&t.child.childLanes)!==0?pu(e,t,i):(se(pe,pe.current&1),e=Bt(e,t,i),e!==null?e.sibling:null);se(pe,pe.current&1);break;case 19:if(n=(i&t.childLanes)!==0,(e.flags&128)!==0){if(n)return fu(e,t,i);t.flags|=128}if(a=t.memoizedState,a!==null&&(a.rendering=null,a.tail=null,a.lastEffect=null),se(pe,pe.current),n)break;return null;case 22:case 23:return t.lanes=0,lu(e,t,i)}return Bt(e,t,i)}var gu,hs,_u,bu;gu=function(e,t){for(var i=t.child;i!==null;){if(i.tag===5||i.tag===6)e.appendChild(i.stateNode);else if(i.tag!==4&&i.child!==null){i.child.return=i,i=i.child;continue}if(i===t)break;for(;i.sibling===null;){if(i.return===null||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},hs=function(){},_u=function(e,t,i,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,oi(qt.current);var o=null;switch(i){case"input":a=Ga(e,a),n=Ga(e,n),o=[];break;case"select":a=O({},a,{value:void 0}),n=O({},n,{value:void 0}),o=[];break;case"textarea":a=Ua(e,a),n=Ua(e,n),o=[];break;default:typeof a.onClick!="function"&&typeof n.onClick=="function"&&(e.onclick=Kn)}Ha(i,n);var s;i=null;for(g in a)if(!n.hasOwnProperty(g)&&a.hasOwnProperty(g)&&a[g]!=null)if(g==="style"){var u=a[g];for(s in u)u.hasOwnProperty(s)&&(i||(i={}),i[s]="")}else g!=="dangerouslySetInnerHTML"&&g!=="children"&&g!=="suppressContentEditableWarning"&&g!=="suppressHydrationWarning"&&g!=="autoFocus"&&(_.hasOwnProperty(g)?o||(o=[]):(o=o||[]).push(g,null));for(g in n){var d=n[g];if(u=a!=null?a[g]:void 0,n.hasOwnProperty(g)&&d!==u&&(d!=null||u!=null))if(g==="style")if(u){for(s in u)!u.hasOwnProperty(s)||d&&d.hasOwnProperty(s)||(i||(i={}),i[s]="");for(s in d)d.hasOwnProperty(s)&&u[s]!==d[s]&&(i||(i={}),i[s]=d[s])}else i||(o||(o=[]),o.push(g,i)),i=d;else g==="dangerouslySetInnerHTML"?(d=d?d.__html:void 0,u=u?u.__html:void 0,d!=null&&u!==d&&(o=o||[]).push(g,d)):g==="children"?typeof d!="string"&&typeof d!="number"||(o=o||[]).push(g,""+d):g!=="suppressContentEditableWarning"&&g!=="suppressHydrationWarning"&&(_.hasOwnProperty(g)?(d!=null&&g==="onScroll"&&re("scroll",e),o||u===d||(o=[])):(o=o||[]).push(g,d))}i&&(o=o||[]).push("style",i);var g=o;(t.updateQueue=g)&&(t.flags|=4)}},bu=function(e,t,i,n){i!==n&&(t.flags|=4)};function vn(e,t){if(!de)switch(e.tailMode){case"hidden":t=e.tail;for(var i=null;t!==null;)t.alternate!==null&&(i=t),t=t.sibling;i===null?e.tail=null:i.sibling=null;break;case"collapsed":i=e.tail;for(var n=null;i!==null;)i.alternate!==null&&(n=i),i=i.sibling;n===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:n.sibling=null}}function ze(e){var t=e.alternate!==null&&e.alternate.child===e.child,i=0,n=0;if(t)for(var a=e.child;a!==null;)i|=a.lanes|a.childLanes,n|=a.subtreeFlags&14680064,n|=a.flags&14680064,a.return=e,a=a.sibling;else for(a=e.child;a!==null;)i|=a.lanes|a.childLanes,n|=a.subtreeFlags,n|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=n,e.childLanes=i,t}function Ud(e,t,i){var n=t.pendingProps;switch(Oo(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ze(t),null;case 1:return Ue(t.type)&&ea(),ze(t),null;case 3:return n=t.stateNode,Ai(),le(Ve),le(De),Xo(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),(e===null||e.child===null)&&(oa(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,pt!==null&&(Ms(pt),pt=null))),hs(e,t),ze(t),null;case 5:Ho(t);var a=oi(gn.current);if(i=t.type,e!==null&&t.stateNode!=null)_u(e,t,i,n,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(t.stateNode===null)throw Error(r(166));return ze(t),null}if(e=oi(qt.current),oa(t)){n=t.stateNode,i=t.type;var o=t.memoizedProps;switch(n[yt]=t,n[dn]=o,e=(t.mode&1)!==0,i){case"dialog":re("cancel",n),re("close",n);break;case"iframe":case"object":case"embed":re("load",n);break;case"video":case"audio":for(a=0;a<ln.length;a++)re(ln[a],n);break;case"source":re("error",n);break;case"img":case"image":case"link":re("error",n),re("load",n);break;case"details":re("toggle",n);break;case"input":Ks(n,o),re("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!o.multiple},re("invalid",n);break;case"textarea":tr(n,o),re("invalid",n)}Ha(i,o),a=null;for(var s in o)if(o.hasOwnProperty(s)){var u=o[s];s==="children"?typeof u=="string"?n.textContent!==u&&(o.suppressHydrationWarning!==!0&&Yn(n.textContent,u,e),a=["children",u]):typeof u=="number"&&n.textContent!==""+u&&(o.suppressHydrationWarning!==!0&&Yn(n.textContent,u,e),a=["children",""+u]):_.hasOwnProperty(s)&&u!=null&&s==="onScroll"&&re("scroll",n)}switch(i){case"input":Qn(n),er(n,o,!0);break;case"textarea":Qn(n),nr(n);break;case"select":case"option":break;default:typeof o.onClick=="function"&&(n.onclick=Kn)}n=a,t.updateQueue=n,n!==null&&(t.flags|=4)}else{s=a.nodeType===9?a:a.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=ar(i)),e==="http://www.w3.org/1999/xhtml"?i==="script"?(e=s.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof n.is=="string"?e=s.createElement(i,{is:n.is}):(e=s.createElement(i),i==="select"&&(s=e,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):e=s.createElementNS(e,i),e[yt]=t,e[dn]=n,gu(e,t,!1,!1),t.stateNode=e;e:{switch(s=Za(i,n),i){case"dialog":re("cancel",e),re("close",e),a=n;break;case"iframe":case"object":case"embed":re("load",e),a=n;break;case"video":case"audio":for(a=0;a<ln.length;a++)re(ln[a],e);a=n;break;case"source":re("error",e),a=n;break;case"img":case"image":case"link":re("error",e),re("load",e),a=n;break;case"details":re("toggle",e),a=n;break;case"input":Ks(e,n),a=Ga(e,n),re("invalid",e);break;case"option":a=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=O({},n,{value:void 0}),re("invalid",e);break;case"textarea":tr(e,n),a=Ua(e,n),re("invalid",e);break;default:a=n}Ha(i,a),u=a;for(o in u)if(u.hasOwnProperty(o)){var d=u[o];o==="style"?rr(e,d):o==="dangerouslySetInnerHTML"?(d=d?d.__html:void 0,d!=null&&or(e,d)):o==="children"?typeof d=="string"?(i!=="textarea"||d!=="")&&Gi(e,d):typeof d=="number"&&Gi(e,""+d):o!=="suppressContentEditableWarning"&&o!=="suppressHydrationWarning"&&o!=="autoFocus"&&(_.hasOwnProperty(o)?d!=null&&o==="onScroll"&&re("scroll",e):d!=null&&xe(e,o,d,s))}switch(i){case"input":Qn(e),er(e,n,!1);break;case"textarea":Qn(e),nr(e);break;case"option":n.value!=null&&e.setAttribute("value",""+ie(n.value));break;case"select":e.multiple=!!n.multiple,o=n.value,o!=null?hi(e,!!n.multiple,o,!1):n.defaultValue!=null&&hi(e,!!n.multiple,n.defaultValue,!0);break;default:typeof a.onClick=="function"&&(e.onclick=Kn)}switch(i){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return ze(t),null;case 6:if(e&&t.stateNode!=null)bu(e,t,e.memoizedProps,n);else{if(typeof n!="string"&&t.stateNode===null)throw Error(r(166));if(i=oi(gn.current),oi(qt.current),oa(t)){if(n=t.stateNode,i=t.memoizedProps,n[yt]=t,(o=n.nodeValue!==i)&&(e=$e,e!==null))switch(e.tag){case 3:Yn(n.nodeValue,i,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Yn(n.nodeValue,i,(e.mode&1)!==0)}o&&(t.flags|=4)}else n=(i.nodeType===9?i:i.ownerDocument).createTextNode(n),n[yt]=t,t.stateNode=n}return ze(t),null;case 13:if(le(pe),n=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(de&&et!==null&&(t.mode&1)!==0&&(t.flags&128)===0)vl(),Si(),t.flags|=98560,o=!1;else if(o=oa(t),n!==null&&n.dehydrated!==null){if(e===null){if(!o)throw Error(r(318));if(o=t.memoizedState,o=o!==null?o.dehydrated:null,!o)throw Error(r(317));o[yt]=t}else Si(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;ze(t),o=!1}else pt!==null&&(Ms(pt),pt=null),o=!0;if(!o)return t.flags&65536?t:null}return(t.flags&128)!==0?(t.lanes=i,t):(n=n!==null,n!==(e!==null&&e.memoizedState!==null)&&n&&(t.child.flags|=8192,(t.mode&1)!==0&&(e===null||(pe.current&1)!==0?Ce===0&&(Ce=3):Qs())),t.updateQueue!==null&&(t.flags|=4),ze(t),null);case 4:return Ai(),hs(e,t),e===null&&un(t.stateNode.containerInfo),ze(t),null;case 10:return Go(t.type._context),ze(t),null;case 17:return Ue(t.type)&&ea(),ze(t),null;case 19:if(le(pe),o=t.memoizedState,o===null)return ze(t),null;if(n=(t.flags&128)!==0,s=o.rendering,s===null)if(n)vn(o,!1);else{if(Ce!==0||e!==null&&(e.flags&128)!==0)for(e=t.child;e!==null;){if(s=da(e),s!==null){for(t.flags|=128,vn(o,!1),n=s.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=i,i=t.child;i!==null;)o=i,e=n,o.flags&=14680066,s=o.alternate,s===null?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=s.childLanes,o.lanes=s.lanes,o.child=s.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=s.memoizedProps,o.memoizedState=s.memoizedState,o.updateQueue=s.updateQueue,o.type=s.type,e=s.dependencies,o.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),i=i.sibling;return se(pe,pe.current&1|2),t.child}e=e.sibling}o.tail!==null&&be()>zi&&(t.flags|=128,n=!0,vn(o,!1),t.lanes=4194304)}else{if(!n)if(e=da(s),e!==null){if(t.flags|=128,n=!0,i=e.updateQueue,i!==null&&(t.updateQueue=i,t.flags|=4),vn(o,!0),o.tail===null&&o.tailMode==="hidden"&&!s.alternate&&!de)return ze(t),null}else 2*be()-o.renderingStartTime>zi&&i!==1073741824&&(t.flags|=128,n=!0,vn(o,!1),t.lanes=4194304);o.isBackwards?(s.sibling=t.child,t.child=s):(i=o.last,i!==null?i.sibling=s:t.child=s,o.last=s)}return o.tail!==null?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=be(),t.sibling=null,i=pe.current,se(pe,n?i&1|2:i&1),t):(ze(t),null);case 22:case 23:return Is(),n=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==n&&(t.flags|=8192),n&&(t.mode&1)!==0?(tt&1073741824)!==0&&(ze(t),t.subtreeFlags&6&&(t.flags|=8192)):ze(t),null;case 24:return null;case 25:return null}throw Error(r(156,t.tag))}function Wd(e,t){switch(Oo(t),t.tag){case 1:return Ue(t.type)&&ea(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Ai(),le(Ve),le(De),Xo(),e=t.flags,(e&65536)!==0&&(e&128)===0?(t.flags=e&-65537|128,t):null;case 5:return Ho(t),null;case 13:if(le(pe),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(r(340));Si()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return le(pe),null;case 4:return Ai(),null;case 10:return Go(t.type._context),null;case 22:case 23:return Is(),null;case 24:return null;default:return null}}var qa=!1,Le=!1,Hd=typeof WeakSet=="function"?WeakSet:Set,D=null;function Di(e,t){var i=e.ref;if(i!==null)if(typeof i=="function")try{i(null)}catch(n){ge(e,t,n)}else i.current=null}function fs(e,t,i){try{i()}catch(n){ge(e,t,n)}}var yu=!1;function Zd(e,t){if(Io=Fn,e=Yr(),yo(e)){if("selectionStart"in e)var i={start:e.selectionStart,end:e.selectionEnd};else e:{i=(i=e.ownerDocument)&&i.defaultView||window;var n=i.getSelection&&i.getSelection();if(n&&n.rangeCount!==0){i=n.anchorNode;var a=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{i.nodeType,o.nodeType}catch{i=null;break e}var s=0,u=-1,d=-1,g=0,C=0,x=e,k=null;t:for(;;){for(var P;x!==i||a!==0&&x.nodeType!==3||(u=s+a),x!==o||n!==0&&x.nodeType!==3||(d=s+n),x.nodeType===3&&(s+=x.nodeValue.length),(P=x.firstChild)!==null;)k=x,x=P;for(;;){if(x===e)break t;if(k===i&&++g===a&&(u=s),k===o&&++C===n&&(d=s),(P=x.nextSibling)!==null)break;x=k,k=x.parentNode}x=P}i=u===-1||d===-1?null:{start:u,end:d}}else i=null}i=i||{start:0,end:0}}else i=null;for(Qo={focusedElem:e,selectionRange:i},Fn=!1,D=t;D!==null;)if(t=D,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,D=e;else for(;D!==null;){t=D;try{var z=t.alternate;if((t.flags&1024)!==0)switch(t.tag){case 0:case 11:case 15:break;case 1:if(z!==null){var L=z.memoizedProps,ye=z.memoizedState,h=t.stateNode,m=h.getSnapshotBeforeUpdate(t.elementType===t.type?L:ht(t.type,L),ye);h.__reactInternalSnapshotBeforeUpdate=m}break;case 3:var f=t.stateNode.containerInfo;f.nodeType===1?f.textContent="":f.nodeType===9&&f.documentElement&&f.removeChild(f.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(r(163))}}catch(Q){ge(t,t.return,Q)}if(e=t.sibling,e!==null){e.return=t.return,D=e;break}D=t.return}return z=yu,yu=!1,z}function kn(e,t,i){var n=t.updateQueue;if(n=n!==null?n.lastEffect:null,n!==null){var a=n=n.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,o!==void 0&&fs(t,i,o)}a=a.next}while(a!==n)}}function va(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var i=t=t.next;do{if((i.tag&e)===e){var n=i.create;i.destroy=n()}i=i.next}while(i!==t)}}function gs(e){var t=e.ref;if(t!==null){var i=e.stateNode;switch(e.tag){case 5:e=i;break;default:e=i}typeof t=="function"?t(e):t.current=e}}function qu(e){var t=e.alternate;t!==null&&(e.alternate=null,qu(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[yt],delete t[dn],delete t[Ro],delete t[Bd],delete t[Td])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function vu(e){return e.tag===5||e.tag===3||e.tag===4}function ku(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||vu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function _s(e,t,i){var n=e.tag;if(n===5||n===6)e=e.stateNode,t?i.nodeType===8?i.parentNode.insertBefore(e,t):i.insertBefore(e,t):(i.nodeType===8?(t=i.parentNode,t.insertBefore(e,i)):(t=i,t.appendChild(e)),i=i._reactRootContainer,i!=null||t.onclick!==null||(t.onclick=Kn));else if(n!==4&&(e=e.child,e!==null))for(_s(e,t,i),e=e.sibling;e!==null;)_s(e,t,i),e=e.sibling}function bs(e,t,i){var n=e.tag;if(n===5||n===6)e=e.stateNode,t?i.insertBefore(e,t):i.appendChild(e);else if(n!==4&&(e=e.child,e!==null))for(bs(e,t,i),e=e.sibling;e!==null;)bs(e,t,i),e=e.sibling}var Ae=null,ft=!1;function Ut(e,t,i){for(i=i.child;i!==null;)wu(e,t,i),i=i.sibling}function wu(e,t,i){if(bt&&typeof bt.onCommitFiberUnmount=="function")try{bt.onCommitFiberUnmount(Pn,i)}catch{}switch(i.tag){case 5:Le||Di(i,t);case 6:var n=Ae,a=ft;Ae=null,Ut(e,t,i),Ae=n,ft=a,Ae!==null&&(ft?(e=Ae,i=i.stateNode,e.nodeType===8?e.parentNode.removeChild(i):e.removeChild(i)):Ae.removeChild(i.stateNode));break;case 18:Ae!==null&&(ft?(e=Ae,i=i.stateNode,e.nodeType===8?To(e.parentNode,i):e.nodeType===1&&To(e,i),$i(e)):To(Ae,i.stateNode));break;case 4:n=Ae,a=ft,Ae=i.stateNode.containerInfo,ft=!0,Ut(e,t,i),Ae=n,ft=a;break;case 0:case 11:case 14:case 15:if(!Le&&(n=i.updateQueue,n!==null&&(n=n.lastEffect,n!==null))){a=n=n.next;do{var o=a,s=o.destroy;o=o.tag,s!==void 0&&((o&2)!==0||(o&4)!==0)&&fs(i,t,s),a=a.next}while(a!==n)}Ut(e,t,i);break;case 1:if(!Le&&(Di(i,t),n=i.stateNode,typeof n.componentWillUnmount=="function"))try{n.props=i.memoizedProps,n.state=i.memoizedState,n.componentWillUnmount()}catch(u){ge(i,t,u)}Ut(e,t,i);break;case 21:Ut(e,t,i);break;case 22:i.mode&1?(Le=(n=Le)||i.memoizedState!==null,Ut(e,t,i),Le=n):Ut(e,t,i);break;default:Ut(e,t,i)}}function Cu(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var i=e.stateNode;i===null&&(i=e.stateNode=new Hd),t.forEach(function(n){var a=nm.bind(null,e,n);i.has(n)||(i.add(n),n.then(a,a))})}}function gt(e,t){var i=t.deletions;if(i!==null)for(var n=0;n<i.length;n++){var a=i[n];try{var o=e,s=t,u=s;e:for(;u!==null;){switch(u.tag){case 5:Ae=u.stateNode,ft=!1;break e;case 3:Ae=u.stateNode.containerInfo,ft=!0;break e;case 4:Ae=u.stateNode.containerInfo,ft=!0;break e}u=u.return}if(Ae===null)throw Error(r(160));wu(o,s,a),Ae=null,ft=!1;var d=a.alternate;d!==null&&(d.return=null),a.return=null}catch(g){ge(a,t,g)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)Mu(t,e),t=t.sibling}function Mu(e,t){var i=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gt(t,e),kt(e),n&4){try{kn(3,e,e.return),va(3,e)}catch(L){ge(e,e.return,L)}try{kn(5,e,e.return)}catch(L){ge(e,e.return,L)}}break;case 1:gt(t,e),kt(e),n&512&&i!==null&&Di(i,i.return);break;case 5:if(gt(t,e),kt(e),n&512&&i!==null&&Di(i,i.return),e.flags&32){var a=e.stateNode;try{Gi(a,"")}catch(L){ge(e,e.return,L)}}if(n&4&&(a=e.stateNode,a!=null)){var o=e.memoizedProps,s=i!==null?i.memoizedProps:o,u=e.type,d=e.updateQueue;if(e.updateQueue=null,d!==null)try{u==="input"&&o.type==="radio"&&o.name!=null&&$s(a,o),Za(u,s);var g=Za(u,o);for(s=0;s<d.length;s+=2){var C=d[s],x=d[s+1];C==="style"?rr(a,x):C==="dangerouslySetInnerHTML"?or(a,x):C==="children"?Gi(a,x):xe(a,C,x,g)}switch(u){case"input":ja(a,o);break;case"textarea":ir(a,o);break;case"select":var k=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!o.multiple;var P=o.value;P!=null?hi(a,!!o.multiple,P,!1):k!==!!o.multiple&&(o.defaultValue!=null?hi(a,!!o.multiple,o.defaultValue,!0):hi(a,!!o.multiple,o.multiple?[]:"",!1))}a[dn]=o}catch(L){ge(e,e.return,L)}}break;case 6:if(gt(t,e),kt(e),n&4){if(e.stateNode===null)throw Error(r(162));a=e.stateNode,o=e.memoizedProps;try{a.nodeValue=o}catch(L){ge(e,e.return,L)}}break;case 3:if(gt(t,e),kt(e),n&4&&i!==null&&i.memoizedState.isDehydrated)try{$i(t.containerInfo)}catch(L){ge(e,e.return,L)}break;case 4:gt(t,e),kt(e);break;case 13:gt(t,e),kt(e),a=e.child,a.flags&8192&&(o=a.memoizedState!==null,a.stateNode.isHidden=o,!o||a.alternate!==null&&a.alternate.memoizedState!==null||(vs=be())),n&4&&Cu(e);break;case 22:if(C=i!==null&&i.memoizedState!==null,e.mode&1?(Le=(g=Le)||C,gt(t,e),Le=g):gt(t,e),kt(e),n&8192){if(g=e.memoizedState!==null,(e.stateNode.isHidden=g)&&!C&&(e.mode&1)!==0)for(D=e,C=e.child;C!==null;){for(x=D=C;D!==null;){switch(k=D,P=k.child,k.tag){case 0:case 11:case 14:case 15:kn(4,k,k.return);break;case 1:Di(k,k.return);var z=k.stateNode;if(typeof z.componentWillUnmount=="function"){n=k,i=k.return;try{t=n,z.props=t.memoizedProps,z.state=t.memoizedState,z.componentWillUnmount()}catch(L){ge(n,i,L)}}break;case 5:Di(k,k.return);break;case 22:if(k.memoizedState!==null){Qu(x);continue}}P!==null?(P.return=k,D=P):Qu(x)}C=C.sibling}e:for(C=null,x=e;;){if(x.tag===5){if(C===null){C=x;try{a=x.stateNode,g?(o=a.style,typeof o.setProperty=="function"?o.setProperty("display","none","important"):o.display="none"):(u=x.stateNode,d=x.memoizedProps.style,s=d!=null&&d.hasOwnProperty("display")?d.display:null,u.style.display=sr("display",s))}catch(L){ge(e,e.return,L)}}}else if(x.tag===6){if(C===null)try{x.stateNode.nodeValue=g?"":x.memoizedProps}catch(L){ge(e,e.return,L)}}else if((x.tag!==22&&x.tag!==23||x.memoizedState===null||x===e)&&x.child!==null){x.child.return=x,x=x.child;continue}if(x===e)break e;for(;x.sibling===null;){if(x.return===null||x.return===e)break e;C===x&&(C=null),x=x.return}C===x&&(C=null),x.sibling.return=x.return,x=x.sibling}}break;case 19:gt(t,e),kt(e),n&4&&Cu(e);break;case 21:break;default:gt(t,e),kt(e)}}function kt(e){var t=e.flags;if(t&2){try{e:{for(var i=e.return;i!==null;){if(vu(i)){var n=i;break e}i=i.return}throw Error(r(160))}switch(n.tag){case 5:var a=n.stateNode;n.flags&32&&(Gi(a,""),n.flags&=-33);var o=ku(e);bs(e,o,a);break;case 3:case 4:var s=n.stateNode.containerInfo,u=ku(e);_s(e,u,s);break;default:throw Error(r(161))}}catch(d){ge(e,e.return,d)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function Xd(e,t,i){D=e,xu(e)}function xu(e,t,i){for(var n=(e.mode&1)!==0;D!==null;){var a=D,o=a.child;if(a.tag===22&&n){var s=a.memoizedState!==null||qa;if(!s){var u=a.alternate,d=u!==null&&u.memoizedState!==null||Le;u=qa;var g=Le;if(qa=s,(Le=d)&&!g)for(D=a;D!==null;)s=D,d=s.child,s.tag===22&&s.memoizedState!==null?Su(a):d!==null?(d.return=s,D=d):Su(a);for(;o!==null;)D=o,xu(o),o=o.sibling;D=a,qa=u,Le=g}Iu(e)}else(a.subtreeFlags&8772)!==0&&o!==null?(o.return=a,D=o):Iu(e)}}function Iu(e){for(;D!==null;){var t=D;if((t.flags&8772)!==0){var i=t.alternate;try{if((t.flags&8772)!==0)switch(t.tag){case 0:case 11:case 15:Le||va(5,t);break;case 1:var n=t.stateNode;if(t.flags&4&&!Le)if(i===null)n.componentDidMount();else{var a=t.elementType===t.type?i.memoizedProps:ht(t.type,i.memoizedProps);n.componentDidUpdate(a,i.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;o!==null&&Ql(t,o,n);break;case 3:var s=t.updateQueue;if(s!==null){if(i=null,t.child!==null)switch(t.child.tag){case 5:i=t.child.stateNode;break;case 1:i=t.child.stateNode}Ql(t,s,i)}break;case 5:var u=t.stateNode;if(i===null&&t.flags&4){i=u;var d=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":d.autoFocus&&i.focus();break;case"img":d.src&&(i.src=d.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var g=t.alternate;if(g!==null){var C=g.memoizedState;if(C!==null){var x=C.dehydrated;x!==null&&$i(x)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(r(163))}Le||t.flags&512&&gs(t)}catch(k){ge(t,t.return,k)}}if(t===e){D=null;break}if(i=t.sibling,i!==null){i.return=t.return,D=i;break}D=t.return}}function Qu(e){for(;D!==null;){var t=D;if(t===e){D=null;break}var i=t.sibling;if(i!==null){i.return=t.return,D=i;break}D=t.return}}function Su(e){for(;D!==null;){var t=D;try{switch(t.tag){case 0:case 11:case 15:var i=t.return;try{va(4,t)}catch(d){ge(t,i,d)}break;case 1:var n=t.stateNode;if(typeof n.componentDidMount=="function"){var a=t.return;try{n.componentDidMount()}catch(d){ge(t,a,d)}}var o=t.return;try{gs(t)}catch(d){ge(t,o,d)}break;case 5:var s=t.return;try{gs(t)}catch(d){ge(t,s,d)}}}catch(d){ge(t,t.return,d)}if(t===e){D=null;break}var u=t.sibling;if(u!==null){u.return=t.return,D=u;break}D=t.return}}var Jd=Math.ceil,ka=ue.ReactCurrentDispatcher,ys=ue.ReactCurrentOwner,lt=ue.ReactCurrentBatchConfig,K=0,Qe=null,ve=null,Pe=0,tt=0,Oi=Ft(0),Ce=0,wn=null,ri=0,wa=0,qs=0,Cn=null,He=null,vs=0,zi=1/0,Tt=null,Ca=!1,ks=null,Wt=null,Ma=!1,Ht=null,xa=0,Mn=0,ws=null,Ia=-1,Qa=0;function Ne(){return(K&6)!==0?be():Ia!==-1?Ia:Ia=be()}function Zt(e){return(e.mode&1)===0?1:(K&2)!==0&&Pe!==0?Pe&-Pe:Ad.transition!==null?(Qa===0&&(Qa=kr()),Qa):(e=ne,e!==0||(e=window.event,e=e===void 0?16:Tr(e.type)),e)}function _t(e,t,i,n){if(50<Mn)throw Mn=0,ws=null,Error(r(185));Zi(e,i,n),((K&2)===0||e!==Qe)&&(e===Qe&&((K&2)===0&&(wa|=i),Ce===4&&Xt(e,Pe)),Ze(e,n),i===1&&K===0&&(t.mode&1)===0&&(zi=be()+500,ia&&Gt()))}function Ze(e,t){var i=e.callbackNode;Ac(e,t);var n=zn(e,e===Qe?Pe:0);if(n===0)i!==null&&yr(i),e.callbackNode=null,e.callbackPriority=0;else if(t=n&-n,e.callbackPriority!==t){if(i!=null&&yr(i),t===1)e.tag===0?Rd(Tu.bind(null,e)):gl(Tu.bind(null,e)),Qd(function(){(K&6)===0&&Gt()}),i=null;else{switch(wr(n)){case 1:i=to;break;case 4:i=qr;break;case 16:i=An;break;case 536870912:i=vr;break;default:i=An}i=Eu(i,Bu.bind(null,e))}e.callbackPriority=t,e.callbackNode=i}}function Bu(e,t){if(Ia=-1,Qa=0,(K&6)!==0)throw Error(r(327));var i=e.callbackNode;if(Li()&&e.callbackNode!==i)return null;var n=zn(e,e===Qe?Pe:0);if(n===0)return null;if((n&30)!==0||(n&e.expiredLanes)!==0||t)t=Sa(e,n);else{t=n;var a=K;K|=2;var o=Au();(Qe!==e||Pe!==t)&&(Tt=null,zi=be()+500,ui(e,t));do try{$d();break}catch(u){Ru(e,u)}while(!0);No(),ka.current=o,K=a,ve!==null?t=0:(Qe=null,Pe=0,t=Ce)}if(t!==0){if(t===2&&(a=io(e),a!==0&&(n=a,t=Cs(e,a))),t===1)throw i=wn,ui(e,0),Xt(e,n),Ze(e,be()),i;if(t===6)Xt(e,n);else{if(a=e.current.alternate,(n&30)===0&&!Yd(a)&&(t=Sa(e,n),t===2&&(o=io(e),o!==0&&(n=o,t=Cs(e,o))),t===1))throw i=wn,ui(e,0),Xt(e,n),Ze(e,be()),i;switch(e.finishedWork=a,e.finishedLanes=n,t){case 0:case 1:throw Error(r(345));case 2:ci(e,He,Tt);break;case 3:if(Xt(e,n),(n&130023424)===n&&(t=vs+500-be(),10<t)){if(zn(e,0)!==0)break;if(a=e.suspendedLanes,(a&n)!==n){Ne(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Bo(ci.bind(null,e,He,Tt),t);break}ci(e,He,Tt);break;case 4:if(Xt(e,n),(n&4194240)===n)break;for(t=e.eventTimes,a=-1;0<n;){var s=31-dt(n);o=1<<s,s=t[s],s>a&&(a=s),n&=~o}if(n=a,n=be()-n,n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Jd(n/1960))-n,10<n){e.timeoutHandle=Bo(ci.bind(null,e,He,Tt),n);break}ci(e,He,Tt);break;case 5:ci(e,He,Tt);break;default:throw Error(r(329))}}}return Ze(e,be()),e.callbackNode===i?Bu.bind(null,e):null}function Cs(e,t){var i=Cn;return e.current.memoizedState.isDehydrated&&(ui(e,t).flags|=256),e=Sa(e,t),e!==2&&(t=He,He=i,t!==null&&Ms(t)),e}function Ms(e){He===null?He=e:He.push.apply(He,e)}function Yd(e){for(var t=e;;){if(t.flags&16384){var i=t.updateQueue;if(i!==null&&(i=i.stores,i!==null))for(var n=0;n<i.length;n++){var a=i[n],o=a.getSnapshot;a=a.value;try{if(!mt(o(),a))return!1}catch{return!1}}}if(i=t.child,t.subtreeFlags&16384&&i!==null)i.return=t,t=i;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Xt(e,t){for(t&=~qs,t&=~wa,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var i=31-dt(t),n=1<<i;e[i]=-1,t&=~n}}function Tu(e){if((K&6)!==0)throw Error(r(327));Li();var t=zn(e,0);if((t&1)===0)return Ze(e,be()),null;var i=Sa(e,t);if(e.tag!==0&&i===2){var n=io(e);n!==0&&(t=n,i=Cs(e,n))}if(i===1)throw i=wn,ui(e,0),Xt(e,t),Ze(e,be()),i;if(i===6)throw Error(r(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ci(e,He,Tt),Ze(e,be()),null}function xs(e,t){var i=K;K|=1;try{return e(t)}finally{K=i,K===0&&(zi=be()+500,ia&&Gt())}}function li(e){Ht!==null&&Ht.tag===0&&(K&6)===0&&Li();var t=K;K|=1;var i=lt.transition,n=ne;try{if(lt.transition=null,ne=1,e)return e()}finally{ne=n,lt.transition=i,K=t,(K&6)===0&&Gt()}}function Is(){tt=Oi.current,le(Oi)}function ui(e,t){e.finishedWork=null,e.finishedLanes=0;var i=e.timeoutHandle;if(i!==-1&&(e.timeoutHandle=-1,Id(i)),ve!==null)for(i=ve.return;i!==null;){var n=i;switch(Oo(n),n.tag){case 1:n=n.type.childContextTypes,n!=null&&ea();break;case 3:Ai(),le(Ve),le(De),Xo();break;case 5:Ho(n);break;case 4:Ai();break;case 13:le(pe);break;case 19:le(pe);break;case 10:Go(n.type._context);break;case 22:case 23:Is()}i=i.return}if(Qe=e,ve=e=Jt(e.current,null),Pe=tt=t,Ce=0,wn=null,qs=wa=ri=0,He=Cn=null,ai!==null){for(t=0;t<ai.length;t++)if(i=ai[t],n=i.interleaved,n!==null){i.interleaved=null;var a=n.next,o=i.pending;if(o!==null){var s=o.next;o.next=a,n.next=s}i.pending=n}ai=null}return e}function Ru(e,t){do{var i=ve;try{if(No(),ma.current=ga,pa){for(var n=he.memoizedState;n!==null;){var a=n.queue;a!==null&&(a.pending=null),n=n.next}pa=!1}if(si=0,Ie=we=he=null,_n=!1,bn=0,ys.current=null,i===null||i.return===null){Ce=1,wn=t,ve=null;break}e:{var o=e,s=i.return,u=i,d=t;if(t=Pe,u.flags|=32768,d!==null&&typeof d=="object"&&typeof d.then=="function"){var g=d,C=u,x=C.tag;if((C.mode&1)===0&&(x===0||x===11||x===15)){var k=C.alternate;k?(C.updateQueue=k.updateQueue,C.memoizedState=k.memoizedState,C.lanes=k.lanes):(C.updateQueue=null,C.memoizedState=null)}var P=nu(s);if(P!==null){P.flags&=-257,au(P,s,u,o,t),P.mode&1&&iu(o,g,t),t=P,d=g;var z=t.updateQueue;if(z===null){var L=new Set;L.add(d),t.updateQueue=L}else z.add(d);break e}else{if((t&1)===0){iu(o,g,t),Qs();break e}d=Error(r(426))}}else if(de&&u.mode&1){var ye=nu(s);if(ye!==null){(ye.flags&65536)===0&&(ye.flags|=256),au(ye,s,u,o,t),Eo(Pi(d,u));break e}}o=d=Pi(d,u),Ce!==4&&(Ce=2),Cn===null?Cn=[o]:Cn.push(o),o=s;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t;var h=eu(o,d,t);Il(o,h);break e;case 1:u=d;var m=o.type,f=o.stateNode;if((o.flags&128)===0&&(typeof m.getDerivedStateFromError=="function"||f!==null&&typeof f.componentDidCatch=="function"&&(Wt===null||!Wt.has(f)))){o.flags|=65536,t&=-t,o.lanes|=t;var Q=tu(o,u,t);Il(o,Q);break e}}o=o.return}while(o!==null)}Du(i)}catch(E){t=E,ve===i&&i!==null&&(ve=i=i.return);continue}break}while(!0)}function Au(){var e=ka.current;return ka.current=ga,e===null?ga:e}function Qs(){(Ce===0||Ce===3||Ce===2)&&(Ce=4),Qe===null||(ri&268435455)===0&&(wa&268435455)===0||Xt(Qe,Pe)}function Sa(e,t){var i=K;K|=2;var n=Au();(Qe!==e||Pe!==t)&&(Tt=null,ui(e,t));do try{Kd();break}catch(a){Ru(e,a)}while(!0);if(No(),K=i,ka.current=n,ve!==null)throw Error(r(261));return Qe=null,Pe=0,Ce}function Kd(){for(;ve!==null;)Pu(ve)}function $d(){for(;ve!==null&&!Cc();)Pu(ve)}function Pu(e){var t=Lu(e.alternate,e,tt);e.memoizedProps=e.pendingProps,t===null?Du(e):ve=t,ys.current=null}function Du(e){var t=e;do{var i=t.alternate;if(e=t.return,(t.flags&32768)===0){if(i=Ud(i,t,tt),i!==null){ve=i;return}}else{if(i=Wd(i,t),i!==null){i.flags&=32767,ve=i;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{Ce=6,ve=null;return}}if(t=t.sibling,t!==null){ve=t;return}ve=t=e}while(t!==null);Ce===0&&(Ce=5)}function ci(e,t,i){var n=ne,a=lt.transition;try{lt.transition=null,ne=1,em(e,t,i,n)}finally{lt.transition=a,ne=n}return null}function em(e,t,i,n){do Li();while(Ht!==null);if((K&6)!==0)throw Error(r(327));i=e.finishedWork;var a=e.finishedLanes;if(i===null)return null;if(e.finishedWork=null,e.finishedLanes=0,i===e.current)throw Error(r(177));e.callbackNode=null,e.callbackPriority=0;var o=i.lanes|i.childLanes;if(Pc(e,o),e===Qe&&(ve=Qe=null,Pe=0),(i.subtreeFlags&2064)===0&&(i.flags&2064)===0||Ma||(Ma=!0,Eu(An,function(){return Li(),null})),o=(i.flags&15990)!==0,(i.subtreeFlags&15990)!==0||o){o=lt.transition,lt.transition=null;var s=ne;ne=1;var u=K;K|=4,ys.current=null,Zd(e,i),Mu(i,e),qd(Qo),Fn=!!Io,Qo=Io=null,e.current=i,Xd(i),Mc(),K=u,ne=s,lt.transition=o}else e.current=i;if(Ma&&(Ma=!1,Ht=e,xa=a),o=e.pendingLanes,o===0&&(Wt=null),Qc(i.stateNode),Ze(e,be()),t!==null)for(n=e.onRecoverableError,i=0;i<t.length;i++)a=t[i],n(a.value,{componentStack:a.stack,digest:a.digest});if(Ca)throw Ca=!1,e=ks,ks=null,e;return(xa&1)!==0&&e.tag!==0&&Li(),o=e.pendingLanes,(o&1)!==0?e===ws?Mn++:(Mn=0,ws=e):Mn=0,Gt(),null}function Li(){if(Ht!==null){var e=wr(xa),t=lt.transition,i=ne;try{if(lt.transition=null,ne=16>e?16:e,Ht===null)var n=!1;else{if(e=Ht,Ht=null,xa=0,(K&6)!==0)throw Error(r(331));var a=K;for(K|=4,D=e.current;D!==null;){var o=D,s=o.child;if((D.flags&16)!==0){var u=o.deletions;if(u!==null){for(var d=0;d<u.length;d++){var g=u[d];for(D=g;D!==null;){var C=D;switch(C.tag){case 0:case 11:case 15:kn(8,C,o)}var x=C.child;if(x!==null)x.return=C,D=x;else for(;D!==null;){C=D;var k=C.sibling,P=C.return;if(qu(C),C===g){D=null;break}if(k!==null){k.return=P,D=k;break}D=P}}}var z=o.alternate;if(z!==null){var L=z.child;if(L!==null){z.child=null;do{var ye=L.sibling;L.sibling=null,L=ye}while(L!==null)}}D=o}}if((o.subtreeFlags&2064)!==0&&s!==null)s.return=o,D=s;else e:for(;D!==null;){if(o=D,(o.flags&2048)!==0)switch(o.tag){case 0:case 11:case 15:kn(9,o,o.return)}var h=o.sibling;if(h!==null){h.return=o.return,D=h;break e}D=o.return}}var m=e.current;for(D=m;D!==null;){s=D;var f=s.child;if((s.subtreeFlags&2064)!==0&&f!==null)f.return=s,D=f;else e:for(s=m;D!==null;){if(u=D,(u.flags&2048)!==0)try{switch(u.tag){case 0:case 11:case 15:va(9,u)}}catch(E){ge(u,u.return,E)}if(u===s){D=null;break e}var Q=u.sibling;if(Q!==null){Q.return=u.return,D=Q;break e}D=u.return}}if(K=a,Gt(),bt&&typeof bt.onPostCommitFiberRoot=="function")try{bt.onPostCommitFiberRoot(Pn,e)}catch{}n=!0}return n}finally{ne=i,lt.transition=t}}return!1}function Ou(e,t,i){t=Pi(i,t),t=eu(e,t,1),e=Vt(e,t,1),t=Ne(),e!==null&&(Zi(e,1,t),Ze(e,t))}function ge(e,t,i){if(e.tag===3)Ou(e,e,i);else for(;t!==null;){if(t.tag===3){Ou(t,e,i);break}else if(t.tag===1){var n=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof n.componentDidCatch=="function"&&(Wt===null||!Wt.has(n))){e=Pi(i,e),e=tu(t,e,1),t=Vt(t,e,1),e=Ne(),t!==null&&(Zi(t,1,e),Ze(t,e));break}}t=t.return}}function tm(e,t,i){var n=e.pingCache;n!==null&&n.delete(t),t=Ne(),e.pingedLanes|=e.suspendedLanes&i,Qe===e&&(Pe&i)===i&&(Ce===4||Ce===3&&(Pe&130023424)===Pe&&500>be()-vs?ui(e,0):qs|=i),Ze(e,t)}function zu(e,t){t===0&&((e.mode&1)===0?t=1:(t=On,On<<=1,(On&130023424)===0&&(On=4194304)));var i=Ne();e=Qt(e,t),e!==null&&(Zi(e,t,i),Ze(e,i))}function im(e){var t=e.memoizedState,i=0;t!==null&&(i=t.retryLane),zu(e,i)}function nm(e,t){var i=0;switch(e.tag){case 13:var n=e.stateNode,a=e.memoizedState;a!==null&&(i=a.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(r(314))}n!==null&&n.delete(t),zu(e,i)}var Lu;Lu=function(e,t,i){if(e!==null)if(e.memoizedProps!==t.pendingProps||Ve.current)We=!0;else{if((e.lanes&i)===0&&(t.flags&128)===0)return We=!1,Vd(e,t,i);We=(e.flags&131072)!==0}else We=!1,de&&(t.flags&1048576)!==0&&_l(t,aa,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;ya(e,t),e=t.pendingProps;var a=xi(t,De.current);Ri(t,i),a=Ko(null,t,n,e,a,i);var o=$o();return t.flags|=1,typeof a=="object"&&a!==null&&typeof a.render=="function"&&a.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ue(n)?(o=!0,ta(t)):o=!1,t.memoizedState=a.state!==null&&a.state!==void 0?a.state:null,Uo(t),a.updater=_a,t.stateNode=a,a._reactInternals=t,os(t,n,e,i),t=us(null,t,n,!0,o,i)):(t.tag=0,de&&o&&Do(t),Fe(null,t,a,i),t=t.child),t;case 16:n=t.elementType;e:{switch(ya(e,t),e=t.pendingProps,a=n._init,n=a(n._payload),t.type=n,a=t.tag=om(n),e=ht(n,e),a){case 0:t=ls(null,t,n,e,i);break e;case 1:t=cu(null,t,n,e,i);break e;case 11:t=ou(null,t,n,e,i);break e;case 14:t=su(null,t,n,ht(n.type,e),i);break e}throw Error(r(306,n,""))}return t;case 0:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:ht(n,a),ls(e,t,n,a,i);case 1:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:ht(n,a),cu(e,t,n,a,i);case 3:e:{if(du(t),e===null)throw Error(r(387));n=t.pendingProps,o=t.memoizedState,a=o.element,xl(e,t),ca(t,n,null,i);var s=t.memoizedState;if(n=s.element,o.isDehydrated)if(o={element:n,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=o,t.memoizedState=o,t.flags&256){a=Pi(Error(r(423)),t),t=mu(e,t,n,i,a);break e}else if(n!==a){a=Pi(Error(r(424)),t),t=mu(e,t,n,i,a);break e}else for(et=Et(t.stateNode.containerInfo.firstChild),$e=t,de=!0,pt=null,i=Cl(t,null,n,i),t.child=i;i;)i.flags=i.flags&-3|4096,i=i.sibling;else{if(Si(),n===a){t=Bt(e,t,i);break e}Fe(e,t,n,i)}t=t.child}return t;case 5:return Sl(t),e===null&&Lo(t),n=t.type,a=t.pendingProps,o=e!==null?e.memoizedProps:null,s=a.children,So(n,a)?s=null:o!==null&&So(n,o)&&(t.flags|=32),uu(e,t),Fe(e,t,s,i),t.child;case 6:return e===null&&Lo(t),null;case 13:return pu(e,t,i);case 4:return Wo(t,t.stateNode.containerInfo),n=t.pendingProps,e===null?t.child=Bi(t,null,n,i):Fe(e,t,n,i),t.child;case 11:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:ht(n,a),ou(e,t,n,a,i);case 7:return Fe(e,t,t.pendingProps,i),t.child;case 8:return Fe(e,t,t.pendingProps.children,i),t.child;case 12:return Fe(e,t,t.pendingProps.children,i),t.child;case 10:e:{if(n=t.type._context,a=t.pendingProps,o=t.memoizedProps,s=a.value,se(ra,n._currentValue),n._currentValue=s,o!==null)if(mt(o.value,s)){if(o.children===a.children&&!Ve.current){t=Bt(e,t,i);break e}}else for(o=t.child,o!==null&&(o.return=t);o!==null;){var u=o.dependencies;if(u!==null){s=o.child;for(var d=u.firstContext;d!==null;){if(d.context===n){if(o.tag===1){d=St(-1,i&-i),d.tag=2;var g=o.updateQueue;if(g!==null){g=g.shared;var C=g.pending;C===null?d.next=d:(d.next=C.next,C.next=d),g.pending=d}}o.lanes|=i,d=o.alternate,d!==null&&(d.lanes|=i),jo(o.return,i,t),u.lanes|=i;break}d=d.next}}else if(o.tag===10)s=o.type===t.type?null:o.child;else if(o.tag===18){if(s=o.return,s===null)throw Error(r(341));s.lanes|=i,u=s.alternate,u!==null&&(u.lanes|=i),jo(s,i,t),s=o.sibling}else s=o.child;if(s!==null)s.return=o;else for(s=o;s!==null;){if(s===t){s=null;break}if(o=s.sibling,o!==null){o.return=s.return,s=o;break}s=s.return}o=s}Fe(e,t,a.children,i),t=t.child}return t;case 9:return a=t.type,n=t.pendingProps.children,Ri(t,i),a=st(a),n=n(a),t.flags|=1,Fe(e,t,n,i),t.child;case 14:return n=t.type,a=ht(n,t.pendingProps),a=ht(n.type,a),su(e,t,n,a,i);case 15:return ru(e,t,t.type,t.pendingProps,i);case 17:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:ht(n,a),ya(e,t),t.tag=1,Ue(n)?(e=!0,ta(t)):e=!1,Ri(t,i),Kl(t,n,a),os(t,n,a,i),us(null,t,n,!0,e,i);case 19:return fu(e,t,i);case 22:return lu(e,t,i)}throw Error(r(156,t.tag))};function Eu(e,t){return br(e,t)}function am(e,t,i,n){this.tag=e,this.key=i,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function ut(e,t,i,n){return new am(e,t,i,n)}function Ss(e){return e=e.prototype,!(!e||!e.isReactComponent)}function om(e){if(typeof e=="function")return Ss(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Te)return 11;if(e===Ee)return 14}return 2}function Jt(e,t){var i=e.alternate;return i===null?(i=ut(e.tag,t,e.key,e.mode),i.elementType=e.elementType,i.type=e.type,i.stateNode=e.stateNode,i.alternate=e,e.alternate=i):(i.pendingProps=t,i.type=e.type,i.flags=0,i.subtreeFlags=0,i.deletions=null),i.flags=e.flags&14680064,i.childLanes=e.childLanes,i.lanes=e.lanes,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,t=e.dependencies,i.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},i.sibling=e.sibling,i.index=e.index,i.ref=e.ref,i}function Ba(e,t,i,n,a,o){var s=2;if(n=e,typeof e=="function")Ss(e)&&(s=1);else if(typeof e=="string")s=5;else e:switch(e){case ae:return di(i.children,a,o,t);case _e:s=8,a|=8;break;case Be:return e=ut(12,i,t,a|2),e.elementType=Be,e.lanes=o,e;case je:return e=ut(13,i,t,a),e.elementType=je,e.lanes=o,e;case me:return e=ut(19,i,t,a),e.elementType=me,e.lanes=o,e;case fe:return Ta(i,a,o,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case nt:s=10;break e;case ct:s=9;break e;case Te:s=11;break e;case Ee:s=14;break e;case Re:s=16,n=null;break e}throw Error(r(130,e==null?e:typeof e,""))}return t=ut(s,i,t,a),t.elementType=e,t.type=n,t.lanes=o,t}function di(e,t,i,n){return e=ut(7,e,n,t),e.lanes=i,e}function Ta(e,t,i,n){return e=ut(22,e,n,t),e.elementType=fe,e.lanes=i,e.stateNode={isHidden:!1},e}function Bs(e,t,i){return e=ut(6,e,null,t),e.lanes=i,e}function Ts(e,t,i){return t=ut(4,e.children!==null?e.children:[],e.key,t),t.lanes=i,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function sm(e,t,i,n,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=no(0),this.expirationTimes=no(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=no(0),this.identifierPrefix=n,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Rs(e,t,i,n,a,o,s,u,d){return e=new sm(e,t,i,u,d),t===1?(t=1,o===!0&&(t|=8)):t=0,o=ut(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:n,isDehydrated:i,cache:null,transitions:null,pendingSuspenseBoundaries:null},Uo(o),e}function rm(e,t,i){var n=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:ke,key:n==null?null:""+n,children:e,containerInfo:t,implementation:i}}function Fu(e){if(!e)return Nt;e=e._reactInternals;e:{if($t(e)!==e||e.tag!==1)throw Error(r(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ue(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(r(171))}if(e.tag===1){var i=e.type;if(Ue(i))return hl(e,i,t)}return t}function Nu(e,t,i,n,a,o,s,u,d){return e=Rs(i,n,!0,e,a,o,s,u,d),e.context=Fu(null),i=e.current,n=Ne(),a=Zt(i),o=St(n,a),o.callback=t??null,Vt(i,o,a),e.current.lanes=a,Zi(e,a,n),Ze(e,n),e}function Ra(e,t,i,n){var a=t.current,o=Ne(),s=Zt(a);return i=Fu(i),t.context===null?t.context=i:t.pendingContext=i,t=St(o,s),t.payload={element:e},n=n===void 0?null:n,n!==null&&(t.callback=n),e=Vt(a,t,s),e!==null&&(_t(e,a,s,o),ua(e,a,s)),s}function Aa(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Gu(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var i=e.retryLane;e.retryLane=i!==0&&i<t?i:t}}function As(e,t){Gu(e,t),(e=e.alternate)&&Gu(e,t)}function lm(){return null}var ju=typeof reportError=="function"?reportError:function(e){console.error(e)};function Ps(e){this._internalRoot=e}Pa.prototype.render=Ps.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(r(409));Ra(e,t,null,null)},Pa.prototype.unmount=Ps.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;li(function(){Ra(null,e,null,null)}),t[Ct]=null}};function Pa(e){this._internalRoot=e}Pa.prototype.unstable_scheduleHydration=function(e){if(e){var t=xr();e={blockedOn:null,target:e,priority:t};for(var i=0;i<Ot.length&&t!==0&&t<Ot[i].priority;i++);Ot.splice(i,0,e),i===0&&Sr(e)}};function Ds(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Da(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function Vu(){}function um(e,t,i,n,a){if(a){if(typeof n=="function"){var o=n;n=function(){var g=Aa(s);o.call(g)}}var s=Nu(t,n,e,0,null,!1,!1,"",Vu);return e._reactRootContainer=s,e[Ct]=s.current,un(e.nodeType===8?e.parentNode:e),li(),s}for(;a=e.lastChild;)e.removeChild(a);if(typeof n=="function"){var u=n;n=function(){var g=Aa(d);u.call(g)}}var d=Rs(e,0,!1,null,null,!1,!1,"",Vu);return e._reactRootContainer=d,e[Ct]=d.current,un(e.nodeType===8?e.parentNode:e),li(function(){Ra(t,d,i,n)}),d}function Oa(e,t,i,n,a){var o=i._reactRootContainer;if(o){var s=o;if(typeof a=="function"){var u=a;a=function(){var d=Aa(s);u.call(d)}}Ra(t,s,e,a)}else s=um(i,t,e,a,n);return Aa(s)}Cr=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var i=Hi(t.pendingLanes);i!==0&&(ao(t,i|1),Ze(t,be()),(K&6)===0&&(zi=be()+500,Gt()))}break;case 13:li(function(){var n=Qt(e,1);if(n!==null){var a=Ne();_t(n,e,1,a)}}),As(e,1)}},oo=function(e){if(e.tag===13){var t=Qt(e,134217728);if(t!==null){var i=Ne();_t(t,e,134217728,i)}As(e,134217728)}},Mr=function(e){if(e.tag===13){var t=Zt(e),i=Qt(e,t);if(i!==null){var n=Ne();_t(i,e,t,n)}As(e,t)}},xr=function(){return ne},Ir=function(e,t){var i=ne;try{return ne=e,t()}finally{ne=i}},Ya=function(e,t,i){switch(t){case"input":if(ja(e,i),t=i.name,i.type==="radio"&&t!=null){for(i=e;i.parentNode;)i=i.parentNode;for(i=i.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<i.length;t++){var n=i[t];if(n!==e&&n.form===e.form){var a=$n(n);if(!a)throw Error(r(90));Ys(n),ja(n,a)}}}break;case"textarea":ir(e,i);break;case"select":t=i.value,t!=null&&hi(e,!!i.multiple,t,!1)}},dr=xs,mr=li;var cm={usingClientEntryPoint:!1,Events:[mn,Ci,$n,ur,cr,xs]},xn={findFiberByHostInstance:ei,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},dm={bundleType:xn.bundleType,version:xn.version,rendererPackageName:xn.rendererPackageName,rendererConfig:xn.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ue.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=gr(e),e===null?null:e.stateNode},findFiberByHostInstance:xn.findFiberByHostInstance||lm,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var za=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!za.isDisabled&&za.supportsFiber)try{Pn=za.inject(dm),bt=za}catch{}}return Xe.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=cm,Xe.createPortal=function(e,t){var i=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Ds(t))throw Error(r(200));return rm(e,t,null,i)},Xe.createRoot=function(e,t){if(!Ds(e))throw Error(r(299));var i=!1,n="",a=ju;return t!=null&&(t.unstable_strictMode===!0&&(i=!0),t.identifierPrefix!==void 0&&(n=t.identifierPrefix),t.onRecoverableError!==void 0&&(a=t.onRecoverableError)),t=Rs(e,1,!1,null,null,i,!1,n,a),e[Ct]=t.current,un(e.nodeType===8?e.parentNode:e),new Ps(t)},Xe.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(r(188)):(e=Object.keys(e).join(","),Error(r(268,e)));return e=gr(t),e=e===null?null:e.stateNode,e},Xe.flushSync=function(e){return li(e)},Xe.hydrate=function(e,t,i){if(!Da(t))throw Error(r(200));return Oa(null,e,t,!0,i)},Xe.hydrateRoot=function(e,t,i){if(!Ds(e))throw Error(r(405));var n=i!=null&&i.hydratedSources||null,a=!1,o="",s=ju;if(i!=null&&(i.unstable_strictMode===!0&&(a=!0),i.identifierPrefix!==void 0&&(o=i.identifierPrefix),i.onRecoverableError!==void 0&&(s=i.onRecoverableError)),t=Nu(t,null,e,1,i??null,a,!1,o,s),e[Ct]=t.current,un(e),n)for(e=0;e<n.length;e++)i=n[e],a=i._getVersion,a=a(i._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[i,a]:t.mutableSourceEagerHydrationData.push(i,a);return new Pa(t)},Xe.render=function(e,t,i){if(!Da(t))throw Error(r(200));return Oa(null,e,t,!1,i)},Xe.unmountComponentAtNode=function(e){if(!Da(e))throw Error(r(40));return e._reactRootContainer?(li(function(){Oa(null,null,e,!1,function(){e._reactRootContainer=null,e[Ct]=null})}),!0):!1},Xe.unstable_batchedUpdates=xs,Xe.unstable_renderSubtreeIntoContainer=function(e,t,i,n){if(!Da(i))throw Error(r(200));if(e==null||e._reactInternals===void 0)throw Error(r(38));return Oa(e,t,i,!1,n)},Xe.version="18.3.1-next-f1338f8080-20240426",Xe}var Ku;function sc(){if(Ku)return Ls.exports;Ku=1;function c(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(c)}catch(l){console.error(l)}}return c(),Ls.exports=bm(),Ls.exports}var $u;function ym(){if($u)return La;$u=1;var c=sc();return La.createRoot=c.createRoot,La.hydrateRoot=c.hydrateRoot,La}var qm=ym();function Rt(c){return Array.isArray?Array.isArray(c):uc(c)==="[object Array]"}function vm(c){if(typeof c=="string")return c;let l=c+"";return l=="0"&&1/c==-1/0?"-0":l}function km(c){return c==null?"":vm(c)}function wt(c){return typeof c=="string"}function rc(c){return typeof c=="number"}function wm(c){return c===!0||c===!1||Cm(c)&&uc(c)=="[object Boolean]"}function lc(c){return typeof c=="object"}function Cm(c){return lc(c)&&c!==null}function it(c){return c!=null}function Ns(c){return!c.trim().length}function uc(c){return c==null?c===void 0?"[object Undefined]":"[object Null]":Object.prototype.toString.call(c)}const Mm="Incorrect 'index' type",xm=c=>`Invalid value for key ${c}`,Im=c=>`Pattern length exceeds max of ${c}.`,Qm=c=>`Missing ${c} property in key`,Sm=c=>`Property 'weight' in key '${c}' must be a positive integer`,ec=Object.prototype.hasOwnProperty;class Bm{constructor(l){this._keys=[],this._keyMap={};let r=0;l.forEach(y=>{let _=cc(y);this._keys.push(_),this._keyMap[_.id]=_,r+=_.weight}),this._keys.forEach(y=>{y.weight/=r})}get(l){return this._keyMap[l]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function cc(c){let l=null,r=null,y=null,_=1,q=null;if(wt(c)||Rt(c))y=c,l=tc(c),r=js(c);else{if(!ec.call(c,"name"))throw new Error(Qm("name"));const v=c.name;if(y=v,ec.call(c,"weight")&&(_=c.weight,_<=0))throw new Error(Sm(v));l=tc(v),r=js(v),q=c.getFn}return{path:l,id:r,weight:_,src:y,getFn:q}}function tc(c){return Rt(c)?c:c.split(".")}function js(c){return Rt(c)?c.join("."):c}function Tm(c,l){let r=[],y=!1;const _=(q,v,I)=>{if(it(q))if(!v[I])r.push(q);else{let M=v[I];const S=q[M];if(!it(S))return;if(I===v.length-1&&(wt(S)||rc(S)||wm(S)))r.push(km(S));else if(Rt(S)){y=!0;for(let R=0,B=S.length;R<B;R+=1)_(S[R],v,I+1)}else v.length&&_(S,v,I+1)}};return _(c,wt(l)?l.split("."):l,0),y?r:r[0]}const Rm={includeMatches:!1,findAllMatches:!1,minMatchCharLength:1},Am={isCaseSensitive:!1,ignoreDiacritics:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(c,l)=>c.score===l.score?c.idx<l.idx?-1:1:c.score<l.score?-1:1},Pm={location:0,threshold:.6,distance:100},Dm={useExtendedSearch:!1,getFn:Tm,ignoreLocation:!1,ignoreFieldNorm:!1,fieldNormWeight:1};var j={...Am,...Rm,...Pm,...Dm};const Om=/[^ ]+/g;function zm(c=1,l=3){const r=new Map,y=Math.pow(10,l);return{get(_){const q=_.match(Om).length;if(r.has(q))return r.get(q);const v=1/Math.pow(q,.5*c),I=parseFloat(Math.round(v*y)/y);return r.set(q,I),I},clear(){r.clear()}}}class Js{constructor({getFn:l=j.getFn,fieldNormWeight:r=j.fieldNormWeight}={}){this.norm=zm(r,3),this.getFn=l,this.isCreated=!1,this.setIndexRecords()}setSources(l=[]){this.docs=l}setIndexRecords(l=[]){this.records=l}setKeys(l=[]){this.keys=l,this._keysMap={},l.forEach((r,y)=>{this._keysMap[r.id]=y})}create(){this.isCreated||!this.docs.length||(this.isCreated=!0,wt(this.docs[0])?this.docs.forEach((l,r)=>{this._addString(l,r)}):this.docs.forEach((l,r)=>{this._addObject(l,r)}),this.norm.clear())}add(l){const r=this.size();wt(l)?this._addString(l,r):this._addObject(l,r)}removeAt(l){this.records.splice(l,1);for(let r=l,y=this.size();r<y;r+=1)this.records[r].i-=1}getValueForItemAtKeyId(l,r){return l[this._keysMap[r]]}size(){return this.records.length}_addString(l,r){if(!it(l)||Ns(l))return;let y={v:l,i:r,n:this.norm.get(l)};this.records.push(y)}_addObject(l,r){let y={i:r,$:{}};this.keys.forEach((_,q)=>{let v=_.getFn?_.getFn(l):this.getFn(l,_.path);if(it(v)){if(Rt(v)){let I=[];const M=[{nestedArrIndex:-1,value:v}];for(;M.length;){const{nestedArrIndex:S,value:R}=M.pop();if(it(R))if(wt(R)&&!Ns(R)){let B={v:R,i:S,n:this.norm.get(R)};I.push(B)}else Rt(R)&&R.forEach((B,A)=>{M.push({nestedArrIndex:A,value:B})})}y.$[q]=I}else if(wt(v)&&!Ns(v)){let I={v,n:this.norm.get(v)};y.$[q]=I}}}),this.records.push(y)}toJSON(){return{keys:this.keys,records:this.records}}}function dc(c,l,{getFn:r=j.getFn,fieldNormWeight:y=j.fieldNormWeight}={}){const _=new Js({getFn:r,fieldNormWeight:y});return _.setKeys(c.map(cc)),_.setSources(l),_.create(),_}function Lm(c,{getFn:l=j.getFn,fieldNormWeight:r=j.fieldNormWeight}={}){const{keys:y,records:_}=c,q=new Js({getFn:l,fieldNormWeight:r});return q.setKeys(y),q.setIndexRecords(_),q}function Ea(c,{errors:l=0,currentLocation:r=0,expectedLocation:y=0,distance:_=j.distance,ignoreLocation:q=j.ignoreLocation}={}){const v=l/c.length;if(q)return v;const I=Math.abs(y-r);return _?v+I/_:I?1:v}function Em(c=[],l=j.minMatchCharLength){let r=[],y=-1,_=-1,q=0;for(let v=c.length;q<v;q+=1){let I=c[q];I&&y===-1?y=q:!I&&y!==-1&&(_=q-1,_-y+1>=l&&r.push([y,_]),y=-1)}return c[q-1]&&q-y>=l&&r.push([y,q-1]),r}const mi=32;function Fm(c,l,r,{location:y=j.location,distance:_=j.distance,threshold:q=j.threshold,findAllMatches:v=j.findAllMatches,minMatchCharLength:I=j.minMatchCharLength,includeMatches:M=j.includeMatches,ignoreLocation:S=j.ignoreLocation}={}){if(l.length>mi)throw new Error(Im(mi));const R=l.length,B=c.length,A=Math.max(0,Math.min(y,B));let U=q,Y=A;const Z=I>1||M,W=Z?Array(B):[];let Me;for(;(Me=c.indexOf(l,Y))>-1;){let ae=Ea(l,{currentLocation:Me,expectedLocation:A,distance:_,ignoreLocation:S});if(U=Math.min(ae,U),Y=Me+R,Z){let _e=0;for(;_e<R;)W[Me+_e]=1,_e+=1}}Y=-1;let qe=[],xe=1,ue=R+B;const Je=1<<R-1;for(let ae=0;ae<R;ae+=1){let _e=0,Be=ue;for(;_e<Be;)Ea(l,{errors:ae,currentLocation:A+Be,expectedLocation:A,distance:_,ignoreLocation:S})<=U?_e=Be:ue=Be,Be=Math.floor((ue-_e)/2+_e);ue=Be;let nt=Math.max(1,A-Be+1),ct=v?B:Math.min(A+Be,B)+R,Te=Array(ct+2);Te[ct+1]=(1<<ae)-1;for(let me=ct;me>=nt;me-=1){let Ee=me-1,Re=r[c.charAt(Ee)];if(Z&&(W[Ee]=+!!Re),Te[me]=(Te[me+1]<<1|1)&Re,ae&&(Te[me]|=(qe[me+1]|qe[me])<<1|1|qe[me+1]),Te[me]&Je&&(xe=Ea(l,{errors:ae,currentLocation:Ee,expectedLocation:A,distance:_,ignoreLocation:S}),xe<=U)){if(U=xe,Y=Ee,Y<=A)break;nt=Math.max(1,2*A-Y)}}if(Ea(l,{errors:ae+1,currentLocation:A,expectedLocation:A,distance:_,ignoreLocation:S})>U)break;qe=Te}const ke={isMatch:Y>=0,score:Math.max(.001,xe)};if(Z){const ae=Em(W,I);ae.length?M&&(ke.indices=ae):ke.isMatch=!1}return ke}function Nm(c){let l={};for(let r=0,y=c.length;r<y;r+=1){const _=c.charAt(r);l[_]=(l[_]||0)|1<<y-r-1}return l}const Fa=String.prototype.normalize?c=>c.normalize("NFD").replace(/[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/g,""):c=>c;class mc{constructor(l,{location:r=j.location,threshold:y=j.threshold,distance:_=j.distance,includeMatches:q=j.includeMatches,findAllMatches:v=j.findAllMatches,minMatchCharLength:I=j.minMatchCharLength,isCaseSensitive:M=j.isCaseSensitive,ignoreDiacritics:S=j.ignoreDiacritics,ignoreLocation:R=j.ignoreLocation}={}){if(this.options={location:r,threshold:y,distance:_,includeMatches:q,findAllMatches:v,minMatchCharLength:I,isCaseSensitive:M,ignoreDiacritics:S,ignoreLocation:R},l=M?l:l.toLowerCase(),l=S?Fa(l):l,this.pattern=l,this.chunks=[],!this.pattern.length)return;const B=(U,Y)=>{this.chunks.push({pattern:U,alphabet:Nm(U),startIndex:Y})},A=this.pattern.length;if(A>mi){let U=0;const Y=A%mi,Z=A-Y;for(;U<Z;)B(this.pattern.substr(U,mi),U),U+=mi;if(Y){const W=A-mi;B(this.pattern.substr(W),W)}}else B(this.pattern,0)}searchIn(l){const{isCaseSensitive:r,ignoreDiacritics:y,includeMatches:_}=this.options;if(l=r?l:l.toLowerCase(),l=y?Fa(l):l,this.pattern===l){let Z={isMatch:!0,score:0};return _&&(Z.indices=[[0,l.length-1]]),Z}const{location:q,distance:v,threshold:I,findAllMatches:M,minMatchCharLength:S,ignoreLocation:R}=this.options;let B=[],A=0,U=!1;this.chunks.forEach(({pattern:Z,alphabet:W,startIndex:Me})=>{const{isMatch:qe,score:xe,indices:ue}=Fm(l,Z,W,{location:q+Me,distance:v,threshold:I,findAllMatches:M,minMatchCharLength:S,includeMatches:_,ignoreLocation:R});qe&&(U=!0),A+=xe,qe&&ue&&(B=[...B,...ue])});let Y={isMatch:U,score:U?A/this.chunks.length:1};return U&&_&&(Y.indices=B),Y}}class Kt{constructor(l){this.pattern=l}static isMultiMatch(l){return ic(l,this.multiRegex)}static isSingleMatch(l){return ic(l,this.singleRegex)}search(){}}function ic(c,l){const r=c.match(l);return r?r[1]:null}class Gm extends Kt{constructor(l){super(l)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(l){const r=l===this.pattern;return{isMatch:r,score:r?0:1,indices:[0,this.pattern.length-1]}}}class jm extends Kt{constructor(l){super(l)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(l){const y=l.indexOf(this.pattern)===-1;return{isMatch:y,score:y?0:1,indices:[0,l.length-1]}}}class Vm extends Kt{constructor(l){super(l)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(l){const r=l.startsWith(this.pattern);return{isMatch:r,score:r?0:1,indices:[0,this.pattern.length-1]}}}class Um extends Kt{constructor(l){super(l)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(l){const r=!l.startsWith(this.pattern);return{isMatch:r,score:r?0:1,indices:[0,l.length-1]}}}class Wm extends Kt{constructor(l){super(l)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(l){const r=l.endsWith(this.pattern);return{isMatch:r,score:r?0:1,indices:[l.length-this.pattern.length,l.length-1]}}}class Hm extends Kt{constructor(l){super(l)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(l){const r=!l.endsWith(this.pattern);return{isMatch:r,score:r?0:1,indices:[0,l.length-1]}}}class pc extends Kt{constructor(l,{location:r=j.location,threshold:y=j.threshold,distance:_=j.distance,includeMatches:q=j.includeMatches,findAllMatches:v=j.findAllMatches,minMatchCharLength:I=j.minMatchCharLength,isCaseSensitive:M=j.isCaseSensitive,ignoreDiacritics:S=j.ignoreDiacritics,ignoreLocation:R=j.ignoreLocation}={}){super(l),this._bitapSearch=new mc(l,{location:r,threshold:y,distance:_,includeMatches:q,findAllMatches:v,minMatchCharLength:I,isCaseSensitive:M,ignoreDiacritics:S,ignoreLocation:R})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(l){return this._bitapSearch.searchIn(l)}}class hc extends Kt{constructor(l){super(l)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(l){let r=0,y;const _=[],q=this.pattern.length;for(;(y=l.indexOf(this.pattern,r))>-1;)r=y+q,_.push([y,r-1]);const v=!!_.length;return{isMatch:v,score:v?0:1,indices:_}}}const Vs=[Gm,hc,Vm,Um,Hm,Wm,jm,pc],nc=Vs.length,Zm=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,Xm="|";function Jm(c,l={}){return c.split(Xm).map(r=>{let y=r.trim().split(Zm).filter(q=>q&&!!q.trim()),_=[];for(let q=0,v=y.length;q<v;q+=1){const I=y[q];let M=!1,S=-1;for(;!M&&++S<nc;){const R=Vs[S];let B=R.isMultiMatch(I);B&&(_.push(new R(B,l)),M=!0)}if(!M)for(S=-1;++S<nc;){const R=Vs[S];let B=R.isSingleMatch(I);if(B){_.push(new R(B,l));break}}}return _})}const Ym=new Set([pc.type,hc.type]);class Km{constructor(l,{isCaseSensitive:r=j.isCaseSensitive,ignoreDiacritics:y=j.ignoreDiacritics,includeMatches:_=j.includeMatches,minMatchCharLength:q=j.minMatchCharLength,ignoreLocation:v=j.ignoreLocation,findAllMatches:I=j.findAllMatches,location:M=j.location,threshold:S=j.threshold,distance:R=j.distance}={}){this.query=null,this.options={isCaseSensitive:r,ignoreDiacritics:y,includeMatches:_,minMatchCharLength:q,findAllMatches:I,ignoreLocation:v,location:M,threshold:S,distance:R},l=r?l:l.toLowerCase(),l=y?Fa(l):l,this.pattern=l,this.query=Jm(this.pattern,this.options)}static condition(l,r){return r.useExtendedSearch}searchIn(l){const r=this.query;if(!r)return{isMatch:!1,score:1};const{includeMatches:y,isCaseSensitive:_,ignoreDiacritics:q}=this.options;l=_?l:l.toLowerCase(),l=q?Fa(l):l;let v=0,I=[],M=0;for(let S=0,R=r.length;S<R;S+=1){const B=r[S];I.length=0,v=0;for(let A=0,U=B.length;A<U;A+=1){const Y=B[A],{isMatch:Z,indices:W,score:Me}=Y.search(l);if(Z){if(v+=1,M+=Me,y){const qe=Y.constructor.type;Ym.has(qe)?I=[...I,...W]:I.push(W)}}else{M=0,v=0,I.length=0;break}}if(v){let A={isMatch:!0,score:M/v};return y&&(A.indices=I),A}}return{isMatch:!1,score:1}}}const Us=[];function $m(...c){Us.push(...c)}function Ws(c,l){for(let r=0,y=Us.length;r<y;r+=1){let _=Us[r];if(_.condition(c,l))return new _(c,l)}return new mc(c,l)}const Na={AND:"$and",OR:"$or"},Hs={PATH:"$path",PATTERN:"$val"},Zs=c=>!!(c[Na.AND]||c[Na.OR]),ep=c=>!!c[Hs.PATH],tp=c=>!Rt(c)&&lc(c)&&!Zs(c),ac=c=>({[Na.AND]:Object.keys(c).map(l=>({[l]:c[l]}))});function fc(c,l,{auto:r=!0}={}){const y=_=>{let q=Object.keys(_);const v=ep(_);if(!v&&q.length>1&&!Zs(_))return y(ac(_));if(tp(_)){const M=v?_[Hs.PATH]:q[0],S=v?_[Hs.PATTERN]:_[M];if(!wt(S))throw new Error(xm(M));const R={keyId:js(M),pattern:S};return r&&(R.searcher=Ws(S,l)),R}let I={children:[],operator:q[0]};return q.forEach(M=>{const S=_[M];Rt(S)&&S.forEach(R=>{I.children.push(y(R))})}),I};return Zs(c)||(c=ac(c)),y(c)}function ip(c,{ignoreFieldNorm:l=j.ignoreFieldNorm}){c.forEach(r=>{let y=1;r.matches.forEach(({key:_,norm:q,score:v})=>{const I=_?_.weight:null;y*=Math.pow(v===0&&I?Number.EPSILON:v,(I||1)*(l?1:q))}),r.score=y})}function np(c,l){const r=c.matches;l.matches=[],it(r)&&r.forEach(y=>{if(!it(y.indices)||!y.indices.length)return;const{indices:_,value:q}=y;let v={indices:_,value:q};y.key&&(v.key=y.key.src),y.idx>-1&&(v.refIndex=y.idx),l.matches.push(v)})}function ap(c,l){l.score=c.score}function op(c,l,{includeMatches:r=j.includeMatches,includeScore:y=j.includeScore}={}){const _=[];return r&&_.push(np),y&&_.push(ap),c.map(q=>{const{idx:v}=q,I={item:l[v],refIndex:v};return _.length&&_.forEach(M=>{M(q,I)}),I})}class Fi{constructor(l,r={},y){this.options={...j,...r},this.options.useExtendedSearch,this._keyStore=new Bm(this.options.keys),this.setCollection(l,y)}setCollection(l,r){if(this._docs=l,r&&!(r instanceof Js))throw new Error(Mm);this._myIndex=r||dc(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}add(l){it(l)&&(this._docs.push(l),this._myIndex.add(l))}remove(l=()=>!1){const r=[];for(let y=0,_=this._docs.length;y<_;y+=1){const q=this._docs[y];l(q,y)&&(this.removeAt(y),y-=1,_-=1,r.push(q))}return r}removeAt(l){this._docs.splice(l,1),this._myIndex.removeAt(l)}getIndex(){return this._myIndex}search(l,{limit:r=-1}={}){const{includeMatches:y,includeScore:_,shouldSort:q,sortFn:v,ignoreFieldNorm:I}=this.options;let M=wt(l)?wt(this._docs[0])?this._searchStringList(l):this._searchObjectList(l):this._searchLogical(l);return ip(M,{ignoreFieldNorm:I}),q&&M.sort(v),rc(r)&&r>-1&&(M=M.slice(0,r)),op(M,this._docs,{includeMatches:y,includeScore:_})}_searchStringList(l){const r=Ws(l,this.options),{records:y}=this._myIndex,_=[];return y.forEach(({v:q,i:v,n:I})=>{if(!it(q))return;const{isMatch:M,score:S,indices:R}=r.searchIn(q);M&&_.push({item:q,idx:v,matches:[{score:S,value:q,norm:I,indices:R}]})}),_}_searchLogical(l){const r=fc(l,this.options),y=(I,M,S)=>{if(!I.children){const{keyId:B,searcher:A}=I,U=this._findMatches({key:this._keyStore.get(B),value:this._myIndex.getValueForItemAtKeyId(M,B),searcher:A});return U&&U.length?[{idx:S,item:M,matches:U}]:[]}const R=[];for(let B=0,A=I.children.length;B<A;B+=1){const U=I.children[B],Y=y(U,M,S);if(Y.length)R.push(...Y);else if(I.operator===Na.AND)return[]}return R},_=this._myIndex.records,q={},v=[];return _.forEach(({$:I,i:M})=>{if(it(I)){let S=y(r,I,M);S.length&&(q[M]||(q[M]={idx:M,item:I,matches:[]},v.push(q[M])),S.forEach(({matches:R})=>{q[M].matches.push(...R)}))}}),v}_searchObjectList(l){const r=Ws(l,this.options),{keys:y,records:_}=this._myIndex,q=[];return _.forEach(({$:v,i:I})=>{if(!it(v))return;let M=[];y.forEach((S,R)=>{M.push(...this._findMatches({key:S,value:v[R],searcher:r}))}),M.length&&q.push({idx:I,item:v,matches:M})}),q}_findMatches({key:l,value:r,searcher:y}){if(!it(r))return[];let _=[];if(Rt(r))r.forEach(({v:q,i:v,n:I})=>{if(!it(q))return;const{isMatch:M,score:S,indices:R}=y.searchIn(q);M&&_.push({score:S,key:l,value:q,idx:v,norm:I,indices:R})});else{const{v:q,n:v}=r,{isMatch:I,score:M,indices:S}=y.searchIn(q);I&&_.push({score:M,key:l,value:q,norm:v,indices:S})}return _}}Fi.version="7.1.0";Fi.createIndex=dc;Fi.parseIndex=Lm;Fi.config=j;Fi.parseQuery=fc;$m(Km);/**
 * @license lucide-react v0.344.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var sp={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.344.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const rp=c=>c.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase().trim(),gc=(c,l)=>{const r=Ge.forwardRef(({color:y="currentColor",size:_=24,strokeWidth:q=2,absoluteStrokeWidth:v,className:I="",children:M,...S},R)=>Ge.createElement("svg",{ref:R,...sp,width:_,height:_,stroke:y,strokeWidth:v?Number(q)*24/Number(_):q,className:["lucide",`lucide-${rp(c)}`,I].join(" "),...S},[...l.map(([B,A])=>Ge.createElement(B,A)),...Array.isArray(M)?M:[M]]));return r.displayName=`${c}`,r};/**
 * @license lucide-react v0.344.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const oc=gc("Search",[["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}],["path",{d:"m21 21-4.3-4.3",key:"1qie3q"}]]);/**
 * @license lucide-react v0.344.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const lp=gc("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]),up=""+new URL("switcher-CaaC6x9B.svg",import.meta.url).href,cp=""+new URL("docs-BGLm6Xpv.svg",import.meta.url).href,dp=""+new URL("academy-DLOT8zSY.svg",import.meta.url).href,mp=""+new URL("resonance-Du6ePxdd.svg",import.meta.url).href,pp=""+new URL("support-rYw0KIxl.svg",import.meta.url).href,hp=()=>{const[c,l]=Ge.useState(!1),r=()=>{l(!c)};return b.jsxs("div",{className:"flex items-center pt-2 w-56 p-0",children:[b.jsx("button",{className:"cursor-pointer p-0 border-none bg-transparent",onClick:r,children:b.jsx("img",{className:"title-image cursor-pointer",alt:"IQM Docs Application Switcher",src:up,height:42,width:222,style:{height:"42px",width:"222px"}})}),c&&b.jsxs("div",{className:"absolute mt-[14em] ml-[0.5em] bg-white w-[208px] rounded-lg p-1 pt-1 z-50 border border-gray-300",children:[b.jsx("div",{children:b.jsx("a",{href:"/","aria-label":"IQM Docs",target:"_blank",children:b.jsx("img",{className:"switcher-title-image hover:filter hover:contrast-[.90]",alt:"IQM Academy",src:cp,height:40,width:200})})}),b.jsx("div",{children:b.jsx("a",{href:"https://academy.meetiqm.com",target:"_blank","aria-label":"IQM Academy",children:b.jsx("img",{className:"switcher-title-image hover:filter hover:contrast-[.90]",alt:"IQM Academy",src:dp,height:40,width:200})})}),b.jsx("div",{children:b.jsx("a",{href:"https://resonance.meetiqm.com",target:"_blank",rel:"noreferrer","aria-label":"IQM Resonance",children:b.jsx("img",{className:"switcher-title-image hover:filter hover:contrast-[.90]",alt:"IQM Resonance",src:mp,height:40,width:200})})}),b.jsx("div",{children:b.jsx("a",{href:"https://support.meetiqm.com",target:"_blank",rel:"noreferrer","aria-label":"IQM Support",children:b.jsx("img",{className:"switcher-title-image hover:filter hover:contrast-[.90]",alt:"IQM Support",src:pp,height:40,width:200})})})]})]})},Gs=JSON.parse(`[{"package":"iqm-pulse","title":"IQM Pulse","url":"/iqm-pulse/index.html","description":"8.9 2025-03-30 IQM Pulse provides an abstraction that transforms high-level quantum circuit operations\\nto a unified set of lower-level instructions for IQM quantum computers. A quantum circuit is an a...","content":"8.9 2025-03-30 IQM Pulse provides an abstraction that transforms high-level quantum circuit operations\\nto a unified set of lower-level instructions for IQM quantum computers. A quantum circuit is an abstract mathematical construct which conveniently hides all implementation\\ndetails such as the timing of microwave pulses, waveform shapes, sampling rates, signal capture, and so on.\\nBut in order to execute a circuit you need to convert it into a schedule of hardware instructions which involve\\nall of the above. IQM Pulse provides a framework for defining abstract quantum gates/operations, as well as their concrete implementations in terms of hardware instructions machinery to easily construct circuit-level gate sequences, and compile them into instruction schedules. a set of ready-made gates with implementations. IQM Pulse is not a standalone tool, but is used in IQM’s client libraries, IQM Pulla and Exa.\\nTo use them effectively, you are encouraged to familiarize yourself with IQM Pulse, especially the most common\\nconcepts. Index Module Index Search Page next Concepts and Classes © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"References","url":"/iqm-pulse/references.html","description":"John M. Martinis and Michael R. Geller. Fast adiabatic qubit gates using only $\\\\sigma _z$ control. Phys. Rev. A , 90:022307, Aug 2014. arXiv:1402.5467 , doi:10.1103/PhysRevA.90.022307 . R. G. Lyons. U...","content":"John M. Martinis and Michael R. Geller. Fast adiabatic qubit gates using only $\\\\sigma _z$ control. Phys. Rev. A , 90:022307, Aug 2014. arXiv:1402.5467 , doi:10.1103/PhysRevA.90.022307 . R. G. Lyons. Understanding Digital Signal Processing . Prentice Hall, 2nd edition, 2004. ISBN 978-0131089891. Cecilia Gisele Jarne. A heuristic approach to obtain signal envelope with a simple software implementation. ANALES AFA , 29(2):51–57, 2018. arXiv:1703.06812 , doi:10.31527/analesafa.2018.29.2.51 . Eyob A. Sete, Nicolas Didier, Angela Q. Chen, Shobhan Kulshreshtha, Riccardo Manenti, and Stefano Poletto. Parametric-resonance entangling gates with a tunable coupler. Phys. Rev. Appl. , 16:024050, Aug 2021. arXiv:2104.03511 , doi:10.1103/PhysRevApplied.16.024050 . Youngkyu Sung, Leon Ding, Jochen Braumüller, Antti Vepsäläinen, Bharath Kannan, Morten Kjaergaard, Ami Greene, Gabriel O. Samach, Chris McNally, David Kim, Alexander Melville, Bethany M. Niedzielski, Mollie E. Schwartz, Jonilyn L. Yoder, Terry P. Orlando, Simon Gustavsson, and William D. Oliver. Realization of high-fidelity CZ and ZZ-free iSWAP gates with a tunable coupler. Phys. Rev. X , 11:021058, Jun 2021. arXiv:2011.01261 , doi:10.1103/PhysRevX.11.021058 . previous Changelog next License © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Custom gate implementations","url":"/iqm-pulse/custom_gates.html","description":"Quantum gates are represented by QuantumOp data classes, containing the required\\nmetadata to define the gate. A QuantumOp is identified by its name , and arity defines number of locus components the o...","content":"Quantum gates are represented by QuantumOp data classes, containing the required\\nmetadata to define the gate. A QuantumOp is identified by its name , and arity defines number of locus components the operation acts on. For example,\\nthe PRX operation (Phased X Rotation) is a single-qubit operation, so its arity is 1, whereas the CZ (Controlled-Z) gate\\nacts on two qubits, having arity 2. Arity 0 has a special meaning that the operation in question can act on any number\\nof components (for example Barrier ). The attribute symmetric defines whether the effect of the quantum operation\\nis symmetric with respect to changing the order of its locus components. As an example, the CZ gate is a symmetric\\ntwo-qubit gate, whereas CNOT (Controlled-NOT) is not symmetric. Some quantum operations are defined as “functions”, taking one or more parameters to define the effect. These\\narguments are stored in the attribute params . As an example, the PRX gate\\ntakes two arguments, angle (the rotation angle with respect to the z-axis of the Bloch sphere), and phase (the rotation phase in the rotating frame). On the other hand, many operations do not require any parameters, in\\nwhich case this field is an empty tuple (e.g. the CZ gate). A QuantumOp has unambiguous definition in terms of its intended effect on the computational subspace of the\\nQPU component, but it can be implemented in various ways. Each implementation is represented as a GateImplementation subclass. A QuantumOp stores its known implementations in the\\nfield implementations . Note that even though QuantumOp is a frozen data class, the implementations dictionary can be modified, e.g.\\nto add new implementations or to change their order (usually programmatically by some client procedure, but nothing as\\nsuch prevents the user from manipulating the contents manually). The default implementation is how the user prefers\\nto implement the operation unless otherwise specified (in effect, this is what will get called in most cases the\\noperation is invoked). In the implementations dict, the default implementation is defined as the first entry.\\nQuantumOp contains helpful methods that allow setting and returning the default implementation for specific cases: set_default_implementation() , get_default_implementation_for_locus() , and set_default_implementation_for_locus() . The attribute unitary stores a function that can be used to get the unitary\\nmatrix representing the quantum operation in question. The unitary function must have the same arguments\\nas defined in params , such that for each collection of these parameters it\\ngives the associated unitary matrix. Note that not all QuantumOps necessarily even represent a unitary gate (e.g.\\nthe measure operation is not one), or the exact form of the unitary matrix might not be known. In these cases, the\\nfield can be left None . The unitary does not need to be defined for most of the basic usage of a QuantumOp, but certain\\nalgorithmic methods (e.g. some implementations of Randomized Benchmarking) may require the unitary matrices to be known,\\nand such operations that do not define the getter function cannot then be used in these contexts. For more information, see the API docs of QuantumOp for the full list of fields needed\\nto define a quantum operation and the available class methods. While QuantumOp represents an abstract quantum operation, its implementations contain\\nthe concrete logic of how to make that operation happen using QC hardware. Gate implementations are subclasses of GateImplementation . In this section, the main features of that class are\\nintroduced (for a full list of class methods see the API docs), with the emphasis being on how to create your own\\ngate implementations. Starting with __init__() , it is important to note that the init\\nmethods of all gate implementations must have the exact same signature: Here, parent is the QuantumOp this gate implementation implements, and name is the implementation’s name in\\nthe dictionary implementations . locus is the set of (usually logical) components\\nthe QuantumOp acts on (the size of the locus must be consistent with the parent ’s arity ), while calibration_data gives the required calibration data values\\nfor this implementation and locus (can be empty in case the implementation needs no calibration data). Finally,\\nThe implementations store a reference to the ScheduleBuilder that created it. This is\\nbecause GateImplementations are practically never created manually by calling the init method itself. Instead, one\\nneeds a builder and uses get_implementation() . The responsibility of the init method is to (at least) store the calibration_data provided from the builder for\\nfurther use, but in many cases, one might want to create some intermediate objects like pulses or instructions from that calibration data already at this point. Note that ScheduleBuilder caches its GateImplementations per each locus and calibration_data , so as long as the calibration is not changed, the code in init will be called just once per locus. GateImplementations are Callables, i.e. they implement the __call__ method. It should take as its arguments at least\\nthe QuantumOpt parameters defined for the parent in params , but in\\naddition it may have optional extra arguments. The call method should return a TimeBox object\\nthat contains the pulses, instructions and other logic required to implement the quantum operation in question. The\\ntypical usage of gate implementations then looks like this (See Using ScheduleBuilder and Pulse timing for more\\ninfo on scheduling and the ScheduleBuilder): The base class __call__() method does automatic TimeBox caching based\\non the unique values of the call arguments, and in many cases, one does not want to reimplement this caching in their own\\nimplementations. For this reason, there is the method _call which contains just the pure TimeBox creation logic.\\nDevelopers can choose to override that instead of __call__ in cases where the call args are hashable python types,\\nand then they can utilize the default caching of TimeBoxes from the base class. When writing a GateImplementation, a developer should consider what parts of the logic should go to the class init and\\nwhat to the __call__ or _call method. A general rule of thumb would be that any parts that can be precomputed\\nand do not depend on the call arguments can go to init, and the rest to call. As an example, let’s go through a simple PRX _call method (note that the default PRX implementations do not\\nuse this exact call method, as this is a simplified example for educational purposes): Here, we first create an IQPulse object which is a low-level Instruction. IQPulse\\nmeans a “complex pulse” which has two orthogonal components i and q – this what drive pulses look like in general. In\\nthis simplified example, we have hardcoded the pulse waveforms into TruncatedGaussian and TruncatedGaussianDerivative for the i and q components, respectively (this is a DRAG implementation, so the\\nq component is the derivative of the i component). The waveforms are parametrized by the calibration_data for the\\ngiven locus (see the next subsection for more info on Waveforms and calibration data). The PRX QuantumOp param angle scales the pulse amplitude linearly (the waveforms are normalized to one), and the param phase defines relative\\nphase modulation. Then the returned TimeBox is created out of the instruction . Note that\\nsince we override _call here, instead of __call__ , so this implementation would utilize the default base class\\ncaching such that the TimeBoxes are cached per unique values of (angle, phase) . Another important concept is a the so called locus mapping of a gate implementation. Locus mappings define on which\\nloci, i.e. groups of components, a given implementation can be defined. They are used to relay the information which\\nloci are supported to a client application (e.g. EXA). In addition, the gate implementation itself can programmatically\\nuse this information self.builder.chip_topology . For example, a PRX can be defined on all single components that are connected to a drive line, and CZ can be defined on\\nconnected pairs of qubits. Locus mappings live in ScheduleBuilder.chip_topology which is a ChipTopology object. Locus mapping is a dict whose keys are the loci\\n( tuple[str, ...] keys denote asymmetric loci where the order of the components matter, and frozenset[str] type\\nloci denote symmetric ones), and the values are groups of components, typed tuple[str, ...] , where each locus can be\\nmapped with some additional components that are needed for the operation of the implementation. For example, some CZ\\nimplementation that tries to correct for crosstalk could map the non-locus components that see this crosstalk here.\\nThe values of the dict can be left empty or just replicate the key components in case such extra information is not\\nneeded. GateImplementations can define their locus mappings via get_custom_locus_mapping() or if a client application already\\nadds the mapping, we can just return its name via get_locus_mapping_name() .\\nIf neither of these methods are overridden in a GateImplementation class, the default behaviour will be such that an arity==1 loci will be assumed to use the mapping where all single qubits are the keys, and arity==2 loci the\\n(symmetric) mapping where the keys are all pairs of connected qubits. For other arities there is no default behaviour,\\nso it is then mandatory to define the mapping explicitly using the aforementioned methods. In order to implement most QuantumOps, one has to physically alter the state of the QPU. This is typically done by playing\\nspecified and correctly calibrated pulses via the control electronics (this applies to all typical logical gates such as\\ne.g. PRX or CZ – non-physcial metaoperations such as Barrier are an exception). In defining these pulses, there are two\\nlevels of abstractions: Waveform and Instruction . Waveform represents the physical form of the control pulse, typically normalized to the interval [-1.0, 1.0] . The\\nEach Waveform subclass can define any number of waveform parameters as class\\nattributes, which can be used to programmatically define the waveform. For example, a Gaussian could be defined in terms\\nof the average mu and spread sigma . A Waveform class then essentially contains just the parameters\\nand a recipe for computing the samples as an np.ndarray . As an example, here is how one writes the Waveform class\\nfor Gaussian : The Instructions RealPulse and IQPulse allow handling the amplitudes (via the attribute scale ) without\\nhaving to resample the waveform for every different amplitude value. However, one can always choose to include\\nthe amplitude into the sampling and then use scale=1 . The waveform parameters (like sigma in the above Gaussian) typically require calibration when the Waveform is used\\nin a quantum gate. However, the GateImplementation usually has other calibrated parameters as well defined in the\\nimplementation itself. As an example, here are the implementation-level parameters of the default PRX implementation,\\ndefined as class attribute: Note the amplitudes are defined here on this level, since the default PRX uses normalized Waveforms and factors in the\\namplitudes via scale . In these parameters, the unit is not just metadata. The control electronics understand time\\nin terms of samples and their sample rate, while human users typically want to input seconds instead of doing the sample\\nconversion manually. For this reason, there is logic that converts anything that has the unit \\"s\\" into samples.\\nSimilarly, parameters with \\"Hz\\" units are converted to 1/sample . For the Waveform parameters, the same logic\\napplies, but by default it is assumed that all parameters are time-like and this converted from seconds to samples.\\nIf some Waveform parameters needs to be made unitless or e.g. frequency-like (with \\"Hz\\" units), it can be achieved\\nwith the method non_timelike_attributes() : In the above dict, the keys should be the attribute names and values their units. To make creating new GateImplementations more comfortable, there are additional base classes on top of GateImplementation itself. CompositeGate allows quick implementation of gates in terms of other gates,\\nusing a similar syntax as with creating/scheduling several TimeBoxes together (see Using ScheduleBuilder ). At it\\nsimplest, a ComposteGate is just the _call method: Here, one could use also builder.get_implementation instead of build() , but the latter allows calibrating the member gates\\ncase specifically for this composite if they are first registered via registered_gates (in this case, there is\\njust one member, PRX). Creating new implementations for the PRX, CZ and Measure gates often means just coming up with new waveforms for the\\ncontrol pulses. If this is the case, there are helpful base classes that make those implementations into oneliners\\n(outside of defining the Waveforms themselves): PRX_CustomWaveforms , FluxPulseGate , and Measure_CustomWaveforms . Using these\\nbase classes at its simplest looks like this: All of these classes automatically include the associated Waveform parameters into the calibration parameters of\\nthe implementation itself. There is also a general base class for any gate that implements a single IQPulse (both PRX_CustomWaveForms and Measure_MyCoolWaveforms actually inherit from it), regardless of the context: CustomIQWaveforms . Gate definitions (i.e. QuantumOps) are stored in ScheduleBuilder ’s attribute op_table . When the builder is created, the op_table comes preloaded with the all the basic QuantumOps needed for\\ntypical circuit execution and their default implementations. These include e.g. the PRX gate, the CZ gate, the measure\\noperation, the conditional prx operation, the reset operation, and the barrier operation. In order to add custom operations, there is a helpful function register_implementation() that\\nin addition to adding new implementations allows one to add altogether new quantum operations. As an example here is a snippet that adds the CNOT gate, and its implementation, into an existing builder: Here, the CNOT implementation MyCNotClass needs to be of course defined first (a QuantumOp always needs at least one\\nimplementation). Note: The end user cannot modify the canonical mapping (defined in iqm-pulse) between implementation_name and implementation_class . Note that often ScheduleBuilder is created and operated by some client application, and the same application usually\\nhas its own interface for adding/manipulating QuantumOps. However, if the user has access to the builder object, the\\nabove method will always work. previous Using ScheduleBuilder next Pulse timing © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Pulse timing","url":"/iqm-pulse/pulse_timing.html","description":"The ReadoutTrigger Instruction responsible of qubit readout has several\\ntiming-related attributes.\\nThe measure.constant gate implementation produces the lower-level ReadoutTrigger instruction\\nfrom a s...","content":"The ReadoutTrigger Instruction responsible of qubit readout has several\\ntiming-related attributes.\\nThe measure.constant gate implementation produces the lower-level ReadoutTrigger instruction\\nfrom a simplified set of settings.\\nThe figure below shows how the settings relate to the more flexible attributes of the instruction. With conditional Instructions, we specify how the information from readout operations should affect Instructions at\\nruntime.\\nUsually, the goal is use the information as soon as possible, but it takes a finite time to propagate from the\\nacquisition unit to the drive channels that execute the Instructions conditionally. Note On all hardware supported by IQM QCCSW, ConditionalInstruction reads the signal bit at the time of\\nexcution, regardless of when the signal bit was last updated.\\nThis means that if the Conditionalinstruction is executed too early, the condition will be executed based on the\\nprevious state of the bit. To facilitate efficient timing of the feedback signals, IQM Pulse uses virtual channels between probeline channels\\n(the source of the signals) and drive channels (the destinations).\\nBlock instructions on the virtual channel represent the travel time of the signals. CCPRX_Composite is GateImplementation of the cc_prx (classically controlled PRX) that outputs two\\nTimeBoxes:\\nthe first one to represent the travel time, and the second one with the actual ConditionalInstruction .\\nIn typical use, both should be scheduled in the same order, to ensure the Conditionalinstrucion starts when the\\nsignal bit is available. The following image illustrates how the TimeBoxes are used for qubits QB2 and QB3 .\\nFor QB2, this is also how Reset_Conditional implements the reset operation. The equaivalent code would be Instructions are spaced out in time only for visual clarity. When scheduled ASAP, they would be left-aligned\\nsuch that the ConditionalInstructions start right after the associated control_delay has passed. The bottom of the image illustrates an alternative use of CCPRX_Composite to have more freedom in the timing.\\nThere, the optional delay TimeBox is not used for scheduling the Instructions on QB4.\\nInstead, the user has ensured that the other instructions take enough time for the signal to arrive.\\nThis could be used to act on the previous feedback signal (not shown). Note This section is not about IQM Pulse itself, but might help in understanding the details of the execution. The image below shows a typical timing of a Playlist segment with 2 AWG devices for driving, and a readout instrument.\\nHere, all statements that apply to an AWG apply to readout instruments as well.\\nThe AWGs can output an arbitrary sequence of pulses, and the readout instrument can additionally read out\\nthe response to the pulses. With readout, the raw signal response from the readout pulse will be integrated to produce a single number, such as a\\ncomplex number or a bit, corresponding to a particular qubit in a particular segment. In the figure, one of the AWGs has been selected as the trigger master, which means it sends trigger pulses to\\nstart the execution on the slave devices.\\nAs shown in the picture, different delays caused by the travel time of signals can be compensated for by\\nadjusting the trigger_delay setting of each device. Settings in the figure that can be adjusted by user in the higher level libraries: Setting Explanation <awg>.trigger_delay Wait time between the end of the trigger signal of the AWG master and the beginning of the pulse sequence. <awg>.trigger_delay (slave) Wait time between receiving the trigger signal at the AWG slave and the beginning of the pulse sequence. options.end_delay Wait time between the end of the pulse segment and the next trigger. <gate>.<implementation>.<locus>.duration The duration of the hardware instruction for a gate, possibly rounded to satisfy granularity constraints.\\nFor the ReadoutTrigger instruction, the meaning is different, see below. Other notes: The AWG spcecified by options.trigger_master is the only channel that does not wait for a trigger\\nat the start of a segment. Slave AWGs may also emit a trigger pulse to allow daisy chaining trigger signals. Systems with IQM Control System are triggered centrally and the channels run independently, and the options.trigger_master has no effect. Pipeline delays are delays between the execution of a command and the pulse actually getting outputted\\nfrom a device. This delay is caused by the hardware and cannot be changed.\\nIn practice, it can be thought as being part of the cable delays, and thus can be compensated with trigger_delay setting. previous Custom gate implementations next API Reference © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Using ScheduleBuilder","url":"/iqm-pulse/using_builder.html","description":"This section describes how to use ScheduleBuilder to compose pulse schedules.\\nScheduleBuilder encapsulates registered QuantumOps, the calibration information for them, QPU components and their\\ntopolog...","content":"This section describes how to use ScheduleBuilder to compose pulse schedules.\\nScheduleBuilder encapsulates registered QuantumOps, the calibration information for them, QPU components and their\\ntopology, and control channel properties. In the context of IQM Pulla and EXA, an instance of ScheduleBuilder is given by the framework,\\nand it contains all the necessary information to execute against a particular quantum computer instance.\\nHere, we assume that user has an instance of ScheduleBuilder builder to work with. A typical workflow begins with calling get_implementation() with the name of a desired QuantumOp and the locus\\nfor the operation.\\nThe locus is the logical target of the operation, usually a sequence of qubits or computational resonators.\\nThis outputs a an instance of GateImplementation , which is capable of producing TimeBoxes with the correct\\ncalibration for that locus. For example, here we ask for the GateImplementation of prx , cz , and measure , all of which are standard\\ngates recognized by IQM Pulse, for qubits QB1 and QB3 .\\nAny gate which is registered in the runtime can be requested this way. Notice how the number of qubits matches the operation: CZ acts on 2 qubits, while PRX acts on only one.\\nMeasure can act on any number of qubits. There might be several available implementations for an operation. get_implementation gives the implementation that is set as the default, unless a specific implementation is\\nrequested with a keyword argument. To instantiate some concrete TimeBoxes, we call time implementation with the logical parameters of the operations, as\\ndefined by the QuantumOps.\\nPRX has 2 parameters: the 2 angles of a phased rotation.\\nCZ does not have any parameters. One important method is the wait() , which blocks the control channels of the given components for a certain time: In all of the examples above, the TimeBoxes are atomic, which can be organized into composite TimeBoxes to decide\\ntheir relative order. TimeBoxes can be concatenated with the following rules: Addition ( + ) concatenates the children of the operands into a single TimeBox.\\nUse addition to allow gates on disjoint loci to execute simultaneously, for example doing a PRX on all qubits. The pipe operation ( | ) groups two TimeBoxes together without concatenating.\\nThis results in composite TimeBox with two children, the operands, which are scheduled separately.\\nUse the pipe to ensure that certain operations execute before some others. Iterables of TimeBoxes are treated as the sum of the elements. This would execute 2 PRX gates on QB1 and QB2 simultaneously: If the last operator was | instead, the second gate on QB2 would execute only after the first 3 gates. Together, these rules provide a handy way of defining complex circuits easily: A TimeBox are made atomic by resolving it using ScheduleBuilder.resolve_timebox() .\\nWhen using a framework like IQM Pulla or Exa, the framework will take care of the resolving as part of compilation,\\nso the user does not need to do it explicitly. TimeBoxes are resolved recursively: The children of a TimeBox are resolved, and resulting (sub-)Schedules are aligned\\naccording to the SchedulingStrategy (ASAP or ALAP) of the TimeBox.\\nThe time duration of a TimeBox is determined by its contents and the way they are scheduled during the resolution.\\nFinally, all channels are padded with Waits so that the total duration of Instructions on every channel is equal.\\nIn other words, the Schedule becomes a “rectangle”. An important part of the scheduling are the blocking rules, that is, whether the contents of two TimeBoxes block or\\nslide past each other.\\nThe rules are: An atomic TimeBox is considered to act on a component if it has instructions on any of the non-virtual channels\\nrelated to that component. A composite TimeBox acts on the union of its children’s locus components. A TimeBox blocks all channels related to any component it acts on. When scheduling two TimeBoxes, the instructions will not overlap in time if the TimeBoxes block overlapping channels. In addition to blocking the channels actually present in a TimeBox, it is possible to block neighbouring channels\\nas well (for example in order to limit cross-talk).\\nThe applied neighbourhood is specified in ScheduleBuilder.resolve_timebox() .\\nThe neighbourhood is defined as an integer such that 0 means “block only the involved channels”,\\n1 means “block the involved channels and the channels of any neighbouring couplers”,\\n2 means “the same as in (1) but in addition block all channels connected by those couplers”, and so on.\\nThe blocking rules do not add actual Wait or Block instructions are added to the neighbourhood channels, and two\\noverlapping neighbourhoods do not block each other.\\nThe blocking comes in question only when actual content would be added to those neighbourhood channels. In practice, the rules and default GateImplementations ensure that the user can concatenate arbitrary gates\\nwithout worrying that the gates have an adverse effect on each other.\\nFor example, the pulse of a PRX gate playing at the same time as a CZ gate or a measurement would ruin both operations.\\nIf overlapping of such gates is desired, the best way is to arrange the Instructions on the Schedule level and wrap the\\nschedule into an atomic TimeBox. Note Virtual channels are special channels that exist only to aid the scheduling algorithm.\\nExamples are tracking the phases of the MOVE gate, and timing of fast feedback.\\nThese channels are removed when the Playlist is finalized. You are encouraged to discover the many features of ScheduleBuilder and TimeBox by reading the\\nAPI: ScheduleBuilder , TimeBox . A quick reference of selected features is provided in the examples below. Finding information about the target system: Working with TimeBoxes: Some typical errors that are easy to make with the syntax: Not calling the implementation to get a TimeBox. The call is easy to forget especially if there are no parameters\\nto give: Giving a single component as locus: previous Concepts and Classes next Custom gate implementations © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"API Reference","url":"/iqm-pulse/API.html","description":"iqm.pulse Control pulses, gates and instruction schedules for quantum computers. previous Pulse timing next pulse © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"iqm.pulse Control pulses, gates and instruction schedules for quantum computers. previous Pulse timing next pulse © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Concepts and Classes","url":"/iqm-pulse/concepts.html","description":"This section gives an overview of the main concepts and terminology in IQM Pulse. QPUs contain components : qubits, computational resonators, couplers, and probelines. Each component may have some con...","content":"This section gives an overview of the main concepts and terminology in IQM Pulse. QPUs contain components : qubits, computational resonators, couplers, and probelines. Each component may have some control channels connected to it. Control channels deliver physical control pulses\\nto the QPU. Quantum operations have a locus , which is the set of quantum information carrying components\\n(qubits and resonators) the operation acts on.\\nOne operation may involve sending pulses to multiple control channels. The assembly of a Playlist, or a batch of quantum circuits, can be summarized as follows: A Playlist contains multiple independent segments , to be executed as a batch. A segment is a conceptual unit at a time scale where the quantum information of the QPU can be\\nassumed to be preserved. A quantum circuit corresponds to one segment. What is executed during a segment is determined by a Schedule . A Schedule is a set of hardware control channels, each with a strictly timed sequence of Instructions . A Schedule is formed by scheduling a Timebox . A TimeBox can contain other TimeBoxes without precise relative timing,\\nor it can be atomic, in which case it contains a single Schedule . The image below illustrates how a Playlist of two segments is formed from TimeBoxes. Hardware instructions are the lowest-level construct visible on the client side.\\nInstructions are a set of atomic, real-time execution commands for the control hardware supported by IQM.\\nThey work in a time scale where the quantum information of the QPU can be assumed to be preserved.\\nExamples of Instructions are IQPulse to play a microwave pulse on a channel, VirtualRZ to adjust the modulation phase, ReadoutTrigger to acquire measurement data,\\nand Wait to delay the next Instruction for a given time.\\nSee iqm.pulse.playlist.instructions for the complete list. During execution, each hardware control channel executes its own sequence of Instructions.\\nEach Instruction blocks the next until it is completed.\\nInstructions are as explicit as possible, so that there is no ambiguity on what will be executed when.\\nIQM Station control transforms Instructions to machine-specific commands. All Instructions have a duration, measured in samples, though the duration can be zero.\\nThe durations are subject to hardware-specific granularity constraints.\\nFor example, some hardware might require all instructions to be a multiple of 16 samples long, with a minimum of 32.\\nInstructions violating the granularity constraints will raise an error.\\nHowever, a typical user does not need to concern themselves about the constraints, as\\nthe gate implementations and IQM Pulse’s scheduling ensures the constraints are respected.\\nThe philosophy is that Station Control, which is inaccessible to the user, does not attempt to do any smart\\n“magic” to fix inconsistencies in the user’s input, it simply executes the Playlist it is given.\\nInstead, the magic happens on the client side so that it is transparent to the user. Note For technical reasons, IQM Pulse mostly uses classes from iqm.pulse.playlist.instructions , but when\\nfinalizing the output, the instructions are converted to iqm.models.playlist.instructions .\\nThese two class families are semantically equivalent, apart from a few exceptions like Block which\\nonly exists on the client side to help with scheduling. Schedule contains a number of control channels, each with a lists of Instructions.\\nAll channels in a Schedule start executing at the same instant, and the timing is defined by the duration of the\\nindividual Instructions.\\nSchedules can be thought of as a fixed block that occupies some interval on a timeline of some channels. Schedules appear in two contexts: gate implementations and as complete segments.\\nFor example, when an implementation of a PRX gate is requested,\\na small Schedule involving the drive channel of a single qubit is created.\\nWhen all the desired gates in a circuit have been scheduled by concatenating the gate-schedules together,\\nthe end result, a segment, is a large Schedule occupying all necessary channels.\\nA typical segment starts with initializing the qubits and ends with reading out their state. Whereas a Schedule is a container with strict relative timing, a TimeBox is a container with undefined\\nrelative timing.\\nEach TimeBox can be labeled using a human-readable label describing it, and operates on a number\\nof locus components , using some of their control channels.\\nA composite TimeBox contains other TimeBoxes as children, whereas atomic TimeBoxes contain a Schedule. TimeBoxes are the main language in which users define the order and relative alignment of execution elements, be it\\ngates, Schedules, or larger TimeBoxes. A key process is the scheduling, in which TimeBoxes are resolved recursively into a fixed Schedule.\\nWhen resolving, all Schedules inside the TimeBox are concatenated and are either left-aligned (ASAP) or right-aligned\\n(ALAP), respecting the hardware constraints.\\nImportantly, if some TimeBoxes have content on disjoint channels, the Schedules are allowed to happen simultaneously.\\nIf they have content on partly overlapping channels, the Schedules are concatenated while preserving their internal\\ntiming.\\nAny interval that does not have explicit instructions is filled with Wait Instructions.\\nThe figure above demonstrates how TimeBoxes are resolved. The syntax and rules are explained in more detail in Using ScheduleBuilder . A higher-level concept, a QuantumOp can represent a unitary quantum gate,\\nor for example a measurement operation (not all QuantumOps necessarily represent a unitary gate).\\nQuantumOps are simple, abstract, self-contained actions one can execute on a station as parts of a quantum circuit.\\nThey include quantum gates like PRX, CZ, and measurements and resets.\\nWhereas Schedules and Instructions act on control channels, QuantumOps act on named components on the QPU, such as\\nqubits or computational resonators. A QuantumOp has unambiguous definition in terms of its intended effect on the computational subspace of the\\nQPU component, but it can be implemented in various ways.\\nEach implementation is represented as a GateImplementation. The list of available QuantumOps at runtime can be obtained with iqm.pulse.builder.build_quantum_ops() .\\nA new QuantumOp can be registered at runtime, together with an implementation, with iqm.pulse.gates.register_implementation() . A GateImplementation bridges the gap between QuantumOps and TimeBoxes.\\nWhen a user requests a QuantumOp from ScheduleBuilder with specific parameters and locus components, the\\nchosen GateImplementation (usually the default) for the operation is used to produce a TimeBox.\\nThis TimeBox, usually atomic, contains a Schedule on the appropriate control channels.\\nThe Instructions within are constructed following the calibration values from the ScheduleBuilder. All gate implementations are listed in iqm.pulse.gates .\\nSection Custom gate implementations explains how to add more implementations. Once all TimeBoxes are scheduled into large Schedules, one for each segment/circuit,\\nthe Schedules are collected into a Playlist .\\nThe Playlist is the final product that is sent to Station Control.\\nIts contents are compressed by indexing all unique Instructions and waveforms on each channel,\\nand representing the control channels in each segment as lists of Instruction indices. During execution, the segments in the Playlist are executed in order, and the whole sequence is repeated\\na number of times equal to the number of repetitions (shots). Segments are separated in time by end delay , a parameter outside the Playlist.\\nA long end delay can be used to prevent quantum information carrying from one segment to the next,\\nthus resetting the qubits.\\nAlternatively, the reset can be encoded in each segment as a long Wait instruction or using some active reset scheme. Station Control aims to execute all segments together, but sometimes this is not possible due to various memory\\nconstraints.\\nIn case the whole Playlist does not fit in memory, the segments are split into chunks which are executed separately.\\nThe delay between chunks is undefined.\\nTherefore, the time between segments is guaranteed to be at least the duration of the end delay, but can be much larger. inspect_playlist() provides a neat visual representation of the playlist, as blocks of instructions on a\\ntimeline. previous IQM Pulse next Using ScheduleBuilder © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"MOVE_CRF_CRF","url":"/iqm-pulse/api/iqm.pulse.gates.move.MOVE_CRF_CRF.html","description":"Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may...","content":"Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of CosineRiseFall Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous iqm.pulse.gates.move.validate_move_instructions next MOVE_CustomWaveforms © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ScheduleBuilder","url":"/iqm-pulse/api/iqm.pulse.builder.ScheduleBuilder.html","description":"Bases: object Builds instruction schedules out of quantum circuits or individual quantum operations. Encapsulates known quantum ops, the calibration information for them, QPU components and their\\ntopo...","content":"Bases: object Builds instruction schedules out of quantum circuits or individual quantum operations. Encapsulates known quantum ops, the calibration information for them, QPU components and their\\ntopology, and controller properties. op_table ( QuantumOpTable ) – definitions of known quantum ops calibration ( OpCalibrationDataTree ) – calibration data tree for the quantum ops chip_topology ( ChipTopology ) – Chip topology derived from the CHAD. channels ( dict [ str , ChannelProperties ] ) – mapping of controller names to the configurations of their channels component_channels ( dict [ str , dict [ str , str ] ] ) – Mapping from QPU component name to a mapping of ('drive', 'flux', 'readout') to the name of the control channel responsible for that function of the component. Module: iqm.pulse.builder Attributes composite_cache Cache for the CompositeGate TimeBoxes. Methods build_playlist Build a playlist from a number of instruction schedules. circuit_to_timebox Convert a quantum circuit to a TimeBox. get_calibration Calibration data for the given quantum operation, implementation and locus. get_control_channels Control channels that directly affect quantum operations at the given locus. get_drive_channel Drive channel for the given QPU component. get_flux_channel Flux channel for the given QPU component. get_implementation Provide an implementation for a quantum operation at a given locus. get_implementation_class Implementation class for the given operation. get_probe_channel Probe line channel for the probe line component belongs to. get_virtual_feedback_channel_for Get virtual feedback channel for feedback to a given AWG from a given probe line. get_virtual_feedback_channels All virtual feedback signal channels for the given QPU component. has_calibration Is there calibration data for the given quantum operation, implementation and locus? inject_calibration Inject new calibration data, changing self.calibration after the ScheduleBuilder initialisation. resolve_timebox Resolve a TimeBox. timebox_to_schedule Convert a TimeBox to a finished instruction schedule, ready for execution. timeboxes_to_front_padded_playlist Temporary helper function, for converting a sequence of TimeBoxes to a Playlist. timeboxes_to_playlist Convert a sequence of TimeBoxes to a Playlist. validate_calibration Check that the calibration data matches the known quantum operations. validate_quantum_circuit Validate a sequence of circuit operations constituting a quantum circuit. wait Utility method for applying Block instructions on every channel of the given locus. Cached GateImplementations. The tree has the same structure as OpCalibrationDataTree. Cache for the CompositeGate TimeBoxes. Flushed whenever ANY calibration data is injected into the builder. self.component_channels mapping inverted cached for scheduling algorithm performance. This mapping is\\nused in the scheduling to determine the components to block based on their associated channels. Only\\nblocking channels are included in this mapping, non-blocking channels (e.g. certain virtual channels) do not\\nblock their components, just themselves. Cache the probe and non-probe channel names for the scheduling algorithm performance Whether to require scheduling of probe instructions in seconds instead of in samples. This can happen for two\\nreasons: 1) the probe channel has a different sampling rate to the other channels (e.g. with UHFQA) or\\n2) the probe channels have a different instruction granularity to some of the other channels (e.g. with\\nmixed stations that have the RO device from a different vendor than some of the AWGs). Cache representative channel properties for a probe and a non-probe channel for the scheduling algorithm\\nperformance. Inject new calibration data, changing self.calibration after the ScheduleBuilder initialisation. Invalidates the gate_implementation cache for the affected operations/implementations/loci. Also invalidates\\nthe cache for any factorizable gate implementation, if any of its locus components was affected. partial_calibration ( dict [ str , dict [ str , dict [ tuple [ str , ... ] | None , dict [ str , Any ] ] ] ] ) – data to be injected. Must have the same structure as self.calibration but does not\\nhave to contain all operations/implementations/loci/values. Only the parts of the data that are\\nfound will be merged into self.calibration (including any None values). self._cache will\\nbe invalidated for the found operations/implementations/loci and only if the new calibration data\\nactually differs from the previous. None Check that the calibration data matches the known quantum operations. ValueError – there is something wrong with the calibration data None Drive channel for the given QPU component. component ( str ) – name of a QPU component Name of the drive channel for component , if it exists. KeyError – if component does not exist or does not have a drive channel str Flux channel for the given QPU component. See get_drive_channel() . component ( str ) – str Probe line channel for the probe line component belongs to. See get_drive_channel() . component ( str ) – str All virtual feedback signal channels for the given QPU component. A virtual feedback channel between a source and a destination exists if the station configuration allows it. component can be either the source or the destination of the signal. component ( str ) – name of a QPU component Names of the virtual channels. list [ str ] Get virtual feedback channel for feedback to a given AWG from a given probe line. awg_name ( str ) – name of the awg node that receives the feedback bit. feedback_qubit ( str ) – which qubit’s measurement resulted in the feedback bit The virtual feedback channel name. ValueError – if the given AWG does not support fast feedback from the given probe line. str Control channel name for the given QPU component and operation. name of the channel KeyError – if component does not exist or does not have the operation component ( str ) – operation ( str ) – str Is there calibration data for the given quantum operation, implementation and locus? op_name ( str ) – name of the quantum operation impl_name ( str ) – name of the implementation locus ( tuple [ str , ... ] ) – locus of the operation True iff requested calibration data was found bool Calibration data for the given quantum operation, implementation and locus. op_name ( str ) – name of the quantum operation impl_name ( str ) – name of the implementation locus ( tuple [ str , ... ] ) – locus of the operation requested calibration data ValueError – requested calibration data was not found dict [ str , Any ] Control channels that directly affect quantum operations at the given locus. Includes the probe, drive and flux channels of the locus QPU components.\\nDoes not include e.g. any neighboring coupler channels, these will have to be added\\nseparately in the TimeBox resolution phase. Will only return channels that are known to exist, i.e. are found in ScheduleBuilder.channels . locus ( Iterable [ str ] ) – locus on which the operation acts names of the control channels that directly affect the operation tuple [ str , …] Utility method for applying Block instructions on every channel of the given locus. The Block instructions guarantee the locus components to idle for the given duration,\\nand cannot e.g. be replaced with e.g. dynamical decoupling sequences.\\nThey are treated the same as any other TimeBox contents: Blocks on different channels remain aligned in time during scheduling. The actual waiting time on a particular channel may thus be >= duration ,\\nif the other channels have less non-blocking space on either side. Note TODO For now, this method can round duration to the nearest value allowed by each\\nchannel if requested. This is for the benefit of EXA sweeping over waiting durations.\\nIn the future, EXA sweep generation should be responsible for doing the rounding. locus ( Iterable [ str ] ) – locus components that should experience the wait duration ( float ) – how long to wait (in seconds) rounding ( bool ) – Iff True, for each channel separately, duration will be rounded to the\\nnearest value allowed by the granularity of that channel. The Waits will start\\nsimultaneously. box containing Block instructions on every control channel of locus TimeBox Provide an implementation for a quantum operation at a given locus. op_name ( str ) – name of the quantum operation locus ( Iterable [ str ] ) – locus of the operation impl_name ( str | None ) – name of the implementation ( None means the implementation is chosen automatically\\nusing the logic described below) strict_locus ( bool ) – iff False, for non-symmetric implementations of symmetric ops the locus order may\\nbe changed if no calibration data is available for the requested locus order use_priority_order ( bool ) – Only has an effect if impl_name is None . Iff False , QuantumOp.get_default_implementation_for_locus() is used. Otherwise, the first implementation in\\nthe priority order that has calibration data for locus is chosen. The priority order is as follows:\\n1. The locus-specific priority defined in QuantumOp.defaults_for_locus[locus] if any.\\n2. The global priority order defined in QuantumOp.implementations . priority_calibration ( dict [ str , Any ] | None ) – Calibration data from which to load the calibration instead of the common calibration\\ndata in calibration . If no calibration is found for the given implementation or priority_calibration is None , the common calibration is used. Any non-empty\\nvalues found in priority_calibration will be merged to the common calibration. Note:\\nusing priority_calibration will prevent saving/loading via the cache. requested implementation ValueError – requested implementation could not be provided GateImplementation Find an implementation and locus for the given quantum operation instance compatible\\nwith the calibration data. op ( QuantumOp ) – quantum operation impl_name ( str | None ) – Name of the implementation. None means use the highest-priority implementation for\\nwhich we have calibration data. locus ( tuple [ str , ... ] ) – locus of the operation strict_locus ( bool ) – iff False, for non-symmetric implementations of symmetric ops the locus order may\\nbe changed to an equivalent one if no calibration data is available for the requested locus order chosen implementation name, locus ValueError – requested implementation could not be found ValueError – requested implementation had no calibration data for this locus ValueError – no specific implementation was requested, but no known implementation had\\n    calibration data for this locus tuple [ str , tuple [ str , …]] Build a factory class for the given quantum operation, implementation and locus. The GateImplementations are built when they are first requested, and cached for later use. op ( QuantumOp ) – quantum operation impl_name ( str | None ) – Name of the implementation. None means use the highest-priority implementation for\\nwhich we have calibration data. locus ( tuple [ str , ... ] ) – locus of the operation strict_locus ( bool ) – iff False, for non-symmetric implementations of symmetric ops the locus order may\\nbe changed if no calibration data is available for the requested locus order priority_calibration ( dict [ str , Any ] | None ) – Calibration data from which to load the calibration instead of the common\\ncalibration data. Priority calibration should be either a dict of the type OILCalibrationData ,\\ni.e. containing the operation name, implementation name, and locus, or just a dict containing\\nthe calibration data for the locus implied by the args op , impl_name and locus . requested implementation ValueError – requested implementation could not be provided or had no calibration data for this locus GateImplementation Implementation class for the given operation. op_name ( str ) – name of the quantum operation impl_name ( str | None ) – name of the implementation ( None means use the default implementation) requested implementation class type [ GateImplementation ] Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) – quantum circuit to be validated require_measurements ( bool ) – iff True the circuit must include at least one measurement operation ValueError – operations do not constitute a valid quantum circuit None Convert a quantum circuit to a TimeBox. circuit ( Iterable [ CircuitOperation ] ) – quantum circuit name ( str ) – name of the circuit scheduling_algorithm ( SchedulingAlgorithm ) – scheduling algorithm to be used in resolving the TimeBoxes. locus_mapping ( dict [ str , str ] | None ) – optional mapping of placeholder component names to the physical component names used\\nwhile resolving the circuit into a TimeBox. unresolved TimeBox that implements circuit TimeBox Temporary helper function, for converting a sequence of TimeBoxes to a Playlist. Each individual TimeBox in boxes is resolved into a Schedule, and then\\neach schedules is front-padded with Wait instructions on each channel\\nsuch that the resulting Schedules have equal durations. This is required since\\nfor now in Station Control the delay before the final measurement is the same for\\nall the Schedules in a Playlist, and we do not wish to lose coherence waiting for\\nthe measurement after each Schedule is done. TODO Once Station Control can handle measurements better, this method should be removed,\\nand timeboxes_to_playlist() be used instead. boxes ( Iterable [ TimeBox ] ) – TimeBoxes to include in the playlist neighborhood ( int ) – During scheduling, block neighboring channels of the used components this far. By default,\\nblocks only the defined locus components and any other components which have occupied channels. playlist that implements boxes Playlist Convert a sequence of TimeBoxes to a Playlist. Resolves the boxes, converts them to Schedules, removes unnecessary channels, and then packs\\nthe Schedules into a Playlist. Assumes all the TimeBoxes refer to the same QPU and its control channels. boxes ( Iterable [ TimeBox ] ) – TimeBoxes to include in the playlist neighborhood ( int ) – During scheduling, block neighboring channels of the used components this far.\\nThe default value ensures that quantum operations work as intended, assuming the station\\nis properly calibrated. Higher values may help defend against crosstalk, at the expense\\nof a longer instruction schedule and thus more decoherence. playlist that implements boxes Playlist Convert a TimeBox to a finished instruction schedule, ready for execution. Resolves the box, then converts the durations of the instructions in the schedule to samples\\nat the channel sample_rate. box ( TimeBox ) – TimeBox to resolve neighborhood ( int ) – During scheduling, block neighboring channels of the used components this far.\\nThe default value ensures that quantum operations work as intended, assuming the station\\nis properly calibrated. Higher values may help defend against crosstalk, at the expense\\nof a longer instruction schedule and thus more decoherence. finished schedule that implements box Schedule Finishes the instruction schedule. filters out zero-duration Blocks and Waits converts all spacer instructions used during scheduling to Waits merges consequent Waits removes channels that only have Waits in them This should be the final step of the schedule building process, after this the\\nresulting Schedule can no longer be consistently extended with another (since\\nall the spacer instructions are gone). schedule ( Schedule ) – schedule to finish finished copy of schedule Schedule Fuse long-distance (i.e. out-of-gate-locus) VirtualRZ corrections with the next drive pulse\\nhappening after the FluxPulse they are correcting. schedule ( Schedule ) – Schedule Resolve a TimeBox. Resolves recursively each of the children of the box, and then concatenates the resulting\\nSchedules into a new one using a specific scheduling strategy and algorithm. The supported algorithms are HARD_BOUNDARY , which treats each composite TimeBox as a solid rectangle (the\\nlongest channel within defines the duration) and TETRIS , which packs the schedule as tightly as possible\\n(solid instructions still cannot overlap) regardless of the TimeBox boundaries. Modifies box so that it becomes atomic, if it isn’t already. box ( TimeBox ) – TimeBox to resolve neighborhood ( int ) – During scheduling, block control channels of neighboring QPU components this far\\nfrom the locus. Values higher than 0 may help defend against crosstalk, at the expense\\nof a longer instruction schedule and thus more decoherence. compute_neighborhood_hard_boundary ( bool ) – Whether to precompute the neighborhood components while resolving\\na composite TimeBox in the HARD_BOUNDARY algorithm. Typically one does not want to do this on\\nthe top layer composite TimeBox , since it would be unused. The algorithm sets this True on\\nlower layers, where it improves the performance as the neighborhood components are needed in scheduling. instruction schedule that implements box Schedule Resolves a TimeBox using the HARD_BOUNDARY algorithm, which treats each composite TimeBox as a solid\\nrectangle (the longest channel within defines the duration). box ( TimeBox ) – neighborhood ( int ) – compute_neighborhood ( bool ) – Schedule Computes and caches the blocking neighborhoods for HARD_BOUNDARY algorithm. box ( TimeBox ) – Atomic TimeBox whose neighborhood to compute. neighborhood ( int ) – Return QPU components this far from the locus. QPU components (plus maybe channels?) belonging the the given neighborhood of box . set [ str ] Resolves a TimeBox using the TETRIS algorithm, which packs the schedule as tightly as possible\\n(solid instructions still cannot overlap) regardless of the TimeBox boundaries. box ( TimeBox ) – neighborhood ( int ) – Schedule Add additional blocked channels to the schedule, preventing their use during the schedule. In the idealized computational model we assume that in a (correctly calibrated) quantum computer\\nthere is no effective interaction between QPU components (in the computational frame and subspace) while\\na Wait instruction is acting on the flux channel of the coupler connecting those components\\n(i.e., the coupler is idling).\\nHence a QPU component experiences no effective evolution if Wait instructions are\\nacting on its drive, flux and probe channels, and the flux channels of all its couplers. Of course, in reality the QPU will experience at least some decoherence during a Wait, and\\npossibly some crosstalk.\\nIn some applications, e.g. decoherence experiments, it is essential to Wait for a specific time,\\nsince it’s precisely the decoherence that we are interested in. However, if we are only interested in applying well-defined local quantum operations on specific\\nloci, it is essential to shut down all unwanted dynamics by adding Block instructions on\\ncontrol channels of the unused and neighboring channels.\\nThey act like Waits (and are converted into Waits at the end of the scheduling), but are allowed\\nto overlap in time, since we are only interested in blocking those channels for the duration of the\\nquantum operation. schedule ( Schedule ) – instruction schedule to modify locus ( set [ str ] ) – information-carrying QPU components schedule is meant to operate on (does not include couplers) neighborhood ( int ) – How far should we block neighboring QPU components?\\nZero means just the locus qubits, one means neighboring couplers, two means their neighboring\\nqubits etc. schedule , with added Block instructions on all the neighbor channels,\\nfor the duration of the schedule None Build a playlist from a number of instruction schedules. This involves compressing the schedules so that no duplicate information\\nneeds to be transferred to Station Control. All virtual channels are dropped at this point. schedules ( Iterable [ Schedule ] ) – finished instruction schedules to include in the playlist finish_schedules ( bool ) – whether to finalise the schedules before building the playlist. Should be set True unless some process has already finalised them before calling this function. playlist containing the schedules ValueError – if the schedules contain channels with non-uniform sampling rates Playlist Create shortcut for self.get_implementation(<op_name>, …) as self.<op_name>(…) . If there is a name collision with another attribute in self , the shortcut method won’t be added and\\na warning is raised. op_name ( str ) – None previous CircuitOperation next circuit_operations © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CZ_Slepian_ACStarkCRF","url":"/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian_ACStarkCRF.html","description":"Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a slepian flux pulse for the coupler and a modulated cosine rise fall (CRF) AC Stark\\npulse on one qu...","content":"Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a slepian flux pulse for the coupler and a modulated cosine rise fall (CRF) AC Stark\\npulse on one qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of Slepian Required calibration data, may be nested alias of ModulatedCosineRiseFall True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian next CZ_Slepian_CRF © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.u.get_unitary_u","url":"/iqm-pulse/api/iqm.pulse.gates.u.get_unitary_u.html","description":"Unitary for an SU(2) gate. See iqm.pulse.gates.u for the definition of the gate parameters. theta ( float ) – y rotation angle phi ( float ) – z rotation angle lam ( float ) – another z rotation angle...","content":"Unitary for an SU(2) gate. See iqm.pulse.gates.u for the definition of the gate parameters. theta ( float ) – y rotation angle phi ( float ) – z rotation angle lam ( float ) – another z rotation angle 2x2 unitary representing u(theta, phi, lam) . ndarray previous u next UGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"FluxPulseGate","url":"/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate.html","description":"Bases: GateImplementation Discrete two locus component gate implemented using flux pulses, virtual RZs,\\nand the interaction mediated by the coupler. Does not take any parameters since it is discrete. ...","content":"Bases: GateImplementation Discrete two locus component gate implemented using flux pulses, virtual RZs,\\nand the interaction mediated by the coupler. Does not take any parameters since it is discrete. The two locus components of the gate must be coupled by a tunable coupler. Consists of a flux pulse for the coupler, and possibly another one for the first locus component,\\nassumed to be a qubit, both with arbitrary waveforms, and virtual RZs on both components.\\nInherit from this class and assign\\nwaveforms to the coupler_wave and qubit_wave pulse slots to create a specific implementation. Can be used as a base class for both CZ and MOVE gate implementations. Note: the coupler and qubit pulses typically have the same duration (given in the calibration data), and in the\\nspecial case of the duration being zero, the gate implementation will apply Block(0) instructions\\nto all the channels where it would otherwise apply flux pulses or virtual z rotations. flux_pulses – mapping from flux channel name to its flux pulse rz – mapping from drive channel name to the virtual z rotation angle, in radians, that should be performed on it parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Module: iqm.pulse.gates.cz Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters Parameters shared by all FluxPulseGate classes. coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. Flux pulse Waveform to be played in the coupler flux AWG. Flux pulse Waveform to be played in the qubit flux AWG. Parameters shared by all FluxPulseGate classes. Inheriting classes may override this if there’s\\na need for additional calibration parameters. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \\"<operation_name>.<implementation_name>\\" . Inheriting classes may\\noverride this for different behaviour. operation_name ( str ) – name of the quantum operation. implementation_name ( str ) – name of the implementation name of the locus mapping str previous CouplerFluxPulseQubitACStarkPulseGate next FluxPulseGate_CRF_CRF © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"MOVE_TGSS_CRF","url":"/iqm-pulse/api/iqm.pulse.gates.move.MOVE_TGSS_CRF.html","description":"Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the\\nCRF waveform for the qubit flux pulse. Module: iqm.pulse.gates.move Attributes paramete...","content":"Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the\\nCRF waveform for the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous MOVE_CustomWaveforms next MoveMarker © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"gates","url":"/iqm-pulse/api/iqm.pulse.gates.html","description":"Implementations of quantum gates. The GateImplementation subclasses in this subpackage construct TimeBox instances to\\nimplement specific native gates, using the calibration data that the class has bee...","content":"Implementations of quantum gates. The GateImplementation subclasses in this subpackage construct TimeBox instances to\\nimplement specific native gates, using the calibration data that the class has been initialized with.\\nEach GateImplementation instance encapsulates the calibration data for a specific implementation of a specific\\nnative gate acting on a specific locus. Several different implementations and calibration schemes can be supported for a given gate,\\neach represented by its own GateImplementation subclass.\\nLikewise, a single GateImplementation subclass can be sometimes used to implement several different gates\\nthrough different calibration data. Full path: iqm.pulse.gates Functions expose_implementation (implementation[, ...]) Add the given gate implementation to the list of known implementations. get_implementation_class (class_name) Get gate implementation class by class name. register_implementation (operations, ...[, ...]) Register a new gate implementation, and a new gate (operation) if needed. Subpackages and modules barrier Barrier metaoperation. conditional Classically controlled gates. cz Two-qubit controlled-Z (CZ) gate. default_gates This file defines the default quantum gates and operations for IQM's pulse control system delay Force a delay between instructions on the control channels of specific locus components. enums Enumerations for representing a set of important one- and two-qubit gates. flux_multiplexer GateImplementation for correcting flux crosstalk for a given set of flux-pulse TimeBoxes measure Projective measurement in the Z basis. move Two-qubit MOVE gate. prx Single-qubit PRX gate. reset Resetting qubits to the zero state. rz Single-qubit RZ gate. sx Single-qubit sqrt(X) gate. u Single-qubit SU(2) gate. previous SinglePulseGate next iqm.pulse.gates.expose_implementation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.expose_implementation","url":"/iqm-pulse/api/iqm.pulse.gates.expose_implementation.html","description":"Add the given gate implementation to the list of known implementations. implementation ( type [ GateImplementation ] ) – GateImplementation to add so that it can be found with get_implementation_class...","content":"Add the given gate implementation to the list of known implementations. implementation ( type [ GateImplementation ] ) – GateImplementation to add so that it can be found with get_implementation_class() . overwrite ( bool ) – If True, does not raise an error if implementation already exists. None previous gates next iqm.pulse.gates.get_implementation_class © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ModulatedCosineRiseFall","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.ModulatedCosineRiseFall.html","description":"Bases: Waveform Modulated Cosine Rise Fall waveform. This waveform takes the waveform CosineRiseFall and modulates it with a cosine signal\\nwhich then has parameters frequency and phase , additional to...","content":"Bases: Waveform Modulated Cosine Rise Fall waveform. This waveform takes the waveform CosineRiseFall and modulates it with a cosine signal\\nwhich then has parameters frequency and phase , additional to the parameters full_width , rise_time , and center_offset , see description of TruncatedGaussianSmoothedSquare for\\nfurther details. full_width ( float ) – Full width of the pulse, >= 2 * rise_time . rise_time ( float ) – Duration of the sinusoidal rise (and fall) part of the waveform, >= 0. modulation_frequency ( float ) – Modulation frequency. phase ( float ) – Phase of the modulation. center_offset ( float ) – The waveform is centered around this sampling window coordinate.\\nIf zero, the pulse is placed in the middle of the sampling window. n_samples ( int ) – Module: iqm.pulse.playlist.waveforms Attributes center_offset  modulation_frequency  phase  full_width  rise_time  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords ( ndarray ) – coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\\nBy default all the waveform attributes are “timelike” (the unit for their calibration data is s).\\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\\nconsisting of multiple terms, or frequency-like (calibration data has the unit ‘Hz’).\\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\\nwindow duration. dict [ str , str ] previous CosineRiseFallDerivative next Slepian © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.flux_multiplexer.TOLERANCE","url":"/iqm-pulse/api/iqm.pulse.gates.flux_multiplexer.TOLERANCE.html","description":"Tolerance for the maximum absolute value in a waveform for considering it to be uniformly zero. previous flux_multiplexer next FluxMultiplexer_SampleLinear © Copyright 2019-2025, IQM Finland Oy. Last ...","content":"Tolerance for the maximum absolute value in a waveform for considering it to be uniformly zero. previous flux_multiplexer next FluxMultiplexer_SampleLinear © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING.html","description":"Locus mapping name for mapping all probe lines. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING next iqm.pulse.gate_implementation.get_waveform_parameters © Copyri...","content":"Locus mapping name for mapping all probe lines. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING next iqm.pulse.gate_implementation.get_waveform_parameters © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"SXGate","url":"/iqm-pulse/api/iqm.pulse.gates.sx.SXGate.html","description":"Bases: CompositeGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Module: iqm.pulse.gates.sx Attributes registered_gates Gates that can be calibrated separately from thei...","content":"Bases: CompositeGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Module: iqm.pulse.gates.sx Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\\nalso be constructed via self.builder , but these will always use the common calibration. Call PRX gate with angle equals to pi / 2. TimeBox previous sx next u © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"schedule","url":"/iqm-pulse/api/iqm.pulse.playlist.schedule.html","description":"Instruction schedules for controlling the instruments. Full path: iqm.pulse.playlist.schedule Module Attributes TOLERANCE remove when COMP-1281 is done. Classes Nothing Used to extend a control channe...","content":"Instruction schedules for controlling the instruments. Full path: iqm.pulse.playlist.schedule Module Attributes TOLERANCE remove when COMP-1281 is done. Classes Nothing Used to extend a control channel in time, without blocking it, during scheduling. Schedule Set of synchronously executed AWG/readout programs that start on a single trigger. Segment Sequence of instructions, for a single channel. Inheritance previous playlist next iqm.pulse.playlist.schedule.TOLERANCE © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Wait","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.Wait.html","description":"Bases: Instruction Behave as if outputting zero-valued samples for the duration of the instruction. Used to idle QPU components. However, may be replaced with a dynamical decoupling sequence\\nafter the...","content":"Bases: Instruction Behave as if outputting zero-valued samples for the duration of the instruction. Used to idle QPU components. However, may be replaced with a dynamical decoupling sequence\\nafter the scheduling step. If you want to make sure that this does not happen, use Block instead. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods duration ( int ) – previous VirtualRZ next playlist © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"SchedulingAlgorithm","url":"/iqm-pulse/api/iqm.pulse.timebox.SchedulingAlgorithm.html","description":"Bases: Enum Algorithms for resolving composite TimeBoxes into atomic ones. Module: iqm.pulse.timebox Attributes HARD_BOUNDARY Respects the TimeBox boundary such that the longest channel with a box def...","content":"Bases: Enum Algorithms for resolving composite TimeBoxes into atomic ones. Module: iqm.pulse.timebox Attributes HARD_BOUNDARY Respects the TimeBox boundary such that the longest channel with a box defines its boundary and all other channels are padded to this length (using the specified SchedulingStrategy ). TETRIS Will pack the schedule as tightly as possible while respecting the defined scheduling neighborhood. Methods Respects the TimeBox boundary such that the longest channel with a box defines\\nits boundary and all other channels are padded to this length (using the specified SchedulingStrategy ). Will pack the schedule as tightly as possible while respecting the defined scheduling neighborhood. previous MultiplexedProbeTimeBox next SchedulingStrategy © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CustomIQWaveforms","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.CustomIQWaveforms.html","description":"Bases: GateImplementation Base class for GateImplementations using custom waveform definition with IQPulses. The class contains logic for automatic gate calibration parameters handling for such gates ...","content":"Bases: GateImplementation Base class for GateImplementations using custom waveform definition with IQPulses. The class contains logic for automatic gate calibration parameters handling for such gates (see the class\\nattributes for more info). With given Waveform waveform definitions Something and SomethingElse ,\\nan inheriting class may define the waveforms for the I and Q channels like this: class MyGate(CustomIQWaveforms, i_wave=Something, q_wave=SomethingElse) . Module: iqm.pulse.gate_implementation Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Waveform for the I channel. Waveform for the Q channel. If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\\nto all such implementations. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). previous CompositeGate next GateImplementation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Constant_PRX_with_smooth_rise_fall","url":"/iqm-pulse/api/iqm.pulse.gates.prx.Constant_PRX_with_smooth_rise_fall.html","description":"Bases: ABC_Constant_smooth Constant PRX pulse with cosine rise and fall padding.\\nImplemented as a 3-instruction Schedule. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm....","content":"Bases: ABC_Constant_smooth Constant PRX pulse with cosine rise and fall padding.\\nImplemented as a 3-instruction Schedule. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.prx Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of CosineFall alias of Constant Required calibration data, may be nested alias of CosineRise True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous ABC_Constant_smooth next PRX_CustomWaveforms © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING.html","description":"Locus mapping name for mapping all components that have the readout operation defined. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING next iqm.pulse.gate_implementat...","content":"Locus mapping name for mapping all components that have the readout operation defined. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CosineFall","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.CosineFall.html","description":"Bases: Waveform Cosine Rise waveform. This waveform assumes that during its duration, the only thing occurring is signal falling to 0.\\nThe waveform is made for pairing with ‘Constant’ waveform to enab...","content":"Bases: Waveform Cosine Rise waveform. This waveform assumes that during its duration, the only thing occurring is signal falling to 0.\\nThe waveform is made for pairing with ‘Constant’ waveform to enable arbitrarily long pulses with smooth fall part.\\nThe fall time is equal to pulse duration. Module: iqm.pulse.playlist.waveforms Attributes n_samples Requested number of samples for the waveform. Methods n_samples ( int ) – Actually samples the waveform. sample_coords ( ndarray ) – coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous Cosine next CosineRise © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.validation.validate_instruction_and_wf_length","url":"/iqm-pulse/api/iqm.pulse.validation.validate_instruction_and_wf_length.html","description":"Validate that instruction and waveform lengths match instruction ( Instruction ) – The IQPulse or RealPulse to be validated previous iqm.pulse.validation.validate_channel next iqm.pulse.validation.val...","content":"Validate that instruction and waveform lengths match instruction ( Instruction ) – The IQPulse or RealPulse to be validated previous iqm.pulse.validation.validate_channel next iqm.pulse.validation.validate_playlist_compatibility © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.base_utils.merge_dicts","url":"/iqm-pulse/api/iqm.pulse.base_utils.merge_dicts.html","description":"Merge two dictionaries recursively, leaving the originals unchanged. A ( dict ) – dictionary B ( dict ) – another dictionary merge_nones ( bool ) – whether to also merge None and empty Sized values fr...","content":"Merge two dictionaries recursively, leaving the originals unchanged. A ( dict ) – dictionary B ( dict ) – another dictionary merge_nones ( bool ) – whether to also merge None and empty Sized values from B to A. copy of A, with the contents of B merged in (and taking precedence) recursively dict previous base_utils next builder © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.circuit_operations.reorder","url":"/iqm-pulse/api/iqm.pulse.circuit_operations.reorder.html","description":"Permutes the order of the qubits in an n-qubit operator matrix. A ( ndarray ) – Matrix of an operator acting on the state space of n qubits, to be reordered. perm ( list [ int ] ) – Permutation vector...","content":"Permutes the order of the qubits in an n-qubit operator matrix. A ( ndarray ) – Matrix of an operator acting on the state space of n qubits, to be reordered. perm ( list [ int ] ) – Permutation vector for the n qubits. perm[k] is the new index for the k:th qubit in the old ordering.\\nFor example, reorder(kron(A, B, C)), [2, 0, 1]) == kron(B, C, A) . Reordered A . ndarray previous iqm.pulse.circuit_operations.get_unitary_from_op next iqm.pulse.circuit_operations.reshape_unitary © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ChirpImag","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.ChirpImag.html","description":"Bases: Chirp Imaginary part of the linear chirp, which sets the phase to $-pi/2$. n_samples ( int ) – freq_start ( float ) – freq_stop ( float ) – alpha ( float ) – phase ( float ) – Phase of the puls...","content":"Bases: Chirp Imaginary part of the linear chirp, which sets the phase to $-pi/2$. n_samples ( int ) – freq_start ( float ) – freq_stop ( float ) – alpha ( float ) – phase ( float ) – Phase of the pulse. Defaults to $pi/2$ float Module: iqm.pulse.playlist.waveforms Attributes phase  freq_start  freq_stop  n_samples Requested number of samples for the waveform. Methods previous Chirp next Cosine © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"MoveMarker","url":"/iqm-pulse/api/iqm.pulse.gates.move.MoveMarker.html","description":"Bases: Wait Special annotation instruction to indicate the beginning and ending of MOVE gates. The same instance of this instruction will be inserted into the qubit drive channel and the\\nresonator vir...","content":"Bases: Wait Special annotation instruction to indicate the beginning and ending of MOVE gates. The same instance of this instruction will be inserted into the qubit drive channel and the\\nresonator virtual drive channel, right before the beginning MOVE VirtualRZ instructions,\\nto link the channels together (otherwise, there would be nothing explicit in the Schedule\\nindicating that there is a MOVE gate happening between the qubit and the resonator). Another shared instance will be inserted to the aforementioned channels right before the ending\\nMOVE VirtualRZ instruction. The VirtualRZ instructions between the markers on the resonator\\nchannel will be applied to the qubit instead in a post-compilation pass. Module: iqm.pulse.gates.move Attributes duration Time duration of the instruction. qubit  resonator  detuning  Methods duration ( int ) – qubit ( str ) – resonator ( str ) – detuning ( float ) – Time duration of the instruction. In samples at the channel sample rate. previous MOVE_TGSS_CRF next prx © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"MOVE_CustomWaveforms","url":"/iqm-pulse/api/iqm.pulse.gates.move.MOVE_CustomWaveforms.html","description":"Bases: FluxPulseGate Qubit-resonator MOVE gate using flux pulses on both components. This class implements the extra phase bookkeeping logic required to make the MOVE\\ngates work as intended. Due to th...","content":"Bases: FluxPulseGate Qubit-resonator MOVE gate using flux pulses on both components. This class implements the extra phase bookkeeping logic required to make the MOVE\\ngates work as intended. Due to the unknown phase in the MOVE gate definition, the MOVEs\\nneed to be applied in pairs, i.e. the resonator state is always moved back to the qubit\\nit came from. Between this pair of MOVE gates you can apply any number of other two-component\\ngates (CZs for example) between the resonator and other qubits. This sequence of\\ngates acting on the resonator is called a MOVE sandwich . At the end of a sandwich we have\\nto apply a local phase correction (z rotation) on the state that was moved back to the qubit. The __call__() method of this class uses the MoveMarker annotation instruction\\nto mark the beginning and end of each MOVE sandwich, in order to enable the calculation of the\\nangle of the z rotation to be applied on the moved qubit at the end of the sandwich to\\ncounteract the phase accumulation during the sandwich relative to the computational frame of\\nthe qubit.\\nThe phase accumulation has two sources: Phase due to the frequency detuning between the qubit and the resonator,\\nproportional to the time duration the MOVE sandwich. Phase due to the virtual z rotations applied on the resonator as\\ngates are applied between it and another qubit, which need to be summed up.\\nBy convention the resonator VirtualRZ angle of the MOVE implementation itself is currently\\nalways zero (since only the sum of the resonator and qubit z rotation angles matters for MOVE),\\nbut we also include it in the sum for completeness. The phases are calculated and applied on the qubits using apply_move_gate_phase_corrections() . Module: iqm.pulse.gates.move Attributes coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. root_parameters Include the frequency difference between qubit and resonator in the gate parameters for phase tracking. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Include the frequency difference between qubit and resonator in the gate parameters for phase tracking. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Flux pulse Waveform to be played in the coupler flux AWG. Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous MOVE_CRF_CRF next MOVE_TGSS_CRF © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.validation.validate_playlist_compatibility","url":"/iqm-pulse/api/iqm.pulse.validation.validate_playlist_compatibility.html","description":"Validates that the given playlist is compatible with the provided AWG data. The following requirements are validated as they are the same for all controllers. Playlist sample rate vs. Actual controlle...","content":"Validates that the given playlist is compatible with the provided AWG data. The following requirements are validated as they are the same for all controllers. Playlist sample rate vs. Actual controller sample rate Instruction granularity with respect to the controllers granularity requirements Checks that no other than supported instructions are used. Checks that instruction length matches waveform length in IQ and RealPulse Checks that all instructions are at least the length of minimum number of samples Checks that Conditional instruction has the same duration in every child instruction playlist ( Playlist ) – instructions used on each channel, as well as the channel configurations device_constraints ( dict [ str , ChannelProperties ] ) – actual hardware limitations of the channels None previous iqm.pulse.validation.validate_instruction_and_wf_length next AWGScheduleValidationData © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.rz.get_unitary_rz","url":"/iqm-pulse/api/iqm.pulse.gates.rz.get_unitary_rz.html","description":"Unitary for an RZ gate. angle ( float ) – rotation angle (in rad) 2x2 unitary representing rz(angle) . ndarray previous rz next RZ_ACStarkShift © Copyright 2019-2025, IQM Finland Oy. Last updated on 2...","content":"Unitary for an RZ gate. angle ( float ) – rotation angle (in rad) 2x2 unitary representing rz(angle) . ndarray previous rz next RZ_ACStarkShift © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ProbeChannelProperties","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.ProbeChannelProperties.html","description":"Bases: ChannelProperties ChannelProperties for probe line channels. Module: iqm.pulse.playlist.channel Attributes center_frequency Center frequency for the channel. integration_start_dead_time Dead ti...","content":"Bases: ChannelProperties ChannelProperties for probe line channels. Module: iqm.pulse.playlist.channel Attributes center_frequency Center frequency for the channel. integration_start_dead_time Dead time samples before integration. integration_stop_dead_time Dead time samples after integration. sample_rate sample rate of the instrument responsible for the channel (in Hz) instruction_duration_granularity all instruction durations on this channel must be multiples of this granularity (in samples) instruction_duration_min all instruction durations on this channel must at least this long (in samples) compatible_instructions instruction types that are allowed on this channel Methods sample_rate ( float ) – instruction_duration_granularity ( int ) – instruction_duration_min ( int ) – compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) – is_iq ( bool ) – is_virtual ( bool ) – blocks_component ( bool ) – center_frequency ( float ) – integration_start_dead_time ( int ) – integration_stop_dead_time ( int ) – Center frequency for the channel. Dead time samples before integration. Dead time samples after integration. previous IQChannelConfig next RealChannelConfig © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.register_implementation","url":"/iqm-pulse/api/iqm.pulse.gates.register_implementation.html","description":"Register a new gate implementation, and a new gate (operation) if needed. operations ( dict [ str , QuantumOp ] ) – Known operations, mapping gate names to QuantumOps gate_name ( str ) – The gate name...","content":"Register a new gate implementation, and a new gate (operation) if needed. operations ( dict [ str , QuantumOp ] ) – Known operations, mapping gate names to QuantumOps gate_name ( str ) – The gate name to register impl_name ( str ) – The name for this implementation impl_class ( type [ GateImplementation ] ) – The implementation class set_as_default ( bool ) – Whether to set as default implementation overwrite ( bool ) – If True, allows replacing existing operation/implementation quantum_op_specs ( QuantumOp | dict | None ) – Specs for creating new quantum op if needed ValueError – If operation/implementation exists and overwrite=False None previous iqm.pulse.gates.get_implementation_class next barrier © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"RZ_ACStarkShift_smoothConstant","url":"/iqm-pulse/api/iqm.pulse.gates.rz.RZ_ACStarkShift_smoothConstant.html","description":"Bases: Constant_PRX_with_smooth_rise_fall Constant AC stark pulse with cosine rise and fall padding.\\nImplemented as a 3-instruction Schedule. Constructs an instance of the AC Stark pulse for the given...","content":"Bases: Constant_PRX_with_smooth_rise_fall Constant AC stark pulse with cosine rise and fall padding.\\nImplemented as a 3-instruction Schedule. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of CosineFall alias of Constant Required calibration data, may be nested alias of CosineRise True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous RZ_ACStarkShift_CosineRiseFall next RZ_Virtual © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"AWGScheduleValidationData","url":"/iqm-pulse/api/iqm.pulse.validation.AWGScheduleValidationData.html","description":"Bases: object Controller specific validation data Module: iqm.pulse.validation Attributes sampling_rate  granularity  min_number_of_samples  compatible_instructions  Methods sampling_rate ( float ) – ...","content":"Bases: object Controller specific validation data Module: iqm.pulse.validation Attributes sampling_rate  granularity  min_number_of_samples  compatible_instructions  Methods sampling_rate ( float ) – granularity ( int ) – min_number_of_samples ( int ) – compatible_instructions ( tuple [ type [ Operation ] , ... ] ) – previous iqm.pulse.validation.validate_playlist_compatibility next iqm.pulse.validation.AWGScheduleValidationError © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"reset","url":"/iqm-pulse/api/iqm.pulse.gates.reset.html","description":"Resetting qubits to the zero state. The reset operation is a non-unitary quantum channel that sets the state of a qubit to \\\\(|0\\\\rangle\\\\) . Full path: iqm.pulse.gates.reset Module Attributes RESET_MEAS...","content":"Resetting qubits to the zero state. The reset operation is a non-unitary quantum channel that sets the state of a qubit to \\\\(|0\\\\rangle\\\\) . Full path: iqm.pulse.gates.reset Module Attributes RESET_MEASUREMENT_KEY Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore emphasizes the fact that this label should not be manually used in fast feedback). RESET_FEEDBACK_KEY The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should not be manually used in fast feedback). Classes Reset_Conditional Conditional reset operation. Reset_Wait Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Inheritance previous PRX_SinglePulse_GateImplementation next iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.playlist.channel.get_channel_properties_from_station_settings","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.get_channel_properties_from_station_settings.html","description":"Get channel properties from Station Control controller settings following the standard convention. settings ( SettingNode ) – Flat tree of all controllers. chip_topology ( ChipTopology ) – Chip topolo...","content":"Get channel properties from Station Control controller settings following the standard convention. settings ( SettingNode ) – Flat tree of all controllers. chip_topology ( ChipTopology ) – Chip topology. mapping from channel name to its properties\\ncomponent_to_channel: mapping from chip component to function name to channel name. channel_properties previous iqm.pulse.playlist.channel.get_channel_properties next iqm.pulse.playlist.channel.round_duration_to_granularity_samples © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"MultiplexedIQPulse","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.MultiplexedIQPulse.html","description":"Bases: Instruction Instruction to simultaneously play multiple IQ pulses. Each component pulse can have an arbitrary delay from the beginning of this instruction.\\nOutside the interval of the Multiplex...","content":"Bases: Instruction Instruction to simultaneously play multiple IQ pulses. Each component pulse can have an arbitrary delay from the beginning of this instruction.\\nOutside the interval of the MultiplexedIQPulse, the component pulses are truncated.\\nWhere overlapping, samples of component pulse entries are summed.\\nWhere the interval of a MultiplexedIQPulse does not overlap with any of its component pulses,\\nits samples are zeroes. Module: iqm.pulse.playlist.instructions Attributes entries ( pulse , offset ) pairs. duration Time duration of the instruction. Methods duration ( int ) – entries ( tuple [ tuple [ IQPulse , int ] , ... ] ) – ( pulse , offset ) pairs. offset is the number of samples pulse is delayed from the beginning of the instruction.\\nIt has no granularity constraints. Negative values are allowed, but beginning will be truncated. previous Instruction next ReadoutTrigger © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.playlist.visualisation.base.inspect_playlist","url":"/iqm-pulse/api/iqm.pulse.playlist.visualisation.base.inspect_playlist.html","description":"Creates an HTML string from the given playlist and segments. The output can be viewed in a browser or in a Jupyter notebook using IPython.core.display.HTML . playlist ( Playlist ) – The Playlist to be...","content":"Creates an HTML string from the given playlist and segments. The output can be viewed in a browser or in a Jupyter notebook using IPython.core.display.HTML . playlist ( Playlist ) – The Playlist to be visualised segments ( Sequence [ int ] ) – Indices of the Playlist segments to inspect. The generated raw HTML string. str previous base next waveforms © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"TwoQubitGate","url":"/iqm-pulse/api/iqm.pulse.gates.enums.TwoQubitGate.html","description":"Bases: Enum Enumerates a subset of two-qubit gates. Members of this enum can be mapped to the corresponding unitary propagator using\\nthe dictionary returned by TWO_QUBIT_UNITARIES . Module: iqm.pulse....","content":"Bases: Enum Enumerates a subset of two-qubit gates. Members of this enum can be mapped to the corresponding unitary propagator using\\nthe dictionary returned by TWO_QUBIT_UNITARIES . Module: iqm.pulse.gates.enums Attributes CZ Controlled-Z gate. ISWAP iSWAP gate. SQRT_ISWAP Square root of the iSWAP gate. Methods Controlled-Z gate. iSWAP gate. Square root of the iSWAP gate. previous iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES next XYGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.quantum_ops.validate_locus_calibration","url":"/iqm-pulse/api/iqm.pulse.quantum_ops.validate_locus_calibration.html","description":"Validates calibration for a particular gate implementation at particular locus. cal_data ( OILCalibrationData ) – Calibration data tree for the locus. impl ( type [ GateImplementation ] ) – GateImplem...","content":"Validates calibration for a particular gate implementation at particular locus. cal_data ( OILCalibrationData ) – Calibration data tree for the locus. impl ( type [ GateImplementation ] ) – GateImplementation class that defines the required parameters. op ( QuantumOp ) – QuantumOp that impl implements. impl_name ( str ) – name of the implementation, for error messages. locus ( tuple [ str , ... ] ) – Locus of the operation ValueError – there is something wrong with the calibration data None previous iqm.pulse.quantum_ops.QuantumOpTable next iqm.pulse.quantum_ops.validate_op_calibration © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.OpCalibrationDataTree","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.OpCalibrationDataTree.html","description":"Maps quantum operation names to their calibration data. alias of dict [ str , dict [ str , dict [ tuple [ str , …] | None , dict [ str , Any ]]]] previous iqm.pulse.gate_implementation.OCalibrationDat...","content":"Maps quantum operation names to their calibration data. alias of dict [ str , dict [ str , dict [ tuple [ str , …] | None , dict [ str , Any ]]]] previous iqm.pulse.gate_implementation.OCalibrationData next iqm.pulse.gate_implementation.NestedParams © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"move","url":"/iqm-pulse/api/iqm.pulse.gates.move.html","description":"Two-qubit MOVE gate. The MOVE gate is a population exchange operation between a qubit and a resonator,\\nmediated by a coupler, that has the following properties: MOVE is unitary. The effect of MOVE is ...","content":"Two-qubit MOVE gate. The MOVE gate is a population exchange operation between a qubit and a resonator,\\nmediated by a coupler, that has the following properties: MOVE is unitary. The effect of MOVE is only defined in the invariant\\nsubspace \\\\(S = \\\\text{span}\\\\{|00\\\\rangle, |01\\\\rangle, |10\\\\rangle\\\\}\\\\) , where it swaps the populations of the states \\\\(|01\\\\rangle\\\\) and \\\\(|10\\\\rangle\\\\) . Anything may happen in the orthogonal subspace as long as it is unitary and\\ninvariant. In the subspace where it is defined, MOVE is an involution: \\\\(\\\\text{MOVE}_S^2 = I_S\\\\) . Thus MOVE has the following presentation in the subspace \\\\(S\\\\) : where \\\\(a\\\\) is an undefined complex phase. This degree of freedom (in addition to the undefined effect of the gate\\nin the orthogonal subspace) means there is a continuum of different MOVE gates, all equally valid.\\nThe phase \\\\(a\\\\) is canceled when the MOVE gate is applied a second time due to the involution property. Full path: iqm.pulse.gates.move Functions apply_move_gate_phase_corrections (schedule, ...) Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. validate_move_instructions (instructions, builder) Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Classes MOVE_CRF_CRF Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. MOVE_CustomWaveforms Qubit-resonator MOVE gate using flux pulses on both components. MOVE_TGSS_CRF Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the CRF waveform for the qubit flux pulse. MoveMarker Special annotation instruction to indicate the beginning and ending of MOVE gates. Inheritance previous ProbePulse_CustomWaveforms next iqm.pulse.gates.move.apply_move_gate_phase_corrections © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"MultiplexedProbeTimeBox","url":"/iqm-pulse/api/iqm.pulse.timebox.MultiplexedProbeTimeBox.html","description":"Bases: TimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. A MultiplexedProbeTimeBox ’s atom contains exactly one ReadoutTrigger for each probe channel. Module...","content":"Bases: TimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. A MultiplexedProbeTimeBox ’s atom contains exactly one ReadoutTrigger for each probe channel. Module: iqm.pulse.timebox Attributes label Description the contents of the box for users' convenience. locus_components Names of the QPU components on which this timebox operates. atom Resolved contents of the TimeBox, or None if not resolved. children Further Timeboxes inside this TimeBox. neighborhood_components Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox . Methods from_readout_trigger Build an atomic MultiplexedProbeTimeBox\` from a single \`\`ReadoutTrigger instruction. label ( str ) – locus_components ( set [ str ] ) – atom ( Schedule | None ) – children ( tuple [ TimeBox , ... ] ) – scheduling ( SchedulingStrategy ) – scheduling_algorithm ( SchedulingAlgorithm ) – neighborhood_components ( dict [ int , set [ str ] ] ) – Build an atomic MultiplexedProbeTimeBox\` from a single \`\`ReadoutTrigger instruction. readout_trigger ( ReadoutTrigger ) – Readout trigger instruction. probe_channel ( str ) – Name of the probe channel to play readout_trigger in. locus_components ( Iterable [ str ] ) – Locus components. label ( str ) – Label of the new timebox. block_channels ( Iterable [ str ] ) – Names of channels to block. block_duration ( int ) – Duration of the required blocking (in samples). atomic timebox containing readout_trigger in the channel probe_channel . MultiplexedProbeTimeBox previous timebox next SchedulingAlgorithm © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.validation.PlaylistValidationError","url":"/iqm-pulse/api/iqm.pulse.validation.PlaylistValidationError.html","description":"Error raised when Playlist validation fails. previous iqm.pulse.validation.InvalidInstructionError next Changelog © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"Error raised when Playlist validation fails. previous iqm.pulse.validation.InvalidInstructionError next Changelog © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"validation","url":"/iqm-pulse/api/iqm.pulse.validation.html","description":"Validation of playlists and instructions schedules. Full path: iqm.pulse.validation Functions validate_awg_and_schedule_compatibility (...) Validates that the given playlist is compatible with the pro...","content":"Validation of playlists and instructions schedules. Full path: iqm.pulse.validation Functions validate_awg_and_schedule_compatibility (...) Validates that the given playlist is compatible with the provided AWG data. validate_channel (channel_description, ...) Validate a single channel. validate_instruction_and_wf_length (instruction) Validate that instruction and waveform lengths match validate_playlist_compatibility (playlist, ...) Validates that the given playlist is compatible with the provided AWG data. Classes AWGScheduleValidationData Controller specific validation data Exceptions AWGScheduleValidationError Error raised when schedule validation for an AWG fails. InvalidInstructionError (instruction[, ...]) Error raised when encountering an invalid instruction. PlaylistValidationError Error raised when Playlist validation fails. Inheritance previous iqm.pulse.utils.phase_transformation next iqm.pulse.validation.validate_awg_and_schedule_compatibility © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"PRX_DRAGGaussianSX","url":"/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGGaussianSX.html","description":"Bases: PRX_CustomWaveformsSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel w...","content":"Bases: PRX_CustomWaveformsSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . Required calibration data, may be nested alias of TruncatedGaussian alias of TruncatedGaussianDerivative previous PRX_DRAGGaussian next PRX_GateImplementation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"PRX_GateImplementation","url":"/iqm-pulse/api/iqm.pulse.gates.prx.PRX_GateImplementation.html","description":"Bases: GateImplementation ABC for different implementations of the PRX gate. Module: iqm.pulse.gates.prx Attributes Methods clifford One-qubit XY Clifford gates. get_locus_mapping_name Get the name of...","content":"Bases: GateImplementation ABC for different implementations of the PRX gate. Module: iqm.pulse.gates.prx Attributes Methods clifford One-qubit XY Clifford gates. get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. rx X rotation gate. ry Y rotation gate. parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Phased x rotation gate. angle ( float ) – rotation angle (in radians) phase ( float ) – phase angle (in radians) boxed instruction schedule implementing the phased x rotation gate TimeBox X rotation gate. angle ( float ) – rotation angle (in radians) boxed instruction schedule implementing the x rotation gate TimeBox Y rotation gate. angle ( float ) – rotation angle (in radians) boxed instruction schedule implementing the y rotation gate TimeBox One-qubit XY Clifford gates. xy_gate ( XYGate ) – Clifford gate boxed instruction schedule implementing the requested Clifford gate TimeBox Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \\"<operation_name>.<implementation_name>\\" . Inheriting classes may\\noverride this for different behaviour. operation_name ( str ) – name of the quantum operation. implementation_name ( str ) – name of the implementation name of the locus mapping str previous PRX_DRAGGaussianSX next PRX_SinglePulse_GateImplementation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ChannelConfiguration","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelConfiguration.html","description":"Bases: object Base class for configuring channels. Module: iqm.pulse.playlist.channel Methods previous iqm.pulse.playlist.channel.round_duration_to_granularity_samples next ChannelDescription © Copyri...","content":"Bases: object Base class for configuring channels. Module: iqm.pulse.playlist.channel Methods previous iqm.pulse.playlist.channel.round_duration_to_granularity_samples next ChannelDescription © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"delay","url":"/iqm-pulse/api/iqm.pulse.gates.delay.html","description":"Force a delay between instructions on the control channels of specific locus components. Ideally the delay corresponds to an identity gate. In reality it of course allows decoherence\\nto act on the qua...","content":"Force a delay between instructions on the control channels of specific locus components. Ideally the delay corresponds to an identity gate. In reality it of course allows decoherence\\nto act on the quantum state for some time. Full path: iqm.pulse.gates.delay Module Attributes DELAY_MAX_DURATION_SECONDS Maximum duration for individual Delay operations, in seconds. Classes Delay Applies a delay on the control channels of its locus components. Inheritance previous default_gates next iqm.pulse.gates.delay.DELAY_MAX_DURATION_SECONDS © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CouplerFluxPulseQubitACStarkPulseGate","url":"/iqm-pulse/api/iqm.pulse.gates.cz.CouplerFluxPulseQubitACStarkPulseGate.html","description":"Bases: GateImplementation Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. Analogous to the fast qubit flux pulse, the AC Stark pulse can tune the frequency of the qubit. To...","content":"Bases: GateImplementation Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. Analogous to the fast qubit flux pulse, the AC Stark pulse can tune the frequency of the qubit. Together with the\\ncoupler flux pulse, this can implement a fast qubit pulsed CZ gate. Module: iqm.pulse.gates.cz Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters  coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. qubit_drive_wave Qubit drive pulse waveform to be played in the qubit drive AWG. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Flux pulse Waveform to be played in the coupler flux AWG. Qubit drive pulse waveform to be played in the qubit drive AWG. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Returns an AC Stark pulse which consists of a modulated I and modulated Q waveform, where the Q quadrature\\nhas an additional phase of -pi/2. phase ( float ) – amplitude ( float ) – phase_increment ( float ) – IQPulse The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \\"<operation_name>.<implementation_name>\\" . Inheriting classes may\\noverride this for different behaviour. operation_name ( str ) – name of the quantum operation. implementation_name ( str ) – name of the implementation name of the locus mapping str previous CZ_TruncatedGaussianSmoothedSquare next FluxPulseGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.quantum_ops.validate_op_calibration","url":"/iqm-pulse/api/iqm.pulse.quantum_ops.validate_op_calibration.html","description":"Validates quantum operation calibration data against the known quantum operations. NOTE: calibration data parameters that have a defined default value are not required to be in the calibration data. c...","content":"Validates quantum operation calibration data against the known quantum operations. NOTE: calibration data parameters that have a defined default value are not required to be in the calibration data. calibration ( OpCalibrationDataTree ) – quantum operation calibration data tree to validate ops ( QuantumOpTable ) – known quantum operations and their implementations ValueError – there is something wrong with the calibration data None previous iqm.pulse.quantum_ops.validate_locus_calibration next QuantumOp © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ConditionalInstruction","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.ConditionalInstruction.html","description":"Bases: Instruction Choice between multiple Instructions, depending on a condition. Module: iqm.pulse.playlist.instructions Attributes condition can be evaluated to an integer >= 0 outcomes maps possib...","content":"Bases: Instruction Choice between multiple Instructions, depending on a condition. Module: iqm.pulse.playlist.instructions Attributes condition can be evaluated to an integer >= 0 outcomes maps possible outcomes of the condition to the corresponding instructions duration Time duration of the instruction. Methods get_child_instructions Returns all the child Instructions the Instruction contains. validate Validate the instruction attributes. duration ( int ) – condition ( str ) – outcomes ( tuple [ Instruction , ... ] ) – can be evaluated to an integer >= 0 maps possible outcomes of the condition to the corresponding instructions Validate the instruction attributes. ValueError – something about the instruction is not ok Returns all the child Instructions the Instruction contains. tuple [ Instruction , …] previous ComplexIntegration next FluxPulse © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.OICalibrationData","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.OICalibrationData.html","description":"For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. alias of dict [ tuple [ str , …] | None , dict [ str , Any ]] previous iqm.pulse.gate_...","content":"For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. alias of dict [ tuple [ str , …] | None , dict [ str , Any ]] previous iqm.pulse.gate_implementation.OILCalibrationData next iqm.pulse.gate_implementation.OCalibrationData © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"PRX_CustomWaveformsSX","url":"/iqm-pulse/api/iqm.pulse.gates.prx.PRX_CustomWaveformsSX.html","description":"Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. If the rotation angle \\\\(\\\\theta = \\\\pi/2\\\\) , th...","content":"Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. If the rotation angle \\\\(\\\\theta = \\\\pi/2\\\\) , the timebox will consist of just the SX IQ pulse, with phase. If the rotation angle \\\\(\\\\theta = 0.0\\\\) , the timebox will consist of a single zero-amplitude pulse. If not, the timebox will consist of two IQ pulses, with phase. The formula for the PRX gate implemented using SX gates and z rotations is The fusing of z rotations to IQPulses is done inside the _call() method. All parameters in the pulse here is referring to the state of the qubits. Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\\nto all such implementations. Convert pulses into timebox, via extra Z rotations. There are exceptions while using 0, pi/2 and pi rotation in angle, for calibration reason. The duration of the\\ntimebox can be different. angle ( float ) – phase ( float ) – TimeBox Builds a single sqrt(X) pulse from the calibration data. amplitude_i ( float ) – amplitude_q ( float ) – n_samples ( int ) – IQPulse If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . previous PRX_CustomWaveforms next PRX_DRAGCosineRiseFall © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.circuit_operations.get_unitary_from_circuit","url":"/iqm-pulse/api/iqm.pulse.circuit_operations.get_unitary_from_circuit.html","description":"Calculate the overall unitary implemented by a sequence of CircuitOperations. Iterate through the list of operations, skipping over barrier operations, and calculate the unitary\\nfor each operation, an...","content":"Calculate the overall unitary implemented by a sequence of CircuitOperations. Iterate through the list of operations, skipping over barrier operations, and calculate the unitary\\nfor each operation, and then calculate the matrix product of all of them. The unitary definition must be present\\nin the QuantumOpTable given as the second argument. circuit ( list [ CircuitOperation ] ) – list of CircuitOperations in order table ( dict [ str , QuantumOp ] | None ) – Table of all registered quantum ops. qubit_names ( list [ str ] | None ) – Optionally, the ordering of the qubits. Array describing the action of the circuit in big endian convention. ndarray previous circuit_operations next iqm.pulse.circuit_operations.get_unitary_from_op © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.utils.map_waveform_param_types","url":"/iqm-pulse/api/iqm.pulse.utils.map_waveform_param_types.html","description":"Map a python typehint into EXA Parameter’s (DataType, CollectionType) tuple. type – python typehint. type_hint ( type ) – A (DataType, CollectionType) tuple ValueError – for a non-supported type. tupl...","content":"Map a python typehint into EXA Parameter’s (DataType, CollectionType) tuple. type – python typehint. type_hint ( type ) – A (DataType, CollectionType) tuple ValueError – for a non-supported type. tuple [ DataType , CollectionType ] previous iqm.pulse.utils.load_yaml next iqm.pulse.utils.normalize_angle © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"RZ_ACStarkShift_CosineRiseFall","url":"/iqm-pulse/api/iqm.pulse.gates.rz.RZ_ACStarkShift_CosineRiseFall.html","description":"Bases: RZ_ACStarkShift AC stark pulse implemented as a modulated cosine rise fall pulse. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes paramet...","content":"Bases: RZ_ACStarkShift AC stark pulse implemented as a modulated cosine rise fall pulse. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of ModulatedCosineRiseFall Required calibration data, may be nested True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous RZ_ACStarkShift next RZ_ACStarkShift_smoothConstant © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.enums.XYGATE_UNITARIES","url":"/iqm-pulse/api/iqm.pulse.gates.enums.XYGATE_UNITARIES.html","description":"Mapping of XYGates to the corresponding SU(2) matrices previous enums next iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"Mapping of XYGates to the corresponding SU(2) matrices previous enums next iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING.html","description":"Locus mapping name for mapping all components that have the drive operation defined. previous iqm.pulse.gate_implementation.NestedParams next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READO...","content":"Locus mapping name for mapping all components that have the drive operation defined. previous iqm.pulse.gate_implementation.NestedParams next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"PRX_DRAGCosineRiseFallSX","url":"/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGCosineRiseFallSX.html","description":"Bases: PRX_CustomWaveformsSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q cha...","content":"Bases: PRX_CustomWaveformsSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). excluded_parameters Parameters names to be excluded from self.parameters . parameters Required calibration data, may be nested Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Builds a single sqrt(X) pulse from the calibration data. IQPulse If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . Required calibration data, may be nested alias of CosineRiseFall alias of CosineRiseFallDerivative previous PRX_DRAGCosineRiseFall next PRX_DRAGGaussian © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Slepian","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.Slepian.html","description":"Bases: Waveform Slepian waveform, which minimizes non-adiabatic errors during a gate. It is assumed that the user has done the minimization in a prior step, such that the optimal \\\\(\\\\lambda_n\\\\) for\\na s...","content":"Bases: Waveform Slepian waveform, which minimizes non-adiabatic errors during a gate. It is assumed that the user has done the minimization in a prior step, such that the optimal \\\\(\\\\lambda_n\\\\) for\\na specific length \\\\(\\\\tau_\\\\text{pulse}\\\\) (in the accelerated frame) is known. This class then reconstructs the\\nwaveform with the following steps: Calculate \\\\(\\\\theta(\\\\tau)\\\\) (Slepian in the accelerated frame and in \\\\(\\\\theta\\\\) space) Calculate \\\\(t(\\\\tau)\\\\) (mapping time in the accelerated frame to time in the lab frame) Interpolate \\\\(\\\\theta(t)\\\\) (Slepian in the lab frame and in \\\\(\\\\theta\\\\) space) Calculate \\\\(f(t)\\\\) (Slepian in the lab frame and in frequency space) Calculate \\\\(V(t)\\\\) (Slepian in the lab frame and in voltage space) Since the waveform is normalized, any voltage pre-factor should go into the pulse amplitude. The user is advised to look up [ 1 ] for further details, since the derivation is mathematically\\nheavy. full_width ( float ) – Duration of the support of the waveform. lambda_1 ( float ) – First coefficient of Slepian waveform. lambda_2 ( float ) – Second coefficient of Slepian waveform. frequency_initial_normalized ( float ) – Initial frequency of the pulsed component (usually coupler),\\nnormalized by the maximum frequency of the pulsed component. frequency_to_minimize_normalized ( float ) – Frequency of the static component (usually qubit) which to\\nminimize the leakage from/to, normalized by the maximum frequency of the pulsed component. coupling_strength_normalized ( float ) – Coupling strength between pulsed component and static component,\\nnormalized by the maximum frequency of the pulsed component. center_offset ( float ) – The waveform is centered at this offset from the midpoint of the sampling window. squid_asymmetry ( float ) – Squid asymmetry. n_samples ( int ) – Module: iqm.pulse.playlist.waveforms Attributes center_offset  squid_asymmetry  full_width  lambda_1  lambda_2  frequency_initial_normalized  frequency_to_minimize_normalized  coupling_strength_normalized  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\\nBy default all the waveform attributes are “timelike” (the unit for their calibration data is s).\\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\\nconsisting of multiple terms, or frequency-like (calibration data has the unit ‘Hz’).\\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\\nwindow duration. dict [ str , str ] Actually samples the waveform. sample_coords ( ndarray ) – coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Calculate the samples of the actual Slepian waveform. coords ( ndarray ) – normalized sample coordinates, in \\\\([0, 1]\\\\) samples of the Slepian waveform ndarray Convert time in the accelerated frame to the lab frame (real time). Since the conversion is defined via an integral, finding an analytical solution was not possible. Therefore, we\\nintegrate the expression numerically with scipy.integrate.romb() . tau ( float | ndarray ) – Time in the accelerated frame. num_samples ( int ) – Number of samples for the numerical integration. Must be of the form 2 ** k + 1. tau converted to the lab frame ndarray Parametrization of the Slepian waveform in the accelerated frame. The Slepian waveform is parametrized using Fourier base functions, where we only take the cosine terms into\\naccount ( [ 1 ] has shown that this is a reasonable assumption).\\nHere, \\\\(\\\\lambda_n\\\\) is the amplitude of the \\\\(n\\\\) -th term of the Fourier base function.\\nIt is usually sufficient to take only up to second order terms into account, i.e. only \\\\(\\\\lambda_1\\\\) and \\\\(\\\\lambda_2\\\\) are non-zero. tau ( ndarray ) – Time in the accelerated frame, normalized to [0, 1] with tau_pulse. Slepian waveform in the theta space and accelerated frame. ndarray previous ModulatedCosineRiseFall next quantum_ops © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"builder","url":"/iqm-pulse/api/iqm.pulse.builder.html","description":"Tools for building instruction schedules. Full path: iqm.pulse.builder Functions build_quantum_ops (ops) Builds the table of known quantum operations. load_config (path) Load quantum operation definit...","content":"Tools for building instruction schedules. Full path: iqm.pulse.builder Functions build_quantum_ops (ops) Builds the table of known quantum operations. load_config (path) Load quantum operation definitions and calibration data from a YAML config file. validate_quantum_circuit (operations, op_table, *) Validate a sequence of circuit operations constituting a quantum circuit. Classes CircuitOperation Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. ScheduleBuilder Builds instruction schedules out of quantum circuits or individual quantum operations. Inheritance previous iqm.pulse.base_utils.merge_dicts next iqm.pulse.builder.build_quantum_ops © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.scheduler.NONSOLID","url":"/iqm-pulse/api/iqm.pulse.scheduler.NONSOLID.html","description":"Instructions that can be converted to Wait after scheduling. previous scheduler next iqm.pulse.scheduler.BLOCKING © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"Instructions that can be converted to Wait after scheduling. previous scheduler next iqm.pulse.scheduler.BLOCKING © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"QuantumOp","url":"/iqm-pulse/api/iqm.pulse.quantum_ops.QuantumOp.html","description":"Bases: object Describes a native quantum operation type. Quantum operations (or “ops” in short), are simple, abstract, self-contained actions one can\\nexecute on a station as parts of a quantum circuit...","content":"Bases: object Describes a native quantum operation type. Quantum operations (or “ops” in short), are simple, abstract, self-contained actions one can\\nexecute on a station as parts of a quantum circuit. They include quantum gates, measurements,\\nand resets. They must have an unambiguous definition in terms of their intended effect on the\\ncomputational subspace of the quantum subsystems (qubits, qudits, qumodes…) they act on.\\nThey are implemented on the hardware using instruction schedules . A QuantumOp can also be a metaoperation , which (in an idealized picture) has no effect on the\\nquantum state, but affects the scheduling of the other ops. Execution barriers are an example of a metaoperation. The ops can have any number of named parameters. For example, PRX is a two-parameter\\nquantum gate family, whereas CZ is a single gate with no parameters. A locus (plural: loci) is a tuple[str, ...] (an ordered sequence) of CHAD component names\\nan instance of a quantum operation acts on. The locus consists of those QPU components that store the\\nquantum information the operation acts on. For example, a CZ gate implemented using a flux\\npulse on the coupler connecting the qubits does not include the coupler in its locus, since the\\ncoupler is simply an implementation detail. In a quantum circuit each operation type normally has several different loci. For example, you\\ncould have a PRX gate being used on qubits {('QB1',), ('QB2',), ('QB5',)} , or a CZ gate used on qubit pairs {('QB1', 'QB3'), ('QB3', 'QB5',), ('QB1', 'QB5',)} . Each quantum operation can have any number of named implementations , each represented by a GateImplementation subclass. For example, we may have two implementations of the CZ gate,\\none with just a single flux pulse applied to the coupler, and another one with additional flux\\npulses applied to the qubits as well. operation defines the abstract intention (what) implementation defines the concrete method (how) locus defines the target of the operation (where) The quantum operations are typically calibrated using specific calibration experiments that\\noutput the required calibration data. Each implementation of each operation can require\\nits own, independent set of calibration data for each locus. Module: iqm.pulse.quantum_ops Attributes default_implementation Name of the default implementation (the global default). factorizable True iff the operation is always factorizable to independent single-subsystem operations, which is also how it is implemented, for example parallel single-qubit measurements. params Names of required operation parameters, if any. symmetric True iff the effect of operation is symmetric in the quantum subsystems it acts on. unitary Unitary matrix that represents the effect of this quantum operation in the computational basis, or None if the quantum operation is not unitary or the exact unitary is not known. name Unique name of the operation. arity Number of locus components the operation acts on. implementations Maps implementation names to GateImplementation classes that provide them. defaults_for_locus Optionally define the implementation default individually per each locus. Methods copy Make a copy of self with the given changes applied to the contents. get_default_implementation_for_locus Get the default (highest priority) implementation for the given locus. set_default_implementation Sets the given implementation as the default. set_default_implementation_for_locus Set the locus-specific default implementation. name ( str ) – arity ( int ) – params ( tuple [ str , ... ] ) – implementations ( dict [ str , type [ GateImplementation ] ] ) – symmetric ( bool ) – factorizable ( bool ) – defaults_for_locus ( dict [ tuple [ str , ... ] , str ] ) – unitary ( Callable [ ... , np.ndarray ] | None ) – Unique name of the operation. Number of locus components the operation acts on.\\nEach locus component corresponds to a quantum subsystem in the definition of the operation.\\nThe computational subspace always consists of the lowest two levels of the subsystem.\\nZero means the operation can be applied on any number of locus components. Names of required operation parameters, if any. Maps implementation names to GateImplementation classes that provide them.\\nEach such class should describe the implementation in detail in its docstring.\\nThe implementations are in the dict in priority order, highest-priority (default) first. This global priority\\norder can be overridden per locus by the attribute defaults_for_locus . True iff the effect of operation is symmetric in the quantum subsystems it acts on.\\nOnly meaningful if self.arity != 1 . True iff the operation is always factorizable to independent single-subsystem operations, which\\nis also how it is implemented, for example parallel single-qubit measurements.\\nIn this case the operation calibration data is for individual subsystems as well. Optionally define the implementation default individually per each locus. Maps the locus to the default\\ngate implementation name. If a locus is not found in this dict (by default, the dict is empty), falls back to the\\nglobal order defined in implementations . The implementations must be first registered in implementations . Unitary matrix that represents the effect of this quantum operation in the computational basis, or None if the quantum operation is not unitary or the exact unitary is not known.\\nThe Callable needs to take exactly the arguments given in params , for example if params=('angle','phase') , the function must have signature f(angle:float, phase: float) -> np.ndarray .\\nFor operations acting on more than 1 qubit, unitary should be given in the big-endian order, i.e. in the basis np.kron(first_qubit_basis_ket, second_qubit_basis_ket) . Make a copy of self with the given changes applied to the contents. QuantumOp Name of the default implementation (the global default). Sets the given implementation as the default. default ( str ) – name of the new default implementation ValueError – default is unknown or is a special implementation. None Get the default (highest priority) implementation for the given locus. If no locus-specific priority is defined, returns the global default. locus ( Iterable [ str ] ) – tuple of component names defining the locus. The default implementation name. str Set the locus-specific default implementation. default ( str ) – name of the new default implementation for locus . locus ( Iterable [ str ] ) – tuple of component names defining the locus. ValueError – if there is no implementation defined with the name default or default is a special\\n    implementation. None previous iqm.pulse.quantum_ops.validate_op_calibration next scheduler © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Delay","url":"/iqm-pulse/api/iqm.pulse.gates.delay.Delay.html","description":"Bases: GateImplementation Applies a delay on the control channels of its locus components. This operation applies Wait instructions on all the control channels of all its locus\\ncomponents.  The durati...","content":"Bases: GateImplementation Applies a delay on the control channels of its locus components. This operation applies Wait instructions on all the control channels of all its locus\\ncomponents.  The duration of all the Waits is the same, and it is given as a parameter for the\\noperation, rounded up to the nearest possible duration the hardware can handle. Note We can only guarantee that the delay is at least of the requested duration.  Also, when\\nDelay is used in a quantum circuit, the delay between the preceding and following operations is\\nagain at least the requested duration, but could be much more depending on the other operations\\nin the circuit.  To see why, consider e.g. the circuit [CZ(a, b), Delay(1, a), Delay(10, b), CZ(a, b)] where a and b are qubits.\\nIn this case the actual delay between the two CZ gates will be 10 time units rounded up to\\nhardware granularity. Module: iqm.pulse.gates.delay Attributes symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. Delay instruction. duration ( float ) – Duration of the requested wait (in seconds). Will be rounded up to the nearest\\nduration that the hardware enables, with the exception that a duration of zero will\\ncause no waiting. However, as usual, during scheduling all channels the TimeBox is\\nacting on will be extended to the duration of the longest channel in the TimeBox. TimeBox previous iqm.pulse.gates.delay.DELAY_MAX_DURATION_SECONDS next enums © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"quantum_ops","url":"/iqm-pulse/api/iqm.pulse.quantum_ops.html","description":"Quantum operations. Full path: iqm.pulse.quantum_ops Module Attributes QuantumOpTable Type for representing tables of known quantum operations, maps names of the ops to their definitions. Functions va...","content":"Quantum operations. Full path: iqm.pulse.quantum_ops Module Attributes QuantumOpTable Type for representing tables of known quantum operations, maps names of the ops to their definitions. Functions validate_locus_calibration (cal_data, impl, ...) Validates calibration for a particular gate implementation at particular locus. validate_op_calibration (calibration, ops) Validates quantum operation calibration data against the known quantum operations. Classes QuantumOp Describes a native quantum operation type. Inheritance previous Slepian next iqm.pulse.quantum_ops.QuantumOpTable © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"circuit_operations","url":"/iqm-pulse/api/iqm.pulse.circuit_operations.html","description":"Representing quantum circuits as lists of CircuitOperations. Full path: iqm.pulse.circuit_operations Functions get_unitary_from_circuit (circuit[, table, ...]) Calculate the overall unitary implemente...","content":"Representing quantum circuits as lists of CircuitOperations. Full path: iqm.pulse.circuit_operations Functions get_unitary_from_circuit (circuit[, table, ...]) Calculate the overall unitary implemented by a sequence of CircuitOperations. get_unitary_from_op (op, table, qubits) Unitary matrix representing an operation within the context of the circuit. reorder (A, perm) Permutes the order of the qubits in an n-qubit operator matrix. reshape_unitary (unitary, indices, n_qubits) Extend a unitary propagator to act on a larger system. Classes CircuitOperationList List of CircuitOperation objects representing a quantum circuit. Inheritance previous ScheduleBuilder next iqm.pulse.circuit_operations.get_unitary_from_circuit © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.move.validate_move_instructions","url":"/iqm-pulse/api/iqm.pulse.gates.move.validate_move_instructions.html","description":"Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Validates that circuit conforms to the MOVE gate constraints. instructions ( Iterable [ CircuitOperation ] ) – quantum ci...","content":"Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Validates that circuit conforms to the MOVE gate constraints. instructions ( Iterable [ CircuitOperation ] ) – quantum circuit to validate builder ( ScheduleBuilder ) – schedule builder, encapsulating information about the station validate_prx ( bool ) – whether to validate the circuit for PRX gates between MOVE sandwiches as well instructions , unmodified ValueError – Circuit does not conform to MOVE constraints. Iterable [ CircuitOperation ] previous iqm.pulse.gates.move.apply_move_gate_phase_corrections next MOVE_CRF_CRF © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Segment","url":"/iqm-pulse/api/iqm.pulse.playlist.schedule.Segment.html","description":"Bases: object Sequence of instructions, for a single channel. Basically a list[Instruction] that keeps track of the time duration of its contents. instructions ( Iterable [ Instruction ] ) – contents ...","content":"Bases: object Sequence of instructions, for a single channel. Basically a list[Instruction] that keeps track of the time duration of its contents. instructions ( Iterable [ Instruction ] ) – contents of the segment duration ( int | None ) – If None, compute the sum of the durations of instructions .\\nOtherwise, the time duration (in samples) of the segment, which must match\\nthe aforementioned sum if the Segment is still to be modified. Module: iqm.pulse.playlist.schedule Attributes duration Sum of the durations of the instructions in the segment, in samples. Methods append Append an instruction to the end of the segment. copy Make an independent copy of the segment. extend Append all instructions from an iterable to the end of the segment. pop Remove and return the instruction at the given index of the segment. prepend Prepend an instruction to the beginning of the segment. contents total duration of the segment, in samples Make an independent copy of the segment. Mutating the original must not affect the copy, or vice versa.\\nInstructions are immutable, so they need not be copied. copy of the segment Segment Append an instruction to the end of the segment. instruction ( Instruction ) – None Prepend an instruction to the beginning of the segment. instruction ( Instruction ) – None Append all instructions from an iterable to the end of the segment. instructions ( Iterable [ Instruction ] ) – None Remove and return the instruction at the given index of the segment. idx ( int ) – Instruction Sum of the durations of the instructions in the segment, in samples. previous Schedule next visualisation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.OILCalibrationData","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.OILCalibrationData.html","description":"Calibration data for a particular implementation of a particular quantum operation at a particular locus. alias of dict [ str , Any ] previous iqm.pulse.gate_implementation.Locus next iqm.pulse.gate_i...","content":"Calibration data for a particular implementation of a particular quantum operation at a particular locus. alias of dict [ str , Any ] previous iqm.pulse.gate_implementation.Locus next iqm.pulse.gate_implementation.OICalibrationData © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"XYGate","url":"/iqm-pulse/api/iqm.pulse.gates.enums.XYGate.html","description":"Bases: IntEnum Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Members of this enum can be mapped to the corresponding unitary propagator using XYGATE_UNITARIES . Onl...","content":"Bases: IntEnum Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Members of this enum can be mapped to the corresponding unitary propagator using XYGATE_UNITARIES . Only used in the tomography experiments. Module: iqm.pulse.gates.enums Attributes IDENTITY  X_90  X_180  X_M90  Y_90  Y_180  Y_M90  Methods previous TwoQubitGate next flux_multiplexer © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.scheduler.extend_hard_boundary","url":"/iqm-pulse/api/iqm.pulse.scheduler.extend_hard_boundary.html","description":"Merge two Schedules together such that the timebox boundary is respected. This scheduling algorithm treats the Schedules as hard, rectangular boxes where any ragged edges\\nwill be padded with Waits, an...","content":"Merge two Schedules together such that the timebox boundary is respected. This scheduling algorithm treats the Schedules as hard, rectangular boxes where any ragged edges\\nwill be padded with Waits, and the boxes are not allowed to overlap. The algorithm is as follows: 1. When adding child_schedule to schedule , the longest channel in schedule that overlaps with the\\nchannels present in child determines the earliest possible starting time for the child_schedule , and all other\\nchannels in schedule are padded with Wait to the aforementioned max length. 2. An occupied channel in schedule will always occupy all channels of the corresponding component (qubit,\\ncoupler, …). This is handled by keeping track of occupied durations for each component (no unnecessary padding\\nis added to channels which do not have an actual physical pulse). 3. After the schedules are combined, all the common channels of schedule and child_schedule are blocked\\nup to their common maximum length. This algorithm should not be used with variable sampling rates in the schedule channels. In that case, use extend_hard_boundary_in_seconds() instead. schedule ( Schedule ) – Schedule that should be extended with child_schedule . Modified in place. child_schedule ( Schedule ) – Child schedule to be added. child_components ( set [ str ] ) – Components (qubits, couplers, computational_resonators) that have at least\\none channel in child_schedule . neighborhood_components ( set [ str ] ) – QPU components neighboring the child_components that should\\nadditionally be blocked in the scheduling. component_durations ( dict [ str , int ] ) – Blocked durations for each component used by schedule .\\nThese act as the earliest starting points for a new segment added to any of the channels\\nof the component, but will also block the component even if it has no occupied channels\\nin the schedule yet or ever (e.g. a computational resonator).\\nModified in place. is_alap ( bool ) – Whether the scheduling strategy is ALAP (As Late As Possible). None previous iqm.pulse.scheduler.BLOCKING next iqm.pulse.scheduler.extend_hard_boundary_in_seconds © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CZ_TruncatedGaussianSmoothedSquare","url":"/iqm-pulse/api/iqm.pulse.gates.cz.CZ_TruncatedGaussianSmoothedSquare.html","description":"Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flu...","content":"Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian_CRF next CouplerFluxPulseQubitACStarkPulseGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.get_waveform_parameters","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.get_waveform_parameters.html","description":"Parameters that are required to initialize the given Waveform class. n_samples is handled separately since it is determined by the Instruction duration\\nand channel sample rate, and thus is shared by a...","content":"Parameters that are required to initialize the given Waveform class. n_samples is handled separately since it is determined by the Instruction duration\\nand channel sample rate, and thus is shared by all the waveforms of the Instruction. wave ( type [ Waveform ] ) – waveform class label_prefix ( str ) – optional prefix for the parameter labels for providing additional information parameters of wave , in the format expected by GateImplementation.parameters . Waveform parameters\\nthat have a defined default will be returned as Setting objects and those that do not have default\\nas Parameter objects. dict [ str , Setting | Parameter] previous iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING next CompositeCache © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.get_implementation_class","url":"/iqm-pulse/api/iqm.pulse.gates.get_implementation_class.html","description":"Get gate implementation class by class name. class_name ( str ) – type [ GateImplementation ] | None previous iqm.pulse.gates.expose_implementation next iqm.pulse.gates.register_implementation © Copyr...","content":"Get gate implementation class by class name. class_name ( str ) – type [ GateImplementation ] | None previous iqm.pulse.gates.expose_implementation next iqm.pulse.gates.register_implementation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.scheduler.extend_hard_boundary_in_seconds","url":"/iqm-pulse/api/iqm.pulse.scheduler.extend_hard_boundary_in_seconds.html","description":"The same as extend_hard_boundary , but the scheduling is done in seconds. Used when the probe channel sampling rate differs from the other channels’ rate.\\nThe incoming schedules measure Instruction du...","content":"The same as extend_hard_boundary , but the scheduling is done in seconds. Used when the probe channel sampling rate differs from the other channels’ rate.\\nThe incoming schedules measure Instruction durations in samples, but component_durations is in seconds. schedule ( Schedule ) – Schedule that should be extended with child_schedule . Modified in place. child_schedule ( Schedule ) – Child schedule to be added. child_components ( set [ str ] ) – Components (qubits, couplers, computational_resonators) that have at least\\none channel in child_schedule . neighborhood_components ( set [ str ] ) – Components neighboring the child_components that should\\nadditionally be blocked in the scheduling. component_durations ( dict [ str , float ] ) – Blocked durations for each component in schedule .\\nThese act as the earliest starting points for new segment added to any of the channels\\nof a given component, but will also block the component even if it has no occupied channels\\nin the schedule yet or ever (e.g. a computational resonator).\\nThe durations are in seconds. Modified in place. is_alap ( bool ) – Whether the scheduling strategy is ALAP (As Late As Possible). channel_properties ( dict [ str , ChannelProperties ] ) – Mapping from channel name to its properties (e.g. the sample rates\\nand granularities). None previous iqm.pulse.scheduler.extend_hard_boundary next iqm.pulse.scheduler.extend_schedule © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CosineRise","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.CosineRise.html","description":"Bases: Waveform Cosine Rise waveform. This waveform assumes that during its duration, the only thing happening is signal occurring to the required\\namplitude.\\nThe waveform is made for pairing with ‘Con...","content":"Bases: Waveform Cosine Rise waveform. This waveform assumes that during its duration, the only thing happening is signal occurring to the required\\namplitude.\\nThe waveform is made for pairing with ‘Constant’ waveform to enable arbitrarily long pulses with smooth rise part.\\nThe rise time is equal to pulse duration. rise_time – Dummy parameter, used only as due to a bug. FIXME it is not used, placed for resolving exa bug n_samples ( int ) – Module: iqm.pulse.playlist.waveforms Attributes n_samples Requested number of samples for the waveform. Methods Actually samples the waveform. sample_coords ( ndarray ) – coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous CosineFall next CosineRiseFallDerivative © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"TimeBox","url":"/iqm-pulse/api/iqm.pulse.timebox.TimeBox.html","description":"Bases: object Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Each TimeBox can be labeled using a human-readable label describing it, and opera...","content":"Bases: object Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Each TimeBox can be labeled using a human-readable label describing it, and operates on a number\\nof locus components , using some of their control channels.  It can be either atomic or composite . An atomic box only contains a single Schedule . A composite box contains a sequence of other TimeBoxes as its children.\\nThe locus components are the union of the locus components of the children.\\nIf two children use the same channel so that they cannot happen simultaneously, they must\\nhappen in the order they occur in the sequence. A box can be made atomic by resolving it using ScheduleBuilder.resolve_timebox .\\nThe time duration of the box is determined by its contents and the way they are scheduled during the resolution. TimeBoxes can be concatenated with the following rules: Addition concatenates the children of the operands into a single TimeBox. The pipe operation groups two TimeBoxes together without concatenating. Iterables of Boxes are treated as the sum of the elements. Let a, b, c, d be TimeBoxes. Then Module: iqm.pulse.timebox Attributes scheduling Determines how the contents of a composite TimeBox are scheduled by ScheduleBuilder. scheduling_algorithm Determines the algorithm used in converting the TimeBox to a Schedule. label Description the contents of the box for users' convenience. locus_components Names of the QPU components on which this timebox operates. atom Resolved contents of the TimeBox, or None if not resolved. children Further Timeboxes inside this TimeBox. neighborhood_components Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox . Methods atomic Build an atomic timebox from a schedule. composite Build a composite timebox from a sequence of timeboxes. print Print a simple representation of the contents of this box. set_alap Set the scheduling strategy to As late as possible (ALAP). set_asap Set the scheduling strategy to As soon as possible (ASAP). validate Validate the contents of the TimeBox. label ( str ) – locus_components ( set [ str ] ) – atom ( Schedule | None ) – children ( tuple [ TimeBox , ... ] ) – scheduling ( SchedulingStrategy ) – scheduling_algorithm ( SchedulingAlgorithm ) – neighborhood_components ( dict [ int , set [ str ] ] ) – Description the contents of the box for users’ convenience. Has no functional effect. Names of the QPU components on which this timebox operates. These can include additional components\\nto the ones included in one of the channels occupied by this TimeBox . The components included in this\\nattribute will be blocked in scheduling, in addition to the ones dictated by the neighborhood range (see neighborhood_components ). Resolved contents of the TimeBox, or None if not resolved. Further Timeboxes inside this TimeBox. Determines how the contents of a composite TimeBox are scheduled by ScheduleBuilder.\\nHas no meaning for an atomic TimeBox. Determines the algorithm used in converting the TimeBox to a Schedule. Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox .\\nThese are used in the scheduling when the corresponding neighborhood range is used.\\nThe scheduling algorithm computes the neighborhood components (unless it has been already precomputed by\\ne.g. the GateImplementation ) and caches them under this attribute. Neighborhood range 0 means just the components\\naffected by one of the channels in self.atom + self.locus , 1 means also neighboring couplers, 2 the\\ncomponents connected to those couplers, and so on. Note: range 0 may differ from self.locus_components : it can\\nhave additional components that have occupied channels in self but are not defined as a part of the ‘locus’ of\\nthis TimeBox for any reason. Build a composite timebox from a sequence of timeboxes. boxes ( Iterable [ TimeBox | Iterable [ TimeBox ] ] ) – contents of the new timebox. Any iterables of timeboxes will be flattened (recursively) and extended\\nto the contents in the same order. label ( str ) – label of the new timebox scheduling ( SchedulingStrategy ) – scheduling strategy to use when resolving the new timebox scheduling_algorithm ( SchedulingAlgorithm ) – scheduling algorithm to use when resolving the new timebox composite timebox containing boxes as its children TimeBox Build an atomic timebox from a schedule. schedule ( Schedule ) – contents of the new timebox locus_components ( Iterable [ str ] ) – names QPU components schedule operates on label ( str ) – label of the new timebox atomic timebox containing schedule TimeBox Validate the contents of the TimeBox. path ( tuple [ str , ... ] ) – Labels of ancestor boxes, to generate a better error message. None Set the scheduling strategy to As soon as possible (ASAP). TimeBox Set the scheduling strategy to As late as possible (ALAP). TimeBox Print a simple representation of the contents of this box. _idxs ( tuple [ int , ... ] ) – None previous SchedulingStrategy next utils © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.playlist.schedule.TOLERANCE","url":"/iqm-pulse/api/iqm.pulse.playlist.schedule.TOLERANCE.html","description":"remove when COMP-1281 is done. TODO previous schedule next Nothing © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"remove when COMP-1281 is done. TODO previous schedule next Nothing © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ReadoutTrigger","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.ReadoutTrigger.html","description":"Bases: Instruction Instruction for playing a probe pulse and acquiring the associated readout results. Module: iqm.pulse.playlist.instructions Attributes probe_pulse Probe pulse to play, usually a Mul...","content":"Bases: Instruction Instruction for playing a probe pulse and acquiring the associated readout results. Module: iqm.pulse.playlist.instructions Attributes probe_pulse Probe pulse to play, usually a MultiplexedIQPulse. acquisitions Active readout acquisition methods associated with this trigger instance. duration Time duration of the instruction. Methods duration ( int ) – probe_pulse ( MultiplexedIQPulse ) – acquisitions ( tuple [ AcquisitionMethod , ... ] ) – Probe pulse to play, usually a MultiplexedIQPulse. Active readout acquisition methods associated with this trigger instance. previous MultiplexedIQPulse next RealPulse © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"gate_implementation","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.html","description":"Implementing abstract quantum operations as instruction schedules. Note Note the conceptual difference between quantum operations (ops) and instruction schedules . Ops represent abstract, ideal comput...","content":"Implementing abstract quantum operations as instruction schedules. Note Note the conceptual difference between quantum operations (ops) and instruction schedules . Ops represent abstract, ideal computational\\noperations, whereas instruction schedules represent concrete control signal sequences for the\\nquantum computer. One can (approximately) implement an op using a number of different\\ninstruction schedules. Full path: iqm.pulse.gate_implementation Module Attributes Locus Sequence of QPU component physical names a quantum operation is acting on. OILCalibrationData Calibration data for a particular implementation of a particular quantum operation at a particular locus. OICalibrationData For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. OCalibrationData For a particular quantum operation, maps implementation names to their calibration data. OpCalibrationDataTree Maps quantum operation names to their calibration data. NestedParams Nested dict defining the parameters required by GateImplementation classes. SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING Locus mapping name for mapping all components that have the drive operation defined. SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING Locus mapping name for mapping all components that have the readout operation defined. SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING Locus mapping name for mapping all components that have the flux operation defined and the flux controller has an AWG. PROBE_LINES_LOCUS_MAPPING Locus mapping name for mapping all probe lines. Functions get_waveform_parameters (wave[, label_prefix]) Parameters that are required to initialize the given Waveform class. Classes CompositeCache Cache for CompositeGate TimeBoxes. CompositeGate Utility base class for creating gate implementations that are defined in terms of other gate implementations. CustomIQWaveforms Base class for GateImplementations using custom waveform definition with IQPulses. GateImplementation ABC for implementing quantum gates and other quantum operations using instruction schedules. SinglePulseGate Base class for GateImplementations that play a single pulse on a single channel. Inheritance previous CircuitOperationList next iqm.pulse.gate_implementation.Locus © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.validation.InvalidInstructionError","url":"/iqm-pulse/api/iqm.pulse.validation.InvalidInstructionError.html","description":"Error raised when encountering an invalid instruction. previous iqm.pulse.validation.AWGScheduleValidationError next iqm.pulse.validation.PlaylistValidationError © Copyright 2019-2025, IQM Finland Oy....","content":"Error raised when encountering an invalid instruction. previous iqm.pulse.validation.AWGScheduleValidationError next iqm.pulse.validation.PlaylistValidationError © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.circuit_operations.reshape_unitary","url":"/iqm-pulse/api/iqm.pulse.circuit_operations.reshape_unitary.html","description":"Extend a unitary propagator to act on a larger system. Given a unitary matrix acting on N qubits, indices of N qubits in a larger Hilbert space, and the number\\nof qubits in that Hilbert space, calcula...","content":"Extend a unitary propagator to act on a larger system. Given a unitary matrix acting on N qubits, indices of N qubits in a larger Hilbert space, and the number\\nof qubits in that Hilbert space, calculate a unitary acting on the larger Hilbert space, which acts as\\nthe given unitary on the N selected qubits and as identity on the others. unitary ( tuple [ tuple [ float , ... ] , ... ] ) – original unitary as a nested tuple for hashing & caching purposes. indices ( tuple [ int , ... ] ) – qubit indices in the larger Hilbert space, all in range(num_qubits) n_qubits ( int ) – number of qubits in the larger Hilbert space Unitary matrix acting as unitary on the selected qubits in the larger Hilbert space. ndarray previous iqm.pulse.circuit_operations.reorder next CircuitOperationList © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Measure_Constant_Qnd","url":"/iqm-pulse/api/iqm.pulse.gates.measure.Measure_Constant_Qnd.html","description":"Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, non quantum demolition, dispersive\\nmeasurements in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure...","content":"Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, non quantum demolition, dispersive\\nmeasurements in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . Required calibration data, may be nested alias of Constant alias of Constant previous Measure_Constant next Measure_CustomWaveforms © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Barrier","url":"/iqm-pulse/api/iqm.pulse.gates.barrier.Barrier.html","description":"Bases: GateImplementation GateImplementation for the n-qudit barrier metaoperation. Returns a schedule with zero-duration Block metainstructions.\\nWhen this is appended to another Schedule ,\\nit causes ...","content":"Bases: GateImplementation GateImplementation for the n-qudit barrier metaoperation. Returns a schedule with zero-duration Block metainstructions.\\nWhen this is appended to another Schedule ,\\nit causes the affected channels to be padded with Wait instructions to the same length,\\nwhich in turn imposes a definite temporal order for the operations on different sides of\\nthe barrier (the ones preceding it are always executed first). Note Assumes that all instructions involve either the drive, flux or probe channels of the locus QPU components. channels – channels related to the locus QPU components, to be blocked parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Module: iqm.pulse.gates.barrier Attributes symmetric True iff the implementation is symmetric in its locus components. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float previous barrier next conditional © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ABC_Constant_smooth","url":"/iqm-pulse/api/iqm.pulse.gates.prx.ABC_Constant_smooth.html","description":"Bases: PRX_GateImplementation ABC class for creating gates with an arbitrarily long Constant pulses with smooth rise and fall.\\nThis pulse creates a :’Segment’ consisting of three instructions : [rise_...","content":"Bases: PRX_GateImplementation ABC class for creating gates with an arbitrarily long Constant pulses with smooth rise and fall.\\nThis pulse creates a :’Segment’ consisting of three instructions : [rise_waveform, main_waveform, fall_waveform].\\nThis class is created so that one can use middle waveform as a constant, thus enabling to use arbitrarily\\nlong pulses, not limited by the awg memory. main_waveform: The middle part of the pulse, which should (but doesn’t have to) be a Constant waveform\\nrise_waveform: rise part of the pulse\\nfall_waveform: fall part of the pulse\\nchannel: Name of the drive channel on which the AC Stark pulse is played. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.prx Attributes main_waveform  rise_waveform  fall_waveform  Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Phased x rotation gate. angle ( float ) – rotation angle (in radians) phase ( float ) – phase angle (in radians) boxed instruction schedule implementing the phased x rotation gate TimeBox Returns the main part pulse. Waveform is the same for both I and Q channels n_samples ( int ) – amplitude_i ( float ) – amplitude_q ( float ) – phase ( float ) – IQPulse Returns a rise pulse. n_samples ( int ) – amplitude_i ( float ) – amplitude_q ( float ) – IQPulse Returns a fall pulse n_samples ( int ) – amplitude_i ( float ) – amplitude_q ( float ) – IQPulse previous iqm.pulse.gates.prx.get_unitary_prx next Constant_PRX_with_smooth_rise_fall © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CZ_Slepian_CRF","url":"/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian_CRF.html","description":"Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be ...","content":"Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of Slepian Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian_ACStarkCRF next CZ_TruncatedGaussianSmoothedSquare © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CCPRX_Composite_DRAGCosineRiseFall","url":"/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite_DRAGCosineRiseFall.html","description":"Bases: CCPRX_Composite Conditional drag_crf pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that ...","content":"Bases: CCPRX_Composite Conditional drag_crf pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Mapping from operation names to the designated default implementation of that operation. Filling this attribute\\nallows one to define a different default implementation from the common default in self.builder.op_table to\\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\\nCompositeGate will use the common default as the default implementation for it. previous CCPRX_Composite next CCPRX_Composite_DRAGGaussian © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.utils.normalize_angle","url":"/iqm-pulse/api/iqm.pulse.utils.normalize_angle.html","description":"Normalize the given angle to (-pi, pi]. angle ( float ) – angle to normalize (in radians) angle normalized to (-pi, pi] float previous iqm.pulse.utils.map_waveform_param_types next iqm.pulse.utils.pha...","content":"Normalize the given angle to (-pi, pi]. angle ( float ) – angle to normalize (in radians) angle normalized to (-pi, pi] float previous iqm.pulse.utils.map_waveform_param_types next iqm.pulse.utils.phase_transformation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"TimeTrace","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.TimeTrace.html","description":"Bases: AcquisitionMethod Capture the raw IQ signal without integration. Module: iqm.pulse.playlist.instructions Attributes duration_samples Length of the capture window, in samples. label Identifier f...","content":"Bases: AcquisitionMethod Capture the raw IQ signal without integration. Module: iqm.pulse.playlist.instructions Attributes duration_samples Length of the capture window, in samples. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) – delay_samples ( int ) – duration_samples ( int ) – Length of the capture window, in samples. previous ThresholdStateDiscrimination next VirtualRZ © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"PRX_DRAGCosineRiseFall","url":"/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGCosineRiseFall.html","description":"Bases: PRX_CustomWaveforms PRX gate, DRAG / CosineRiseFall IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel wavefor...","content":"Bases: PRX_CustomWaveforms PRX gate, DRAG / CosineRiseFall IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). excluded_parameters Parameters names to be excluded from self.parameters . parameters Required calibration data, may be nested Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Builds an x_pi pulse out of the calibration data. IQPulse If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . Required calibration data, may be nested alias of CosineRiseFall alias of CosineRiseFallDerivative previous PRX_CustomWaveformsSX next PRX_DRAGCosineRiseFallSX © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"PRX_DRAGGaussian","url":"/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGGaussian.html","description":"Bases: PRX_CustomWaveforms PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel wave...","content":"Bases: PRX_CustomWaveforms PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . Required calibration data, may be nested alias of TruncatedGaussian alias of TruncatedGaussianDerivative previous PRX_DRAGCosineRiseFallSX next PRX_DRAGGaussianSX © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.playlist.channel.get_channel_properties","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.get_channel_properties.html","description":"Internal function to get channel properties. chip_topology ( ChipTopology ) – drive_controllers ( dict [ str , SettingNode ] ) – flux_controllers ( dict [ str , SettingNode ] ) – readout_controllers (...","content":"Internal function to get channel properties. chip_topology ( ChipTopology ) – drive_controllers ( dict [ str , SettingNode ] ) – flux_controllers ( dict [ str , SettingNode ] ) – readout_controllers ( dict [ str , SettingNode ] ) – tuple [ dict [ str , ChannelProperties ], dict [ str , dict [ str , str ]]] previous channel next iqm.pulse.playlist.channel.get_channel_properties_from_station_settings © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.scheduler.extend_schedule_new","url":"/iqm-pulse/api/iqm.pulse.scheduler.extend_schedule_new.html","description":"Extend a Schedule with another Schedule. Extends A with B , modifying A . The extension can add new channels to A . Can also handle cases where B has a ragged left side, i.e. some of its channels begi...","content":"Extend a Schedule with another Schedule. Extends A with B , modifying A . The extension can add new channels to A . Can also handle cases where B has a ragged left side, i.e. some of its channels begin\\nwith Nothing instructions. A ( Schedule ) – schedule to be extended B ( Schedule ) – schedule to extend A with channels ( dict [ str , ChannelProperties ] ) – properties of the control channels TOL ( float ) – time durations equal or smaller than this are considered zero (in seconds) None previous iqm.pulse.scheduler.extend_schedule next SegmentPointer © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"FluxPulseGate_TGSS_CRF","url":"/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate_TGSS_CRF.html","description":"Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall\\nflux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required c...","content":"Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall\\nflux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous FluxPulseGate_CRF_CRF next default_gates © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"utils","url":"/iqm-pulse/api/iqm.pulse.utils.html","description":"Utility functions. Full path: iqm.pulse.utils Functions load_yaml (path) Load a YAML file from the given path, raise error if the file can't be loaded. map_waveform_param_types (type_hint) Map a pytho...","content":"Utility functions. Full path: iqm.pulse.utils Functions load_yaml (path) Load a YAML file from the given path, raise error if the file can't be loaded. map_waveform_param_types (type_hint) Map a python typehint into EXA Parameter's (DataType, CollectionType) tuple. normalize_angle (angle) Normalize the given angle to (-pi, pi]. phase_transformation ([psi_1, psi_2]) Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the IQ pulse implementing the PRX. previous TimeBox next iqm.pulse.utils.load_yaml © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Measure_Constant","url":"/iqm-pulse/api/iqm.pulse.gates.measure.Measure_Constant.html","description":"Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, dispersive measurement in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_wav...","content":"Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, dispersive measurement in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . Required calibration data, may be nested alias of Constant alias of Constant previous measure next Measure_Constant_Qnd © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"RZ_ACStarkShift","url":"/iqm-pulse/api/iqm.pulse.gates.rz.RZ_ACStarkShift.html","description":"Bases: GateImplementation Implementation of the RZ gate using an AC Stark pulse. An AC Stark pulse is a strong off-resonant drive on a qubit. This pulse leads to a frequency shift of the qubit due\\nto ...","content":"Bases: GateImplementation Implementation of the RZ gate using an AC Stark pulse. An AC Stark pulse is a strong off-resonant drive on a qubit. This pulse leads to a frequency shift of the qubit due\\nto the AC Stark effect. The qubit frequency shift depends on the AC Stark pulse amplitude and frequency. ac_stark_pulse – AC Stark pulse. channel – Name of the drive channel on which the AC Stark pulse is played. parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes ac_stark_waveform  Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float Returns an AC Stark pulse which consists of a modulated I and modulated Q waveform, where the Q quadrature\\nhas an additional phase of -pi/2. n_samples ( int ) – amplitude ( float ) – phase_increment ( float ) – phase ( float ) – IQPulse previous iqm.pulse.gates.rz.get_unitary_rz next RZ_ACStarkShift_CosineRiseFall © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"RZ_Virtual","url":"/iqm-pulse/api/iqm.pulse.gates.rz.RZ_Virtual.html","description":"Bases: GateImplementation Implementation of the RZ gate using the virtual z rotation technique. Implements the RZ gate on a specific qubit using a VirtualRZ instruction, which\\nsimply changes the phase...","content":"Bases: GateImplementation Implementation of the RZ gate using the virtual z rotation technique. Implements the RZ gate on a specific qubit using a VirtualRZ instruction, which\\nsimply changes the phase of the local oscillator driving that qubit.\\nThis requires no calibration data as of now.\\nThe generated VirtualRZ instruction has the shortest possible duration allowed by the instruments. The virtual z rotation method is based on algebraically commuting the RZ gates towards the end\\nof the circuit, until they hit a measurement operation, at which point they are eliminated. It assumes that all the multi-qubit gates in the circuit commute with arbitrary RZ gates (this holds e.g. for CZ\\nsince it is diagonal), measurements are projective and happen in the z basis, so that RZ gates that immediately\\nprecede them do not affect the measurement result or the state after the measurement, and thus\\ncan be removed, and conjugating the single-qubit gates in the circuit with RZ is equivalent to incrementing the phase of the drive\\n(holds for PRX ), which can be accomplished either by incrementing the phase of\\nthe local oscillator of the drive channel, or incrementing the phases of all the IQPulse s\\nfollowing it on the drive channel. If all these assumptions hold we may implement an RZ gate using a VirtualRZ instruction,\\nwith phase_increment equal to the negated rotation angle. channel – name of the drive channel on which the VirtualRZ acts duration – time duration of the VirtualRZ instruction, in seconds parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Module: iqm.pulse.gates.rz Attributes parameters Required calibration data, may be nested Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. Z rotation gate. angle ( float ) – rotation angle (in radians) pulse schedule implementing the z rotation gate TimeBox Required calibration data, may be nested Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \\"<operation_name>.<implementation_name>\\" . Inheriting classes may\\noverride this for different behaviour. operation_name ( str ) – name of the quantum operation. implementation_name ( str ) – name of the implementation name of the locus mapping str previous RZ_ACStarkShift_smoothConstant next sx © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"enums","url":"/iqm-pulse/api/iqm.pulse.gates.enums.html","description":"Enumerations for representing a set of important one- and two-qubit gates. Full path: iqm.pulse.gates.enums Module Attributes XYGATE_UNITARIES Mapping of XYGates to the corresponding SU(2) matrices TW...","content":"Enumerations for representing a set of important one- and two-qubit gates. Full path: iqm.pulse.gates.enums Module Attributes XYGATE_UNITARIES Mapping of XYGates to the corresponding SU(2) matrices TWO_QUBIT_UNITARIES Mapping of TwoQubitGates to the corresponding U(4) matrices Classes TwoQubitGate Enumerates a subset of two-qubit gates. XYGate Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Inheritance previous Delay next iqm.pulse.gates.enums.XYGATE_UNITARIES © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.validation.validate_channel","url":"/iqm-pulse/api/iqm.pulse.validation.validate_channel.html","description":"Validate a single channel. channel_description ( ChannelDescription ) – device_constraints ( ChannelProperties ) – None previous iqm.pulse.validation.validate_awg_and_schedule_compatibility next iqm.p...","content":"Validate a single channel. channel_description ( ChannelDescription ) – device_constraints ( ChannelProperties ) – None previous iqm.pulse.validation.validate_awg_and_schedule_compatibility next iqm.pulse.validation.validate_instruction_and_wf_length © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"UGate","url":"/iqm-pulse/api/iqm.pulse.gates.u.UGate.html","description":"Bases: CompositeGate SU(2) gate implemented using PRX. Assumes the chosen PRX implementation uses resonant driving, and that the virtual RZ technique can be used. Module: iqm.pulse.gates.u Attributes ...","content":"Bases: CompositeGate SU(2) gate implemented using PRX. Assumes the chosen PRX implementation uses resonant driving, and that the virtual RZ technique can be used. Module: iqm.pulse.gates.u Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\\nalso be constructed via self.builder , but these will always use the common calibration. Convert pulses into timebox, via Euler decomposition. theta ( float ) – phi ( float ) – lam ( float ) – TimeBox previous iqm.pulse.gates.u.get_unitary_u next playlist © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Block","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.Block.html","description":"Bases: Instruction Behave strictly as if outputting zero-valued samples for the duration of the instruction. Used to block a control channel during compilation.\\nA more strict version of Wait , cannot ...","content":"Bases: Instruction Behave strictly as if outputting zero-valued samples for the duration of the instruction. Used to block a control channel during compilation.\\nA more strict version of Wait , cannot be replaced with DD sequences during compilation.\\nConverted to a Wait instruction at the end of compilation process. In “Tetris” scheduling, several Block instructions can overlap in time, whereas Waits cannot. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods duration ( int ) – previous AcquisitionMethod next ComplexIntegration © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"RealChannelConfig","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.RealChannelConfig.html","description":"Bases: ChannelConfiguration Requested configuration of a real channel. Module: iqm.pulse.playlist.channel Attributes sample_rate sample rate of the instrument responsible for the channel (in Hz) Metho...","content":"Bases: ChannelConfiguration Requested configuration of a real channel. Module: iqm.pulse.playlist.channel Attributes sample_rate sample rate of the instrument responsible for the channel (in Hz) Methods sample_rate ( float ) – sample rate of the instrument responsible for the channel (in Hz) previous ProbeChannelProperties next instructions © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"SinglePulseGate","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.SinglePulseGate.html","description":"Bases: GateImplementation Base class for GateImplementations that play a single pulse on a single channel. The pulse is created in _get_pulse() and the channel is specified in _get_pulse_channel() .\\nT...","content":"Bases: GateImplementation Base class for GateImplementations that play a single pulse on a single channel. The pulse is created in _get_pulse() and the channel is specified in _get_pulse_channel() .\\nThe base class also implements a basic _call() method that just inserts the specified pulse into the specified\\nchannel, and a method for computing the pulse’s duration. All of these methods can be overridden in subclasses. Module: iqm.pulse.gate_implementation Attributes Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Return the channel for the pulse. The default is the drive channel for a single qubit locus. str Return pulse based on the provided calibration data. Instruction Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float previous GateImplementation next gates © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.utils.load_yaml","url":"/iqm-pulse/api/iqm.pulse.utils.load_yaml.html","description":"Load a YAML file from the given path, raise error if the file can’t be loaded. path ( str ) – path to a YAML file contents of the YAML file as Python types dict [ str , Any ] previous utils next iqm.p...","content":"Load a YAML file from the given path, raise error if the file can’t be loaded. path ( str ) – path to a YAML file contents of the YAML file as Python types dict [ str , Any ] previous utils next iqm.pulse.utils.map_waveform_param_types © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Nothing","url":"/iqm-pulse/api/iqm.pulse.playlist.schedule.Nothing.html","description":"Bases: Instruction Used to extend a control channel in time, without blocking it, during scheduling. Can overlap with any other Instruction.\\nConverted to a Wait instruction at the end of scheduling. M...","content":"Bases: Instruction Used to extend a control channel in time, without blocking it, during scheduling. Can overlap with any other Instruction.\\nConverted to a Wait instruction at the end of scheduling. Module: iqm.pulse.playlist.schedule Attributes duration Time duration of the instruction. Methods duration ( int ) – previous iqm.pulse.playlist.schedule.TOLERANCE next Schedule © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.move.apply_move_gate_phase_corrections","url":"/iqm-pulse/api/iqm.pulse.gates.move.apply_move_gate_phase_corrections.html","description":"Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. Note Assumes the MOVE gate implementation is based on MOVE_CustomWaveforms . Processes all the M...","content":"Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. Note Assumes the MOVE gate implementation is based on MOVE_CustomWaveforms . Processes all the MOVE sandwiches in schedule , summing up the VirtualRZ instructions\\non the resonator virtual drive channels, adding the phase difference resulting from\\nqubit-resonator detuning to the total, and applying it on the qubit at the end of each sandwich. schedule ( Schedule ) – instruction schedule to process builder ( ScheduleBuilder ) – schedule builder that was used to build schedule apply_detuning_corrections ( bool ) – if True, also apply detuning phase corrections copy of schedule with the phase corrections applied Schedule previous move next iqm.pulse.gates.move.validate_move_instructions © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"IQPulse","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.IQPulse.html","description":"Bases: Instruction Play an upconverted pulse that contains real in-phase and quadrature waveforms. Module: iqm.pulse.playlist.instructions Attributes modulation_frequency Modulation frequency of the w...","content":"Bases: Instruction Play an upconverted pulse that contains real in-phase and quadrature waveforms. Module: iqm.pulse.playlist.instructions Attributes modulation_frequency Modulation frequency of the waveforms, in units of the sampling rate. phase Phase of the pulse relative to the channel frequency, in radians. phase_increment Relative phase increment to the phase in the carrier frequency of this pulse and all pulses that are played after it. scale_i Scaling factor for the I quadrature. scale_q Scaling factor for the Q quadrature. wave_i I quadrature envelope. wave_q Q quadrature envelope. duration Time duration of the instruction. Methods get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) – wave_i ( Waveform ) – wave_q ( Waveform ) – scale_i ( float ) – scale_q ( float ) – phase ( float ) – modulation_frequency ( float ) – phase_increment ( float ) – I quadrature envelope. Q quadrature envelope. Scaling factor for the I quadrature. Scaling factor for the Q quadrature. Phase of the pulse relative to the channel frequency, in radians. Modulation frequency of the waveforms, in units of the sampling rate.\\nThis modulation is additional to the channel frequency.\\nThe default value of 0.0 does not modulate.\\nNote that the phase of this modulation resets for every instruction, that is, successive instances of the same\\nmodulated pulse are not phase coherent. Relative phase increment to the phase in the carrier frequency of this pulse and all pulses that\\nare played after it. Unit: rad. Validate the instruction attributes. ValueError – something about the instruction is not ok Returns all the waveforms the Instruction contains. tuple [ Waveform , …] previous FluxPulse next Instruction © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING.html","description":"Locus mapping name for mapping all components that have the flux operation defined and the flux controller\\nhas an AWG. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPI...","content":"Locus mapping name for mapping all components that have the flux operation defined and the flux controller\\nhas an AWG. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING next iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CZ_Slepian","url":"/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian.html","description":"Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be p...","content":"Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of Slepian Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_GaussianSmoothedSquare next CZ_Slepian_ACStarkCRF © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"pulse","url":"/iqm-pulse/api/iqm.pulse.html","description":"Control pulses, gates and instruction schedules for quantum computers. Full path: iqm.pulse Subpackages and modules base_utils Base utility functions with no dependencies on other iqm.pulse modules. b...","content":"Control pulses, gates and instruction schedules for quantum computers. Full path: iqm.pulse Subpackages and modules base_utils Base utility functions with no dependencies on other iqm.pulse modules. builder Tools for building instruction schedules. circuit_operations Representing quantum circuits as lists of CircuitOperations. gate_implementation Implementing abstract quantum operations as instruction schedules. gates Implementations of quantum gates. playlist Control pulses and instruction schedules for quantum computers. quantum_ops Quantum operations. scheduler Tools for composing instruction schedules in time. timebox Reserving QPU resources in instruction scheduling. utils Utility functions. validation Validation of playlists and instructions schedules. previous API Reference next base_utils © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"timebox","url":"/iqm-pulse/api/iqm.pulse.timebox.html","description":"Reserving QPU resources in instruction scheduling. Full path: iqm.pulse.timebox Classes MultiplexedProbeTimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. Sch...","content":"Reserving QPU resources in instruction scheduling. Full path: iqm.pulse.timebox Classes MultiplexedProbeTimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. SchedulingAlgorithm Algorithms for resolving composite TimeBoxes into atomic ones. SchedulingStrategy Different scheduling strategies for the contents of composite TimeBoxes. TimeBox Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Inheritance previous SegmentPointer next MultiplexedProbeTimeBox © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.validation.AWGScheduleValidationError","url":"/iqm-pulse/api/iqm.pulse.validation.AWGScheduleValidationError.html","description":"Error raised when schedule validation for an AWG fails. previous AWGScheduleValidationData next iqm.pulse.validation.InvalidInstructionError © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025...","content":"Error raised when schedule validation for an AWG fails. previous AWGScheduleValidationData next iqm.pulse.validation.InvalidInstructionError © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.NestedParams","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.NestedParams.html","description":"Nested dict defining the parameters required by GateImplementation classes. alias of dict [ str , Parameter | Setting | dict ] previous iqm.pulse.gate_implementation.OpCalibrationDataTree next iqm.pul...","content":"Nested dict defining the parameters required by GateImplementation classes. alias of dict [ str , Parameter | Setting | dict ] previous iqm.pulse.gate_implementation.OpCalibrationDataTree next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"playlist","url":"/iqm-pulse/api/iqm.pulse.playlist.playlist.html","description":"Sequences of instruction schedules to execute. Full path: iqm.pulse.playlist.playlist previous Wait next schedule © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"Sequences of instruction schedules to execute. Full path: iqm.pulse.playlist.playlist previous Wait next schedule © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CompositeCache","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.CompositeCache.html","description":"Bases: object Cache for CompositeGate TimeBoxes. Result from CompositeGate.__call__\`() (or other methods returning a TimeBox) cannot be stored in the normal\\ncache GateImplementation._timebox_cache as ...","content":"Bases: object Cache for CompositeGate TimeBoxes. Result from CompositeGate.__call__\`() (or other methods returning a TimeBox) cannot be stored in the normal\\ncache GateImplementation._timebox_cache as composites can include any gates in their calls, and we cannot trust\\nthat the cache is flushed correctly just based on if the composite itself has its own calibration data changed\\n(we would have to flush also when any of the composite’s members get new calibration, and this cannot consistently\\nbe deduced). For this reason, CompositeCache will be flushed whenever ANY gate implementation gets new calibration\\ndata. Module: iqm.pulse.gate_implementation Methods flush Flush the CompositeCache. get Get a TimeBox from the cache. set Set a TimeBox into the cache. Set a TimeBox into the cache. gate_implementation ( GateImplementation ) – gate implementation that created the TimeBox. cache_key ( tuple [ Any , ... ] ) – hashable key identifying the TimeBox (usually the CompositeGate.__call__() arguments cast\\ninto a tuple). timebox ( TimeBox ) – TimeBox that will be added to the cache. extra_id ( str ) – extra string id for further identifying the result if needed (for example if the TimeBox did not\\ncome from the call method, but some other method, this could be the method’s name). None Get a TimeBox from the cache. gate_implementation ( GateImplementation ) – gate implementation that created the TimeBox. cache_key ( tuple [ Any , ... ] ) – hashable key identifying the TimeBox (usually the CompositeGate.__call__() arguments cast\\ninto a tuple). extra_id ( str ) – extra string id for further identifying the result (for example if the TimeBox did not come\\nfrom the call method, but some other method, this could be the method’s name). The cached TimeBox or None if not fund for this gate_implementation , cache_key , and extra_id . TimeBox | None Flush the CompositeCache. None previous iqm.pulse.gate_implementation.get_waveform_parameters next CompositeGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.scheduler.extend_schedule","url":"/iqm-pulse/api/iqm.pulse.scheduler.extend_schedule.html","description":"Extend a Schedule with another Schedule. Extends A with B , modifying both. The extension can add new channels to A . If B has a ragged left side, i.e. some of its channels begin with Nothing instruct...","content":"Extend a Schedule with another Schedule. Extends A with B , modifying both. The extension can add new channels to A . If B has a ragged left side, i.e. some of its channels begin with Nothing instructions,\\nthis algorithm will not always produce an optimally short schedule. A ( Schedule ) – schedule to be extended B ( Schedule ) – schedule to extend A with channels ( dict [ str , ChannelProperties ] ) – properties of the control channels TOL ( float ) – time durations equal or smaller than this are considered zero (in seconds) None previous iqm.pulse.scheduler.extend_hard_boundary_in_seconds next iqm.pulse.scheduler.extend_schedule_new © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"PRX_CustomWaveforms","url":"/iqm-pulse/api/iqm.pulse.gates.prx.PRX_CustomWaveforms.html","description":"Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. Module: iqm.pulse.gates.prx Attributes dependent_waves ...","content":"Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\\nto all such implementations. Builds an x_pi pulse out of the calibration data. amplitude_i ( float ) – amplitude_q ( float ) – n_samples ( int ) – IQPulse If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . previous Constant_PRX_with_smooth_rise_fall next PRX_CustomWaveformsSX © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"base_utils","url":"/iqm-pulse/api/iqm.pulse.base_utils.html","description":"Base utility functions with no dependencies on other iqm.pulse modules. Full path: iqm.pulse.base_utils Functions merge_dicts (A, B[, path, merge_nones]) Merge two dictionaries recursively, leaving th...","content":"Base utility functions with no dependencies on other iqm.pulse modules. Full path: iqm.pulse.base_utils Functions merge_dicts (A, B[, path, merge_nones]) Merge two dictionaries recursively, leaving the originals unchanged. previous pulse next iqm.pulse.base_utils.merge_dicts © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.reset.RESET_FEEDBACK_KEY","url":"/iqm-pulse/api/iqm.pulse.gates.reset.RESET_FEEDBACK_KEY.html","description":"The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should\\nnot be manually used in fast feedback). previous iqm.pulse.gates.reset.RESET_MEASURE...","content":"The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should\\nnot be manually used in fast feedback). previous iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY next Reset_Conditional © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"AcquisitionMethod","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.AcquisitionMethod.html","description":"Bases: object Describes a way to acquire readout data. Module: iqm.pulse.playlist.instructions Attributes label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay fro...","content":"Bases: object Describes a way to acquire readout data. Module: iqm.pulse.playlist.instructions Attributes label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) – delay_samples ( int ) – Identifier for the returned data, like QB1__readout.time_trace . Delay from beginning of probe pulse to beginning of acquisition window, in samples. previous instructions next Block © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.quantum_ops.QuantumOpTable","url":"/iqm-pulse/api/iqm.pulse.quantum_ops.QuantumOpTable.html","description":"Type for representing tables of known quantum operations, maps names of the ops to their definitions. alias of dict [ str , QuantumOp ] previous quantum_ops next iqm.pulse.quantum_ops.validate_locus_c...","content":"Type for representing tables of known quantum operations, maps names of the ops to their definitions. alias of dict [ str , QuantumOp ] previous quantum_ops next iqm.pulse.quantum_ops.validate_locus_calibration © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.OCalibrationData","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.OCalibrationData.html","description":"For a particular quantum operation, maps implementation names to their calibration data. alias of dict [ str , dict [ tuple [ str , …] | None , dict [ str , Any ]]] previous iqm.pulse.gate_implementat...","content":"For a particular quantum operation, maps implementation names to their calibration data. alias of dict [ str , dict [ tuple [ str , …] | None , dict [ str , Any ]]] previous iqm.pulse.gate_implementation.OICalibrationData next iqm.pulse.gate_implementation.OpCalibrationDataTree © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Measure_CustomWaveforms","url":"/iqm-pulse/api/iqm.pulse.gates.measure.Measure_CustomWaveforms.html","description":"Bases: CustomIQWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. You may define a measurement implementation that uses the Waveform instances S...","content":"Bases: CustomIQWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. You may define a measurement implementation that uses the Waveform instances Something and SomethingElse as the probe pulse waveforms in the\\nI and Q channels as follows: class MyGate(Measure_CustomWaveforms, i_wave=Something, q_wave=SomethingElse) . The measure operation is factorizable, and its arity is 0, which together mean that it can operate\\non loci of any dimensionality, but is calibrated only on single component loci. When the gate is constructed in the len(locus) > 1 , case (e.g. builder.get_implementation('measure', ('QB1', 'QB2', 'QB3'))() ) the resulting TimeBox is constructed from the calibrated single-component gates. For each measured component, the readout IQPulse will be modulated with the\\nintermediate frequency (IF), computed as the difference between the readout\\nfrequency of that component and the probe line center frequency, and offset in phase\\nby the readout phase of the component. The measurement is implemented using a ReadoutTrigger instruction, with a duration set by the\\nrequirements of the acquisition(s). Note that this is typically different from gates.measure.constant.{locus}.duration , which is the probe pulse duration. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. probe_timebox Returns a \\"naked\\" probe timebox that supports convenient multiplexing through MultiplexedProbeTimeBox.__add__ . time_trace Returns a multiplexed simultaneous measurement with an additional time trace acquisition. parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\\nto all such implementations. Cache for probe_timebox() . Cache for time_trace() . Builds a probe pulse and an acquisition method using the calibration data. Subclasses may override this method if needed. waveform_params ( dict [ str , Any ] ) – root_params ( dict [ str , Any ] ) – if_freq ( float ) – tuple [ IQPulse , AcquisitionMethod ] Returns a “naked” probe timebox that supports convenient multiplexing through MultiplexedProbeTimeBox.__add__ . This method can be used if the user wants to control the multiplexing explicitly. With two MultiplexedProbeTimeBox\`\`es \`\`A and B the result A + B has all the ReadoutTrigger instructions\\non each probe channel of A and B multiplexed together and played simultaneously. key ( str ) – The readout results generated on this trigger will be assigned to f\\"{qubit}__{key}\\" , where qubit goes over the component names in self.locus . If empty,\\nthe key “readout.result” will be used to maintain backwards compatibility. feedback_key ( str ) – The signals generated by this measure operation are routed using this key for\\nfast feedback purposes. See __call__() . do_acquisition ( bool ) – if False, no acquisitions are added. MultiplexedProbeTimeBox containing the ReadoutTrigger instruction. MultiplexedProbeTimeBox Returns a TimeBox containing the multiplexed simultaneous measurement. If len(self.locus) == 1 , the TimeBox contains the measurement for just that component, otherwise\\nthe measurements of components that belong to the same probeline are multiplexed together. The returned TimeBox instances behave like any other TimeBox in scheduling and circuit\\ngeneration. With measurement TimeBoxes A and B the result A + B first plays the ReadoutTrigger instructions of A and only then those of B in each probe channel. If the multiplexing features of MultiplexedProbeTimeBox are needed, the method probe_timebox() can be used. In scheduling, the returned TimeBox blocks the locus components and the probe\\nlines they are associated with. key ( str ) – Readout results generated on this trigger will be assigned to the acquisition labels f\\"{qubit}__{key}\\" , where qubit goes over the component names in self.locus .\\nIf empty, the key \\"readout.result\\" will be used to maintain backwards compatibility. feedback_key ( str ) – If the readout mode is “threshold”, the results generated by this measure operation\\nare routed using the label f\\"{qubit}__{feedback_key}\\" for fast feedback purposes.\\nThe signals are picked up by ConditionalInstruction\`s that have the same label. The default value \` ””\`\` means the signal is not routed anywhere. TODO: currently the HW does not\\nsupport multiple feedback keys per drive channel, so the actual key used will be FEEDBACK_KEY whenever any non-empty key is inputted. When the HW is improved, the actual key the user inputs\\nshould be passed. TimeBox containing the ReadoutTrigger instruction. TimeBox Returns a multiplexed simultaneous measurement with an additional time trace acquisition. The returned TimeBox is the same as the one returned by __call__() except the time trace\\nacquisition is appended to the acquisitions of each probe line’s ReadoutTrigger instruction. key ( str ) – Readout results generated on this trigger will be used to assigned to f\\"{qubit}__{key}\\" , where qubit goes over the component names in self.locus , whereas\\nthe recorded time traces will be assigned to f\\"{probe_line}__{key}\\" where probe_line goes through all the probe lines associated with self.locus .\\nIf empty, the key \\"readout.result\\" will be used for integrated results and the key \\"readout.time_trace\\" for the recorded time traces. acquisition_delay ( float | None ) – optionally override the time trace acquisition delay with this value (given in\\nseconds). Does not affect the acqusition delays of the integrated measurements. acquisition_duration ( float | None ) – optionally override the time trace acquisition duration with this value (given in\\nseconds). Does not affect the integration lengths of the integrated measurements. feedback_key ( str ) – The signals generated by the integration are routed using this label, prefixed by\\nthe component. See __call__() . TimeBox containing the ReadoutTrigger instruction. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \\"<operation_name>.<implementation_name>\\" . Inheriting classes may\\noverride this for different behaviour. operation_name ( str ) – name of the quantum operation. implementation_name ( str ) – name of the implementation name of the locus mapping str If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . previous Measure_Constant_Qnd next ProbePulse_CustomWaveforms © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"RealPulse","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.RealPulse.html","description":"Bases: Instruction Play a real-valued pulse. Module: iqm.pulse.playlist.instructions Attributes wave Shape of the pulse. scale Scaling factor for the waveform. duration Time duration of the instructio...","content":"Bases: Instruction Play a real-valued pulse. Module: iqm.pulse.playlist.instructions Attributes wave Shape of the pulse. scale Scaling factor for the waveform. duration Time duration of the instruction. Methods get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) – wave ( Waveform ) – scale ( float ) – Shape of the pulse. Scaling factor for the waveform. Validate the instruction attributes. ValueError – something about the instruction is not ok Returns all the waveforms the Instruction contains. tuple [ Waveform , …] previous ReadoutTrigger next ThresholdStateDiscrimination © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"IQChannelConfig","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.IQChannelConfig.html","description":"Bases: RealChannelConfig Requested configuration of an IQ channel. Module: iqm.pulse.playlist.channel Attributes frequency upconversion frequency for the IQ pulses (in Hz) sample_rate sample rate of t...","content":"Bases: RealChannelConfig Requested configuration of an IQ channel. Module: iqm.pulse.playlist.channel Attributes frequency upconversion frequency for the IQ pulses (in Hz) sample_rate sample rate of the instrument responsible for the channel (in Hz) Methods sample_rate ( float ) – frequency ( float ) – upconversion frequency for the IQ pulses (in Hz) previous ChannelProperties next ProbeChannelProperties © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"flux_multiplexer","url":"/iqm-pulse/api/iqm.pulse.gates.flux_multiplexer.html","description":"GateImplementation for correcting flux crosstalk for a given set of flux-pulse TimeBoxes Full path: iqm.pulse.gates.flux_multiplexer Module Attributes TOLERANCE Tolerance for the maximum absolute valu...","content":"GateImplementation for correcting flux crosstalk for a given set of flux-pulse TimeBoxes Full path: iqm.pulse.gates.flux_multiplexer Module Attributes TOLERANCE Tolerance for the maximum absolute value in a waveform for considering it to be uniformly zero. Classes FluxMultiplexer_SampleLinear Linear flux pulse multiplexed (user for correcting flux crosstalk). Inheritance previous XYGate next iqm.pulse.gates.flux_multiplexer.TOLERANCE © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"prx","url":"/iqm-pulse/api/iqm.pulse.gates.prx.html","description":"Single-qubit PRX gate. The phased x rotation (PRX) gate is defined as where the rotation angle \\\\(\\\\theta\\\\) and the phase angle \\\\(\\\\phi\\\\) are in radians. It rotates the qubit state around an axis that li...","content":"Single-qubit PRX gate. The phased x rotation (PRX) gate is defined as where the rotation angle \\\\(\\\\theta\\\\) and the phase angle \\\\(\\\\phi\\\\) are in radians. It rotates the qubit state around an axis that lies in the XY plane of the Bloch sphere. Full path: iqm.pulse.gates.prx Functions get_unitary_prx (angle, phase) Unitary for a PRX gate. Classes ABC_Constant_smooth ABC class for creating gates with an arbitrarily long Constant pulses with smooth rise and fall. Constant_PRX_with_smooth_rise_fall Constant PRX pulse with cosine rise and fall padding. PRX_CustomWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. PRX_CustomWaveformsSX ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. PRX_DRAGCosineRiseFall PRX gate, DRAG / CosineRiseFall IQ pulse implementation. PRX_DRAGCosineRiseFallSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. PRX_DRAGGaussian PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. PRX_DRAGGaussianSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. PRX_GateImplementation ABC for different implementations of the PRX gate. PRX_SinglePulse_GateImplementation ABC for PRX gates implemented using a single IQ pulse. Inheritance previous MoveMarker next iqm.pulse.gates.prx.get_unitary_prx © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"base","url":"/iqm-pulse/api/iqm.pulse.playlist.visualisation.base.html","description":"Function for visualising playlists. Full path: iqm.pulse.playlist.visualisation.base Functions inspect_playlist (playlist[, segments]) Creates an HTML string from the given playlist and segments. prev...","content":"Function for visualising playlists. Full path: iqm.pulse.playlist.visualisation.base Functions inspect_playlist (playlist[, segments]) Creates an HTML string from the given playlist and segments. previous visualisation next iqm.pulse.playlist.visualisation.base.inspect_playlist © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CCPRX_Composite","url":"/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite.html","description":"Bases: CompositeGate Classically controlled PRX gate. Applies a PRX gate conditioned on a discriminated readout result obtained in the same segment (active feedback).\\nApplies a PRX gate if the result ...","content":"Bases: CompositeGate Classically controlled PRX gate. Applies a PRX gate conditioned on a discriminated readout result obtained in the same segment (active feedback).\\nApplies a PRX gate if the result is 1, and a Wait of equal duration if the result is 0.\\nUses the default implementation of PRX underneath, so no extra calibration is needed. Module: iqm.pulse.gates.conditional Attributes parameters control_delays contains the times it takes for the classical control signal from each probe line (readout instrument) to become usable for the drive AWG implementing the PRX gate. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – control_delays contains the times it takes for the classical control signal from each\\nprobe line (readout instrument) to become usable for the drive AWG implementing the PRX gate.\\nThe delays must be in the same order as the probe lines are listed in\\nthe {drive_controller}.awg.feedback_sources station setting. Two TimeBoxes that together implement the classically controlled PRX gate. The first Timebox is for the control signal delay, and the second has a ConditionalInstruction.\\nThe delay TimeBox operates only on a virtual channel and is used to block the pulse TimeBox\\nuntil there has been enough time for the control signal to arrive.\\nThe delay is specified by the control_delays gate parameter. In normal operation, the boxes can be placed sequentially without causing unnecessary delays.\\nTo care of the timing yourself, simply ignore the first TimeBox. angle ( float ) – The PRX rotation angle (rad). phase ( float ) – The PRX rotation phase (rad). feedback_qubit ( str ) – The qubit that was measured to create the feedback bit. feedback_key ( str ) – Identifies the feedback signal if feedback_qubit was measured multiple times.\\nThe feedback label is then f\\"{feedback_qubit}__{feedback_key}\\" .\\nTODO: currently the HW does not support multiple feedback keys per drive channel, so this argument has\\nno effect. The conditional prx will always listen feedback from the label f\\"{feedback_qubit}__{FEEDBACK_KEY}\\" . When the HW is improved, the actual key the user inputs\\nshould be used. A TimeBox for the signal delay, and a TimeBox with a ConditionalInstruction inside. list [ TimeBox ] previous conditional next CCPRX_Composite_DRAGCosineRiseFall © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.playlist.channel.round_duration_to_granularity_samples","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.round_duration_to_granularity_samples.html","description":"Round a time duration to the least common multiple of the granularities of the given channels. Note Assumes that all the given control channels have the same sample rate. channels ( Iterable [ Channel...","content":"Round a time duration to the least common multiple of the granularities of the given channels. Note Assumes that all the given control channels have the same sample rate. channels ( Iterable [ ChannelProperties ] ) – all these channels must be able to handle the rounded duration duration ( float ) – time duration in s round_up ( bool ) – whether to round the duration up, or to the closest granularity force_min_duration ( bool ) – whether to force the duration to be at least the largest instruction_duration_min of channels duration rounded to common channel granularity, in samples int previous iqm.pulse.playlist.channel.get_channel_properties_from_station_settings next ChannelConfiguration © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Reset_Wait","url":"/iqm-pulse/api/iqm.pulse.gates.reset.Reset_Wait.html","description":"Bases: GateImplementation Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Adds a Wait pulse for all the (non-virtual) channels of the locus compon...","content":"Bases: GateImplementation Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Adds a Wait pulse for all the (non-virtual) channels of the locus components. In addition, blocks all the probes\\nassociated with the locus and in case the locus is connected via couplers, blocks them as well. The operation\\nis factorizable, so that the calibration data it uses (i.e. the wait duration in seconds) is defined for each\\ncomponent, and when acting on multiple components, the maximum of the associated wait durations will be applied. Reset by relaxation is intended to be used in the circuit initialisation between shots / segments.\\nIt also can be called on specific qubits inside a segment, but as it works by\\nwaiting longer than the qubit relaxation time, the states of all the other qubits\\nwill likely have been destroyed as well by the time the reset has finished. Module: iqm.pulse.gates.reset Attributes parameters Required calibration data, may be nested Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_custom_locus_mapping Supported loci: all components that have channels. wait_box TimeBox that contains Wait instructions for all non-virtual channels associated with self.locus . parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Required calibration data, may be nested TimeBox that contains Wait instructions for all non-virtual channels associated with self.locus . Does not block any additional components beside the locus itself. TimeBox The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float Supported loci: all components that have channels. chip_topology ( ChipTopology ) – component_to_channels ( dict [ str , Iterable [ str ] ] ) – dict [ tuple [ str , …] | frozenset [ str ], tuple [ str , …]] | None previous Reset_Conditional next rz © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.builder.validate_quantum_circuit","url":"/iqm-pulse/api/iqm.pulse.builder.validate_quantum_circuit.html","description":"Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) – quantum circuit to be validated op_table ( dict [ str , QuantumOp ] ) – table c...","content":"Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) – quantum circuit to be validated op_table ( dict [ str , QuantumOp ] ) – table containing allowed/calibrated quantum operations require_measurements ( bool ) – iff True the circuit must include at least one measurement operation ValueError – operations do not constitute a valid quantum circuit None previous iqm.pulse.builder.load_config next CircuitOperation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"cz","url":"/iqm-pulse/api/iqm.pulse.gates.cz.html","description":"Two-qubit controlled-Z (CZ) gate. The CZ gate flips the relative phase of the \\\\(|11⟩\\\\) state.\\nIt can be represented by the unitary matrix Full path: iqm.pulse.gates.cz Classes CZ_CRF CZ gate using a C...","content":"Two-qubit controlled-Z (CZ) gate. The CZ gate flips the relative phase of the \\\\(|11⟩\\\\) state.\\nIt can be represented by the unitary matrix Full path: iqm.pulse.gates.cz Classes CZ_CRF CZ gate using a CosineRiseFall flux pulse on the coupler. CZ_CRF_ACStarkCRF Controlled-Z two-qubit gate. CZ_GaussianSmoothedSquare CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. CZ_Slepian CZ gate using a Slepian flux pulse on the coupler. CZ_Slepian_ACStarkCRF Controlled-Z two-qubit gate. CZ_Slepian_CRF CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. CZ_TruncatedGaussianSmoothedSquare CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. CouplerFluxPulseQubitACStarkPulseGate Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. FluxPulseGate Discrete two locus component gate implemented using flux pulses, virtual RZs, and the interaction mediated by the coupler. FluxPulseGate_CRF_CRF CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. FluxPulseGate_TGSS_CRF CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Inheritance previous CCPRX_Composite_DRAGGaussian next CZ_CRF © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.scheduler.BLOCKING","url":"/iqm-pulse/api/iqm.pulse.scheduler.BLOCKING.html","description":"Nonsolid Instructions that nevertheless block. previous iqm.pulse.scheduler.NONSOLID next iqm.pulse.scheduler.extend_hard_boundary © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"Nonsolid Instructions that nevertheless block. previous iqm.pulse.scheduler.NONSOLID next iqm.pulse.scheduler.extend_hard_boundary © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ChannelProperties","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelProperties.html","description":"Bases: object Defines the properties of a control or measurement channel. All ZI instruments (HDAWG, UHFQA, SHFSG, SHFQA) can handle control pulses and waits where the\\nnumber of samples is 32 + n * 16...","content":"Bases: object Defines the properties of a control or measurement channel. All ZI instruments (HDAWG, UHFQA, SHFSG, SHFQA) can handle control pulses and waits where the\\nnumber of samples is 32 + n * 16 , where n in {0, 1, 2, ...} . Module: iqm.pulse.playlist.channel Attributes blocks_component Whether content in this channel should block the entire component that it is associated with in the scheduling. is_iq HACK, True iff this is an IQ channel. is_virtual Virtual channels are only used on the frontend side during compilation and scheduling. sample_rate sample rate of the instrument responsible for the channel (in Hz) instruction_duration_granularity all instruction durations on this channel must be multiples of this granularity (in samples) instruction_duration_min all instruction durations on this channel must at least this long (in samples) compatible_instructions instruction types that are allowed on this channel Methods duration_to_int_samples Convert a time duration to an integer number of samples at the channel sample rate. duration_to_samples Convert a time duration to number of samples at the channel sample rate. duration_to_seconds Convert a time duration in samples at the channel sample rate to seconds. round_duration_to_granularity Round a time duration to the channel granularity. sample_rate ( float ) – instruction_duration_granularity ( int ) – instruction_duration_min ( int ) – compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) – is_iq ( bool ) – is_virtual ( bool ) – blocks_component ( bool ) – sample rate of the instrument responsible for the channel (in Hz) all instruction durations on this channel must be multiples of this granularity (in samples) all instruction durations on this channel must at least this long (in samples) instruction types that are allowed on this channel HACK, True iff this is an IQ channel. TODO do better Virtual channels are only used on the frontend side during compilation and scheduling.\\nThey are removed from the Schedule before it is sent to Station\\nControl. For example, virtual drive channels of computational resonators. Whether content in this channel should block the entire component that it is associated with in the scheduling.\\nTypically all physical channels should block their components, but certain virtual channels might not\\nrequire this. Convert a time duration to number of samples at the channel sample rate. duration ( float ) – time duration in s duration in samples float Convert a time duration in samples at the channel sample rate to seconds. duration ( float ) – time duration in samples duration in seconds float Convert a time duration to an integer number of samples at the channel sample rate. duration must be sufficiently close to an integer number of samples, and\\nthat number must be something the channel can handle. duration ( float ) – time duration in s message ( str ) – message identifying the duration we are testing check_min_samples ( bool ) – If True, check that the output is at least instruction_duration_min . duration as an integer number of samples ValueError – duration is not close to an integer number of samples, or is\\n    otherwise unacceptable to the channel int Round a time duration to the channel granularity. duration ( float ) – time duration in s round_up ( bool ) – whether to round the durations up, or to the closest granularity force_min_duration ( bool ) – whether to force the duration to be at least instruction_duration_min duration rounded to channel granularity, in s float previous ChannelDescription next IQChannelConfig © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CircuitOperationList","url":"/iqm-pulse/api/iqm.pulse.circuit_operations.CircuitOperationList.html","description":"Bases: list List of CircuitOperation objects representing a quantum circuit. The class is used to work with CircuitOperations directly. It is mostly meant as\\nconvenience to enable easy creation of cir...","content":"Bases: list List of CircuitOperation objects representing a quantum circuit. The class is used to work with CircuitOperations directly. It is mostly meant as\\nconvenience to enable easy creation of circuits, calculations of their properties, and mapping them onto physical\\nqubits. In addition to the circuit contents, this class has two important attributes: qubits and table . qubits defines the list of qubits which are allowed to be in the loci of all the\\nCircuitOperations present in the list. Think about it as Qiskit’s QuantumRegister. table is a QuantumOpTable , which contains all the QuantumOp s which are allowed in the circuit. In most cases, the table is\\nsimply taken to contain all the default operations defined in iqm.pulse .\\nWhen you use this class with a ScheduleBuilder , it is good practice to set table = builder.op_table . The QuantumOpTable is mutable, so any additional registered\\ngates can automatically be usable in any CircuitOperationList associated with that\\nScheduleBuilder instance. The fundamental use of the class would be to first define a new instance: The num_qubits parameter populates the qubits attribute with qubits QB1-QBn,\\nin this case ['QB1', 'QB2'] . Alternatively, you can provide qubits directly: To add your own QuantumOpTable, initialize like this: Remembering that the table is mutable. If you already have a list of CircuitOperations, you can initialize with it: Calling the find_qubits() method populates the qubits attribute with the qubits found in loci of\\nthe operations in the original circuit. If the list is empty, it will set qubits to an empty list,\\nwhich most of the time is not what you want to do. The class has the __add__ , __mul__ and __getitem__ methods redefined, which means circuit * 3 , circuit1 + circuit2 and circuit[0:4] will produce a CircuitOperationList\\nwith the same qubits and table attributes as the original. To add a prx operation to the list, call: The class also has shortcut methods defined, so the above can be shortened to which is exactly the same syntax as in Qiskit, with the addition of the implementation name\\nwhich usually does not need to be used. The names of the shortcut methods are taken from the\\nattached table at init. All the operations with non-zero arity\\nwill be added as shortcuts. If all the operations in the circuit are unitary, you can calculate the unitary propagator of\\nthe entire circuit by calling: The dimension of the unitary will always be defined by the qubits attribute. In particular, if your circuit\\ncontains 3 qubits, 'QB1', 'QB2', 'QB3' , but you only add gates to the first two, the resulting unitary will\\nstill be an 8x8 matrix, corresponding to the three qubits 'QB1', 'QB2', 'QB3' , in the big endian convention.\\nWith no operations affecting 'QB3' , the action of the unitary on this qubit is identity. To map the circuit onto physical qubits, all you need to do is call: This will create a copy of the circuit, with all the placeholder qubits replaced by the physical qubits, with the\\norder defined by the qubits attribute. For example, if qubits = ['QB1', 'Alice', 'ZZZ'] , and physical_qubits = ['QB2', 'QB5', 'QB10'] , all occurrences of 'QB1' will be mapped to 'QB2' , 'Alice' to 'QB5' and 'ZZZ' to 'QB10' . The original circuit is not modified, so you can create many copies with\\ndifferent physical qubits, which is helpful when running parallel experiments on a large chip. contents ( Iterable [ CircuitOperation ] ) – Circuit operations to initialize the circuit with. Can be left out. qubits ( list [ str ] ) – Qubits allowed to be used in operation loci in the circuit. num_qubits ( int ) – Number of qubits in the circuit, will initialize qubits with ['QB1', 'QB2', ...] .\\nIgnored if qubits is given. table ( QuantumOpTable | None ) – Allowed quantum operations. Module: iqm.pulse.circuit_operations Attributes qubits  Methods add_op Adds a new CircuitOperation to the circuit. add_qubits Adds generic placeholder qubits from 1 to n. barrier Add barrier to the circuit compose A safer way to add circuits together, but will probably take time. count_ops Count each type of operation in the circuit. find_qubits Set attribute qubits to qubits in the loci of operations in the list. get_unitary Calculate the overall unitary implemented by a sequence of CircuitOperations. map_loci Creates a new list of CircuitOperation s with locus mapped onto physical qubits. Set attribute qubits to qubits in the loci of operations in the list. None Adds generic placeholder qubits from 1 to n. n ( int ) – None Calculate the overall unitary implemented by a sequence of CircuitOperations. self – list of CircuitOperations in order qubit_names ( list [ str ] | None ) – Optionally, the ordering of the qubits. Array describing the action of the circuit in big endian convention. ndarray Adds a new CircuitOperation to the circuit. Appends a new CircuitOperation at the end of the list. The CircuitOperation is created using a QuantumOp name from the\\nQuantumOpTable attached to the CircuitOperationList. The locus of that CircuitOperation is built from the qubits stored in qubits , by selecting\\nthe qubits at indices given by locus_indices . For example, if qubits is ['QB1', 'QB2', 'QB4'] , and the locus_indices is [2, 1] , the locus of the new CircuitOperation will be ('QB4', 'QB2') . All arguments for the values of the\\nparams of the requested QuantumOp need to be provided. name ( str ) – Name of the QuantumOp which will generate a new CircuitOperation . locus_indices ( Sequence [ int ] ) – Indices of the qubits in the attribute .qubits which will become the locus of the operation. args – Any arguments the CircuitOperation needs, must correspond to the params of the QuantumOp . impl_name ( str | None ) – Name of the implementation to use when converting the CircuitOperation into\\na Timebox later. None Add barrier to the circuit None A safer way to add circuits together, but will probably take time. All the CircuitOperation s from the 'other' list are appended to the end of\\nthis list. The wire k of the second circuit is connected to wire locus_indices[k] of the first. This\\nis achieved by mapping the locus of each operation in the second circuit onto the qubits of the first. For example, if the qubits of the first list are ['QB1', 'QB2'] , the second list has ['QB3', 'QB4'] , and the locus_indices argument is [1,0] , all the operations in the second list will have\\ntheir 'QB3' mapped to 'QB2' and 'QB4' mapped to 'QB1' . other – Second CircuitOperationList. Must have less or equal qubits than this one. locus_indices ( list [ int ] | None ) – Indices of the qubits in this CircuitOperationList onto which the qubits in the second\\ncircuit ar mapped. Self, with new operations added. Self Count each type of operation in the circuit. Counter mapping operation names to numbers of times they occur in the circuit. Counter Creates a new list of CircuitOperation s with locus mapped onto physical qubits. Creates a fresh list of fresh CircuitOperation s with fresh arguments. If locus is provided, it needs to have the same length as the total number of qubits across the circuit,\\nand the qubits will then be mapped onto the new locus. If it is not provided, this is identical to a deepcopy\\nof the original list. locus ( list [ str ] | None ) – List of new qubits to replace the qubits in the loci of the operations in the circuit. make_circuit ( bool ) – If True, creates a CircuitOperationList . If False, it is just a list. New CircuitOperationList with loci mapped onto new locus. CircuitOperationList | list [ CircuitOperation ] Add the convenience methods for adding new operations, based on the default QuantumOpTable . name ( str ) – None previous iqm.pulse.circuit_operations.reshape_unitary next gate_implementation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CCPRX_Composite_DRAGGaussian","url":"/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite_DRAGGaussian.html","description":"Bases: CCPRX_Composite Conditional drag_gaussian pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of ...","content":"Bases: CCPRX_Composite Conditional drag_gaussian pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Mapping from operation names to the designated default implementation of that operation. Filling this attribute\\nallows one to define a different default implementation from the common default in self.builder.op_table to\\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\\nCompositeGate will use the common default as the default implementation for it. previous CCPRX_Composite_DRAGCosineRiseFall next cz © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY","url":"/iqm-pulse/api/iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY.html","description":"Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore\\nemphasizes the fact that this label should not be manually used in fast feedback). pr...","content":"Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore\\nemphasizes the fact that this label should not be manually used in fast feedback). previous reset next iqm.pulse.gates.reset.RESET_FEEDBACK_KEY © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gate_implementation.Locus","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.Locus.html","description":"Sequence of QPU component physical names a quantum operation is acting on. The order may matter. alias of tuple [ str , …] previous gate_implementation next iqm.pulse.gate_implementation.OILCalibratio...","content":"Sequence of QPU component physical names a quantum operation is acting on. The order may matter. alias of tuple [ str , …] previous gate_implementation next iqm.pulse.gate_implementation.OILCalibrationData © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"VirtualRZ","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.VirtualRZ.html","description":"Bases: Instruction Change the upconversion phase reference. The phase change can be done either by updating the phase of the local oscillator directly using\\na hardware instruction, or algebraically by...","content":"Bases: Instruction Change the upconversion phase reference. The phase change can be done either by updating the phase of the local oscillator directly using\\na hardware instruction, or algebraically by incrementing IQPulse.phase of all the IQPulses\\nfollowing the VirtualRZ instruction in the Segment . Module: iqm.pulse.playlist.instructions Attributes phase_increment Phase increment for the local oscillator of a drive channel, in radians. duration Time duration of the instruction. Methods duration ( int ) – phase_increment ( float ) – Phase increment for the local oscillator of a drive channel, in radians. previous TimeTrace next Wait © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Schedule","url":"/iqm-pulse/api/iqm.pulse.playlist.schedule.Schedule.html","description":"Bases: object Set of synchronously executed AWG/readout programs that start on a single trigger. Consists of a number of channels , each containing a Segment of Instruction s for a specific controller...","content":"Bases: object Set of synchronously executed AWG/readout programs that start on a single trigger. Consists of a number of channels , each containing a Segment of Instruction s for a specific controller.  For each channel, maps the channel name to\\nits Segment of Instructions. Mutable. To make an independent copy, use copy() . contents ( Mapping [ str , Iterable [ Instruction ] ] | None ) – mapping from channel name to a list of Instructions for that channel duration ( int | None ) – Optional precomputed duration (in samples). In cases where the duration is known and performance\\nis critical, the duration can be given in the constructor, allowing one to skip computing it. Module: iqm.pulse.playlist.schedule Attributes duration The maximum duration of the Schedule's channels, in samples. Methods add_channels Add new empty channels to the schedule. append Append a single Instruction to a specific channel in the Schedule. channels The channels occupied in self . cleanup Cleans up the schedule by removing things that do not affect the execution. copy Make an independent copy of the schedule. duration_in_seconds Schedule duration in seconds, taking into account the sample rates of the channels. extend Append given Instruction to a specific channel in the Schedule. front_pad Modifies the schedule in place by front-padding it with Wait instructions. front_pad_in_seconds Modifies the schedule in place by front-padding it with Wait instructions. has_content_in Returns True if self has content in any of the given channels, otherwise False . items Iterator over the schedule channel names and segments. pad_to_hard_box Pad channels in self to the maximum channel length found within with Wait instructions. pad_to_hard_box_in_seconds Pad channels in self to the maximum channel length (seconds) found within with Wait instructions. pprint Fixed-width character graphics representation of the Schedule. reverse Copy of the schedule with the order of the instructions in each channel reversed. reverse_hard_box Copy of the schedule with the order of the instructions in each channel reversed. validate Validate the contents of the schedule. The maximum duration of the Schedule’s channels, in samples. Computed only when needed and cached for performance. Schedule duration in seconds, taking into account the sample rates of the channels. channel_properties ( dict [ str , ChannelProperties ] ) – channel properties. schedule duration (in seconds) float Fixed-width character graphics representation of the Schedule. Assumes the Instruction.duration s are in samples. time_unit ( int ) – unit of time represented by a single symbol (in samples) str Iterator over the schedule channel names and segments. The channels occupied in self . KeysView Make an independent copy of the schedule. Mutating the original must not affect the copy, or vice versa.\\nInstructions are immutable, so they need not be copied. copy of the schedule Schedule Add new empty channels to the schedule. If a given channel (identified by its controller name) already exist in the schedule,\\nit is unchanged. Modifies self . channel_names ( Iterable [ str ] ) – names of the controllers for which empty channels are added None Append a single Instruction to a specific channel in the Schedule. channel ( str ) – name of the channel to append the instruction to instruction ( Instruction ) – instruction to append None Append given Instruction to a specific channel in the Schedule. channel ( str ) – name of the channel to append the instructions to instructions ( Iterable [ Instruction ] ) – instructions to append None Modifies the schedule in place by front-padding it with Wait instructions. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. In that\\ncase, use the method front_pad_in_seconds . to_duration ( int ) – duration of the resulting schedule, in samples self , with the padding Schedule Modifies the schedule in place by front-padding it with Wait instructions. The new duration is given in seconds, and this method works also with variable sample rates. channel_properties ( dict [ str , ChannelProperties ] ) – channel properties. to_duration ( float ) – self , with the padding Pad channels in self to the maximum channel length found within with Wait instructions. The Wait\`\`s are appended to the end of the segments. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. In that case, use the method \`\`pad_to_hard_box_in_seconds . None Pad channels in self to the maximum channel length (seconds) found within with Wait instructions. The Waits are appended to the end of the segments. The segment durations are compared in seconds, so this\\nmethod works in the case of variable sampling rates as well. The padding is added to a channel only if the\\ndifference between the channel’s duration and the maximum duration is larger than the smallest possible\\ninstruction duration for that channel. channel_properties ( dict [ str , ChannelProperties ] ) – channel properties (containing the sampling rates and granularities). None Copy of the schedule with the order of the instructions in each channel reversed. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. To preserve synchronization of the channels, the channels are first rear-padded\\nwith Nothing instructions. Schedule Copy of the schedule with the order of the instructions in each channel reversed. No additional time-synchronisation logic is implemented, so this method will break the synchronisation\\nif self is not a schedule with matching durations in all segments. Schedule Cleans up the schedule by removing things that do not affect the execution. Removes empty channels, and channels that only have idling instructions. Modifies self . Schedule Validate the contents of the schedule. path ( tuple [ str , ... ] ) – None Returns True if self has content in any of the given channels, otherwise False . channel_names ( Iterable [ str ] ) – bool previous Nothing next Segment © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.builder.build_quantum_ops","url":"/iqm-pulse/api/iqm.pulse.builder.build_quantum_ops.html","description":"Builds the table of known quantum operations. Hardcoded default native ops table is extended by the ones in ops .\\nIn case of name collisions, the content of ops takes priority over the defaults. ops (...","content":"Builds the table of known quantum operations. Hardcoded default native ops table is extended by the ones in ops .\\nIn case of name collisions, the content of ops takes priority over the defaults. ops ( dict [ str , Any ] ) – Contents of the gate_definitions section defining file. ( the quantum operations in the configuration YAML ) – function. ( Modified by the ) – Mapping from quantum operation name to its definition dict [ str , QuantumOp ] previous builder next iqm.pulse.builder.load_config © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"waveforms","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.html","description":"Waveform definitions. This module defines some waveforms that don’t have special serialization, and reimports\\nwaveforms that do from iqm.models.playlist.waveforms .\\nSee the link for documentation of w...","content":"Waveform definitions. This module defines some waveforms that don’t have special serialization, and reimports\\nwaveforms that do from iqm.models.playlist.waveforms .\\nSee the link for documentation of waveforms that don’t appear here. Full path: iqm.pulse.playlist.waveforms Classes Chirp Linear chirp, defined as ChirpImag Imaginary part of the linear chirp, which sets the phase to $-pi/2$. Cosine Periodic sinusoidal waveform which defaults to cosine. CosineFall Cosine Rise waveform. CosineRise Cosine Rise waveform. CosineRiseFallDerivative Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. ModulatedCosineRiseFall Modulated Cosine Rise Fall waveform. Slepian Slepian waveform, which minimizes non-adiabatic errors during a gate. Inheritance previous iqm.pulse.playlist.visualisation.base.inspect_playlist next Chirp © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.delay.DELAY_MAX_DURATION_SECONDS","url":"/iqm-pulse/api/iqm.pulse.gates.delay.DELAY_MAX_DURATION_SECONDS.html","description":"Maximum duration for individual Delay operations, in seconds. previous delay next Delay © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"Maximum duration for individual Delay operations, in seconds. previous delay next Delay © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ComplexIntegration","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.ComplexIntegration.html","description":"Bases: AcquisitionMethod Perform a weighted integration of the IQ raw signal, resulting in a complex number. Module: iqm.pulse.playlist.instructions Attributes weights Integration weights. label Ident...","content":"Bases: AcquisitionMethod Perform a weighted integration of the IQ raw signal, resulting in a complex number. Module: iqm.pulse.playlist.instructions Attributes weights Integration weights. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) – delay_samples ( int ) – weights ( IQPulse ) – Integration weights. previous Block next ConditionalInstruction © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"default_gates","url":"/iqm-pulse/api/iqm.pulse.gates.default_gates.html","description":"This file defines the default quantum gates and operations for IQM’s pulse control system Full path: iqm.pulse.gates.default_gates previous FluxPulseGate_TGSS_CRF next delay © Copyright 2019-2025, IQM...","content":"This file defines the default quantum gates and operations for IQM’s pulse control system Full path: iqm.pulse.gates.default_gates previous FluxPulseGate_TGSS_CRF next delay © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CZ_CRF_ACStarkCRF","url":"/iqm-pulse/api/iqm.pulse.gates.cz.CZ_CRF_ACStarkCRF.html","description":"Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a cosine rise fall flux pulse for the coupler and a modulated\\ncosine rise fall (CRF) AC Stark pulse ...","content":"Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a cosine rise fall flux pulse for the coupler and a modulated\\ncosine rise fall (CRF) AC Stark pulse on one qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of CosineRiseFall Required calibration data, may be nested alias of ModulatedCosineRiseFall True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_CRF next CZ_GaussianSmoothedSquare © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ThresholdStateDiscrimination","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.ThresholdStateDiscrimination.html","description":"Bases: ComplexIntegration Perform a weighted integration of the IQ raw signal and compare the real part of the result\\nagainst a threshold value, resulting in a boolean. Module: iqm.pulse.playlist.inst...","content":"Bases: ComplexIntegration Perform a weighted integration of the IQ raw signal and compare the real part of the result\\nagainst a threshold value, resulting in a boolean. Module: iqm.pulse.playlist.instructions Attributes feedback_signal_label In fast feedback routing, the transmitted signals are associated with this label. threshold The real part of the integration result is compared against this. weights Integration weights. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) – delay_samples ( int ) – weights ( IQPulse ) – threshold ( float ) – feedback_signal_label ( str ) – The real part of the integration result is compared against this. In fast feedback routing, the transmitted signals are associated with this label.\\nConditionalInstructions whose “condition” field has the string value of feedback_signal_label will receive the signal from this ThresholdStateDiscrimination.\\nEmpty string (default) means the signal is not routed anywhere.\\nThe same feedback_signal_label may not be used multiple times within the same ReadoutTrigger.\\nThe same feedback_signal_label can be used in different ReadoutTriggers and different segments. previous RealPulse next TimeTrace © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.circuit_operations.get_unitary_from_op","url":"/iqm-pulse/api/iqm.pulse.circuit_operations.get_unitary_from_op.html","description":"Unitary matrix representing an operation within the context of the circuit. First, fetches the unitary corresponding to the correct operation from the QuantumOpTable. If that unitary\\nis a function, ge...","content":"Unitary matrix representing an operation within the context of the circuit. First, fetches the unitary corresponding to the correct operation from the QuantumOpTable. If that unitary\\nis a function, gets the matrix by calling the function with values of quantum operation params stored\\nin the operation. Checks whether the size of the unitary is correct. Then, optionally extends that unitary to act\\non the Hilbert space of the entire circuit. op ( CircuitOperation ) – quantum operation instance table ( dict [ str , QuantumOp ] ) – registered quantum operations qubits ( list [ str ] ) – qubits of the whole circuit, in big-endian order Unitary matrix representing op on the Hilbert space of the circuit. ndarray previous iqm.pulse.circuit_operations.get_unitary_from_circuit next iqm.pulse.circuit_operations.reorder © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CosineRiseFallDerivative","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.CosineRiseFallDerivative.html","description":"Bases: Waveform Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. where \\\\(c\\\\) is center_offset , \\\\(r\\\\) is rise_time , and \\\\(p\\\\) is the plateau width,\\ncalcul...","content":"Bases: Waveform Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. where \\\\(c\\\\) is center_offset , \\\\(r\\\\) is rise_time , and \\\\(p\\\\) is the plateau width,\\ncalculated via \\\\(p :=\\\\) full_width - 2 * rise_time . Its values are in \\\\([-1, 1]\\\\) . full_width ( float ) – Duration of the support of the pulse, >= 2 * rise_time . rise_time ( float ) – Duration of the sinusoidal rise (and fall) part of the waveform, >= 0. center_offset ( float ) – The waveform is centered at this offset from the midpoint of the sampling window. n_samples ( int ) – Module: iqm.pulse.playlist.waveforms Attributes center_offset  full_width  rise_time  n_samples Requested number of samples for the waveform. Methods Actually samples the waveform. sample_coords ( ndarray ) – coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous CosineRise next ModulatedCosineRiseFall © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"FluxPulse","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.FluxPulse.html","description":"Bases: RealPulse RealPulse representing a flux pulse. Can store RZ angles for correcting local phase shifts from the computational frame due to flux crosstalk. Module: iqm.pulse.playlist.instructions ...","content":"Bases: RealPulse RealPulse representing a flux pulse. Can store RZ angles for correcting local phase shifts from the computational frame due to flux crosstalk. Module: iqm.pulse.playlist.instructions Attributes rzs Collection of (drive) channel names and RZ angles. wave Shape of the pulse. scale Scaling factor for the waveform. duration Time duration of the instruction. Methods duration ( int ) – wave ( Waveform ) – scale ( float ) – rzs ( tuple [ tuple [ str , float ] , ... ] ) – Collection of (drive) channel names and RZ angles. previous ConditionalInstruction next IQPulse © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.builder.load_config","url":"/iqm-pulse/api/iqm.pulse.builder.load_config.html","description":"Load quantum operation definitions and calibration data from a YAML config file. path ( str ) – path to a YAML config file quantum operation definitions, calibration data tree tuple [ dict [ str , Qua...","content":"Load quantum operation definitions and calibration data from a YAML config file. path ( str ) – path to a YAML config file quantum operation definitions, calibration data tree tuple [ dict [ str , QuantumOp ], dict [ str , dict [ str , dict [ tuple [ str , …] | None , dict [ str , Any ]]]]] previous iqm.pulse.builder.build_quantum_ops next iqm.pulse.builder.validate_quantum_circuit © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ChannelDescription","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelDescription.html","description":"Bases: object Channel specific data, including tables for the instructions and waveforms used. name ( str ) – name of the controller handling the channel, also the name of the channel config ( RealCha...","content":"Bases: object Channel specific data, including tables for the instructions and waveforms used. name ( str ) – name of the controller handling the channel, also the name of the channel config ( RealChannelConfig ) – properties of the channel instruction_table – mapping of the instructions to be executed on this channel. Each\\ninstruction should be unique. waveform_table – Contains mapping of the waveforms to be executed on this channel. Each\\nwaveform should be unique. Module: iqm.pulse.playlist.channel Attributes name  config  instruction_table  waveform_table  Methods add_instruction Add an instruction to the channel. Add an instruction to the channel. Each unique instruction in a channel gets assigned an integer index that can be used to refer to it.\\nIf the instruction has associated Waveform s, they are indexed in a similar manner. instruction ( Instruction ) – instruction to be added index of the instruction int previous ChannelConfiguration next ChannelProperties © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"instructions","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.html","description":"Instructions for control instruments. Full path: iqm.pulse.playlist.instructions Classes AcquisitionMethod Describes a way to acquire readout data. Block Behave strictly as if outputting zero-valued s...","content":"Instructions for control instruments. Full path: iqm.pulse.playlist.instructions Classes AcquisitionMethod Describes a way to acquire readout data. Block Behave strictly as if outputting zero-valued samples for the duration of the instruction. ComplexIntegration Perform a weighted integration of the IQ raw signal, resulting in a complex number. ConditionalInstruction Choice between multiple Instructions, depending on a condition. FluxPulse RealPulse representing a flux pulse. IQPulse Play an upconverted pulse that contains real in-phase and quadrature waveforms. Instruction Command that can be executed by the quantum computer on a control channel. MultiplexedIQPulse Instruction to simultaneously play multiple IQ pulses. ReadoutTrigger Instruction for playing a probe pulse and acquiring the associated readout results. RealPulse Play a real-valued pulse. ThresholdStateDiscrimination Perform a weighted integration of the IQ raw signal and compare the real part of the result against a threshold value, resulting in a boolean. TimeTrace Capture the raw IQ signal without integration. VirtualRZ Change the upconversion phase reference. Wait Behave as if outputting zero-valued samples for the duration of the instruction. Inheritance previous RealChannelConfig next AcquisitionMethod © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"playlist","url":"/iqm-pulse/api/iqm.pulse.playlist.html","description":"Control pulses and instruction schedules for quantum computers. Full path: iqm.pulse.playlist Subpackages and modules channel Control channel properties. instructions Instructions for control instrume...","content":"Control pulses and instruction schedules for quantum computers. Full path: iqm.pulse.playlist Subpackages and modules channel Control channel properties. instructions Instructions for control instruments. playlist Sequences of instruction schedules to execute. schedule Instruction schedules for controlling the instruments. visualisation  waveforms Waveform definitions. previous UGate next channel © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"sx","url":"/iqm-pulse/api/iqm.pulse.gates.sx.html","description":"Single-qubit sqrt(X) gate. The gate is doing pi/2 X gate, with additional Z rotation to correct phase. It rotates the qubit state in XZ plane (or around Y axis) for 90 degree. Full path: iqm.pulse.gat...","content":"Single-qubit sqrt(X) gate. The gate is doing pi/2 X gate, with additional Z rotation to correct phase. It rotates the qubit state in XZ plane (or around Y axis) for 90 degree. Full path: iqm.pulse.gates.sx Classes SXGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Inheritance previous RZ_Virtual next SXGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.validation.validate_awg_and_schedule_compatibility","url":"/iqm-pulse/api/iqm.pulse.validation.validate_awg_and_schedule_compatibility.html","description":"Validates that the given playlist is compatible with the provided AWG data.\\nThe following requirements are validated as they are the same for all controllers. Playlist sampling rate vs. Actual control...","content":"Validates that the given playlist is compatible with the provided AWG data.\\nThe following requirements are validated as they are the same for all controllers. Playlist sampling rate vs. Actual controller sampling rate Instruction granularity with respect to the controllers granularity requirements Checks that no other than supported instructions are used. Checks that instruction length matches waveform length in IQ and RealPulse Checks that all instructions are at least the length of minimum number of samples Checks that Conditional instruction has the same duration in every child instruction channel_description ( ChannelDescription ) – Contains instructions used as well as the channel specific configuration from playlist device_constraints ( AWGScheduleValidationData ) – Contains the actual hardware limitations previous validation next iqm.pulse.validation.validate_channel © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"FluxMultiplexer_SampleLinear","url":"/iqm-pulse/api/iqm.pulse.gates.flux_multiplexer.FluxMultiplexer_SampleLinear.html","description":"Bases: GateImplementation Linear flux pulse multiplexed (user for correcting flux crosstalk). The required calibration data is the flux cross-talk correction matrix, where the element \\\\(C_ij\\\\) represe...","content":"Bases: GateImplementation Linear flux pulse multiplexed (user for correcting flux crosstalk). The required calibration data is the flux cross-talk correction matrix, where the element \\\\(C_ij\\\\) represents\\nthe correction needed for flux component i arising from the crosstalk caused by flux component j , so that\\nafter the corrections, the flux pulse played at i is \\\\(f(t) = A_i w_i(t) + \\\\sum_j C_ij A_j w_j(t)\\\\) ,\\nwhere \\\\(A_j\`\\\\) is the flux pulse amplitude for j and \\\\(w_j(t)\\\\) the (normalized) waveform. The flux crosstalk correction matrix is given in a sparse form via two calibration parameters (we do not support\\ndict- or xarray-valued Parameters yet…). Parameter matrix_index lists the relevant (non-zero) elements of the\\nmatrix as a flat np.array of strings of the form <flux component i>__<flux component j> . Parameter matrix_elements lists the corresponding matrix values \\\\(C_ij\\\\) (the lengths of these arrays must match). TODO: this is for now an experimental R&D implementation, and everything here is subject to change still Module: iqm.pulse.gates.flux_multiplexer Attributes parameters Required calibration data, may be nested Methods get_custom_locus_mapping Locus is \\"global\\" (the whole QPU) represented by an empty tuple for now. parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Required calibration data, may be nested Locus is “global” (the whole QPU) represented by an empty tuple for now. chip_topology ( ChipTopology ) – component_to_channels ( dict [ str , Iterable [ str ] ] ) – dict [ tuple [ str , …] | frozenset [ str ], tuple [ str , …]] | None previous iqm.pulse.gates.flux_multiplexer.TOLERANCE next measure © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Cosine","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.Cosine.html","description":"Bases: Waveform Periodic sinusoidal waveform which defaults to cosine. The use case for this waveform is to do manual modulation of other waveforms. where \\\\(f\\\\) is the frequency, and \\\\(\\\\phi\\\\) the phas...","content":"Bases: Waveform Periodic sinusoidal waveform which defaults to cosine. The use case for this waveform is to do manual modulation of other waveforms. where \\\\(f\\\\) is the frequency, and \\\\(\\\\phi\\\\) the phase of the wave. frequency ( float ) – frequency of the wave, in units of inverse sampling window duration phase ( float ) – phase of the wave, in radians n_samples ( int ) – Module: iqm.pulse.playlist.waveforms Attributes phase  frequency  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords ( ndarray ) – coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\\nBy default all the waveform attributes are “timelike” (the unit for their calibration data is s).\\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\\nconsisting of multiple terms, or frequency-like (calibration data has the unit ‘Hz’).\\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\\nwindow duration. dict [ str , str ] previous ChirpImag next CosineFall © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"rz","url":"/iqm-pulse/api/iqm.pulse.gates.rz.html","description":"Single-qubit RZ gate. The z rotation gate is defined as where the rotation angle \\\\(\\\\phi\\\\) is in radians. Full path: iqm.pulse.gates.rz Functions get_unitary_rz (angle) Unitary for an RZ gate. Classes ...","content":"Single-qubit RZ gate. The z rotation gate is defined as where the rotation angle \\\\(\\\\phi\\\\) is in radians. Full path: iqm.pulse.gates.rz Functions get_unitary_rz (angle) Unitary for an RZ gate. Classes RZ_ACStarkShift Implementation of the RZ gate using an AC Stark pulse. RZ_ACStarkShift_CosineRiseFall AC stark pulse implemented as a modulated cosine rise fall pulse. RZ_ACStarkShift_smoothConstant Constant AC stark pulse with cosine rise and fall padding. RZ_Virtual Implementation of the RZ gate using the virtual z rotation technique. Inheritance previous Reset_Wait next iqm.pulse.gates.rz.get_unitary_rz © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES","url":"/iqm-pulse/api/iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES.html","description":"Mapping of TwoQubitGates to the corresponding U(4) matrices previous iqm.pulse.gates.enums.XYGATE_UNITARIES next TwoQubitGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30....","content":"Mapping of TwoQubitGates to the corresponding U(4) matrices previous iqm.pulse.gates.enums.XYGATE_UNITARIES next TwoQubitGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"conditional","url":"/iqm-pulse/api/iqm.pulse.gates.conditional.html","description":"Classically controlled gates. Full path: iqm.pulse.gates.conditional Classes CCPRX_Composite Classically controlled PRX gate. CCPRX_Composite_DRAGCosineRiseFall Conditional drag_crf pulse. CCPRX_Compo...","content":"Classically controlled gates. Full path: iqm.pulse.gates.conditional Classes CCPRX_Composite Classically controlled PRX gate. CCPRX_Composite_DRAGCosineRiseFall Conditional drag_crf pulse. CCPRX_Composite_DRAGGaussian Conditional drag_gaussian pulse. Inheritance previous Barrier next CCPRX_Composite © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"ProbePulse_CustomWaveforms","url":"/iqm-pulse/api/iqm.pulse.gates.measure.ProbePulse_CustomWaveforms.html","description":"Bases: CustomIQWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. With given Waveform waveform definitions Something and SomethingElse ...","content":"Bases: CustomIQWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. With given Waveform waveform definitions Something and SomethingElse ,\\nyou may define a measurement implementation that uses them as follows: class MyGate(ProbePulse_CustomWaveforms, i_wave=Something, q_wave=SomethingElse) . Contrary to the Measure_CustomWaveforms class, this implementation acts on proble lines directly (i.e. its locus is a single probe line). The measurement IQPulse instruction will not be automatically modulated\\nby any frequency, so any modulations should be included in the I and Q waveforms themselves. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\\nto all such implementations. Builds a probe pulse and acquisition methods using the calibration data. Subclasses may override this method if needed. waveform_params ( dict [ str , Any ] ) – root_params ( dict [ str , Any ] ) – tuple [ IQPulse , tuple [ AcquisitionMethod , AcquisitionMethod ]] Returns a TimeBox containing the probe pulse measurement. In scheduling, the returned TimeBox blocks only the probe line ( self.locus[0] ). key ( str ) – The time trace results generated on this trigger will be used to assigned to f\\"{probe_line}__{key}\\" , where probe_line is the one that handles self.locus[0] . If empty,\\nthe key “readout.time_trace” is used. TimeBox containing the ReadoutTrigger instruction. TimeBox If set True , the Q channel waveform is considered to depend on the I channel’s waveform\\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\\nwill be initialised as True . Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \\"<operation_name>.<implementation_name>\\" . Inheriting classes may\\noverride this for different behaviour. operation_name ( str ) – name of the quantum operation. implementation_name ( str ) – name of the implementation name of the locus mapping str previous Measure_CustomWaveforms next move © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Reset_Conditional","url":"/iqm-pulse/api/iqm.pulse.gates.reset.Reset_Conditional.html","description":"Bases: CompositeGate Conditional reset operation. Uses a measurement followed by a conditional PRX gate with angle \\\\(\\\\pi\\\\) .\\nIt is assumed the measurement projects the state into the computational bas...","content":"Bases: CompositeGate Conditional reset operation. Uses a measurement followed by a conditional PRX gate with angle \\\\(\\\\pi\\\\) .\\nIt is assumed the measurement projects the state into the computational basis. The conditional PRX implementation handles any necessary waits to accommodate for the feedback result propagation\\ndelay. This reset implementation is factorizable. It can act upon any set of locus components, and the measurement\\nused in the conditional reset will be multiplexed to those components. However, only locus components that have\\nreadout and drive can be reset via conditional reset. Otherwise, locus components will just have their channels\\nblocked. Module: iqm.pulse.gates.reset Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\\nalso be constructed via self.builder , but these will always use the common calibration. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \\"<operation_name>.<implementation_name>\\" . Inheriting classes may\\noverride this for different behaviour. operation_name ( str ) – name of the quantum operation. implementation_name ( str ) – name of the implementation name of the locus mapping str previous iqm.pulse.gates.reset.RESET_FEEDBACK_KEY next Reset_Wait © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"u","url":"/iqm-pulse/api/iqm.pulse.gates.u.html","description":"Single-qubit SU(2) gate. The SU(2) matrix in the computational basis is parametrized using Euler angles: where the angles \\\\(\\\\theta\\\\) , \\\\(\\\\phi\\\\) and \\\\(\\\\lambda\\\\) are in radians. They are the angles of s...","content":"Single-qubit SU(2) gate. The SU(2) matrix in the computational basis is parametrized using Euler angles: where the angles \\\\(\\\\theta\\\\) , \\\\(\\\\phi\\\\) and \\\\(\\\\lambda\\\\) are in radians. They are the angles of subsequent\\nZ, Y and Z Euler rotations: It rotates the qubit state around an arbitrary axis on the Bloch sphere. Some common single-qubit gates expressed as U gates: References https://openqasm.com/language/gates.html#built-in-gates Full path: iqm.pulse.gates.u Functions get_unitary_u (theta, phi, lam) Unitary for an SU(2) gate. Classes UGate SU(2) gate implemented using PRX. Inheritance previous SXGate next iqm.pulse.gates.u.get_unitary_u © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CompositeGate","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.CompositeGate.html","description":"Bases: GateImplementation Utility base class for creating gate implementations that are defined in terms of other gate implementations. Gates can be implemented using other pre-existing gate implement...","content":"Bases: GateImplementation Utility base class for creating gate implementations that are defined in terms of other gate implementations. Gates can be implemented using other pre-existing gate implementations by just utilizing the ScheduleBuilder in builder in the __call__() method (e.g. by calling self.builder.get_implementation(<some gate>, <some locus>) . In this way, any such “member gates” will use\\nthe common calibration that exists in builder . In order for a composite gate\\nimplementation to be able to calibrate its member gates with different calibration values from the common\\ncalibration, it needs to know what gates it considers as its “members”. This is what the CompositeGate ABC is for. Inheriting from this class and defining e.g. registered_gates = [\\"prx\\", \\"cz\\"] allows one to calibrate the\\nmember operations (i.e. \\"prx\\" and \\"cz\\" in this example) inside this composite gate differently from the\\ncommon calibration. However, if no specific calibration data is provided, the gate implementation will be calibrated\\nwith the common calibration. Module: iqm.pulse.gate_implementation Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods build Construct a member gate implementation. parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\\nalso be constructed via self.builder , but these will always use the common calibration. Mapping from operation names to the designated default implementation of that operation. Filling this attribute\\nallows one to define a different default implementation from the common default in self.builder.op_table to\\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\\nCompositeGate will use the common default as the default implementation for it. Construct a member gate implementation. If the gate op_name is registered, a specific calibration for it in the context of this CompositeGate\\nwill be sought for from self.builder.calibration . If any (non-empty) calibration values are found in self.builder.calibration[self.name][op_name][<impl_name>] they will be merged to the common calibration\\n(only non-empty values will be merged). If there are no values found, the\\ncommon calibration will be used. op_name ( str ) – operation name locus ( tuple [ str , ... ] ) – locus the operation acts on impl_name ( str | None ) – Implementation name. If not given, uses the default implementation defined in the class instance\\nif any, and otherwise the common default in self.builder.op_table strict_locus ( bool ) – iff False, for non-symmetric implementations of symmetric ops the locus order may\\nbe changed if no calibration data is available for the requested locus order Calibrated gate implementation. GateImplementation previous CompositeCache next CustomIQWaveforms © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CZ_CRF","url":"/iqm-pulse/api/iqm.pulse.gates.cz.CZ_CRF.html","description":"Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform ...","content":"Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of CosineRiseFall Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous cz next CZ_CRF_ACStarkCRF © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"visualisation","url":"/iqm-pulse/api/iqm.pulse.playlist.visualisation.html","description":"Full path: iqm.pulse.playlist.visualisation Subpackages and modules base Function for visualising playlists. previous Segment next base © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-3...","content":"Full path: iqm.pulse.playlist.visualisation Subpackages and modules base Function for visualising playlists. previous Segment next base © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"barrier","url":"/iqm-pulse/api/iqm.pulse.gates.barrier.html","description":"Barrier metaoperation. The barrier is an n-qubit metaoperation that forces a specific temporal ordering on the quantum\\noperations on different sides of it (the ones preceding the barrier are always ex...","content":"Barrier metaoperation. The barrier is an n-qubit metaoperation that forces a specific temporal ordering on the quantum\\noperations on different sides of it (the ones preceding the barrier are always executed first). Full path: iqm.pulse.gates.barrier Classes Barrier GateImplementation for the n-qudit barrier metaoperation. Inheritance previous iqm.pulse.gates.register_implementation next Barrier © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Chirp","url":"/iqm-pulse/api/iqm.pulse.playlist.waveforms.Chirp.html","description":"Bases: Waveform Linear chirp, defined as where \\\\(\\\\omega[\\\\alpha, N]\\\\) is a cosine-tapered window. For \\\\(\\\\alpha = 1\\\\) it becomes rectangular,\\nand for \\\\(\\\\alpha = 0\\\\) it becomes a Hann (or raised cosine) ...","content":"Bases: Waveform Linear chirp, defined as where \\\\(\\\\omega[\\\\alpha, N]\\\\) is a cosine-tapered window. For \\\\(\\\\alpha = 1\\\\) it becomes rectangular,\\nand for \\\\(\\\\alpha = 0\\\\) it becomes a Hann (or raised cosine) window. The chirp pulse is valued inside the Nyquist zone, such that \\\\(f_{0}\\\\) and \\\\(f_{1}\\\\) are constrained\\nin the range \\\\([-0.5, 0.5]\\\\) . freq_start ( float ) – Initial frequency of the chirp waveform in the Nyquist zone. freq_stop ( float ) – Final frequency of the chirp waveform in the Nyquist zone. alpha ( float ) – Alpha parameter of the cosine-tapered window. Defaults to 0.05. phase ( float ) – Phase of the waveform. Defaults to 0 n_samples ( int ) – Module: iqm.pulse.playlist.waveforms Attributes alpha  phase  freq_start  freq_stop  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords – coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\\nBy default all the waveform attributes are “timelike” (the unit for their calibration data is s).\\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\\nconsisting of multiple terms, or frequency-like (calibration data has the unit ‘Hz’).\\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\\nwindow duration. dict [ str , str ] previous waveforms next ChirpImag © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"SchedulingStrategy","url":"/iqm-pulse/api/iqm.pulse.timebox.SchedulingStrategy.html","description":"Bases: Enum Different scheduling strategies for the contents of composite TimeBoxes. Module: iqm.pulse.timebox Attributes ASAP TimeBox contents are scheduled as soon as possible within the box. ALAP T...","content":"Bases: Enum Different scheduling strategies for the contents of composite TimeBoxes. Module: iqm.pulse.timebox Attributes ASAP TimeBox contents are scheduled as soon as possible within the box. ALAP TimeBox contents are scheduled as late as possible within the box. Methods TimeBox contents are scheduled as soon as possible within the box. TimeBox contents are scheduled as late as possible within the box. previous SchedulingAlgorithm next TimeBox © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"scheduler","url":"/iqm-pulse/api/iqm.pulse.scheduler.html","description":"Tools for composing instruction schedules in time. Under the idealized, noiseless, crosstalk-less computational model, the scheduling algorithms\\nshould preserve the effect of the schedules on the comp...","content":"Tools for composing instruction schedules in time. Under the idealized, noiseless, crosstalk-less computational model, the scheduling algorithms\\nshould preserve the effect of the schedules on the computational subspace, i.e.\\nexecuting Schedule A immediately followed by B should be equivalent to\\nexecuting the composed schedule A+B . The composing is always done so that in A+B all the channels of B start\\ntheir execution simultaneously, and remain in sync. Nothing instructions can be added\\nas spacers between the channels of A and B as necessary to make this happen. Typically the scheduling algorithms also try to minimize the total duration of the composed schedule. Full path: iqm.pulse.scheduler Module Attributes NONSOLID Instructions that can be converted to Wait after scheduling. BLOCKING Nonsolid Instructions that nevertheless block. Functions extend_hard_boundary (schedule, ...) Merge two Schedules together such that the timebox boundary is respected. extend_hard_boundary_in_seconds (schedule, ...) The same as extend_hard_boundary , but the scheduling is done in seconds. extend_schedule (A, B, channels, *[, TOL]) Extend a Schedule with another Schedule. extend_schedule_new (A, B, channels, *[, TOL]) Extend a Schedule with another Schedule. Classes SegmentPointer Tool for working with Segments. Inheritance previous QuantumOp next iqm.pulse.scheduler.NONSOLID © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"FluxPulseGate_CRF_CRF","url":"/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate_CRF_CRF.html","description":"Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True...","content":"Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of CosineRiseFall Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous FluxPulseGate next FluxPulseGate_TGSS_CRF © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"PRX_SinglePulse_GateImplementation","url":"/iqm-pulse/api/iqm.pulse.gates.prx.PRX_SinglePulse_GateImplementation.html","description":"Bases: SinglePulseGate , PRX_GateImplementation ABC for PRX gates implemented using a single IQ pulse. This class implements phased x rotation gates on a specific qubit using an IQPulse instance, deri...","content":"Bases: SinglePulseGate , PRX_GateImplementation ABC for PRX gates implemented using a single IQ pulse. This class implements phased x rotation gates on a specific qubit using an IQPulse instance, derived from the pulse calibration data provided at construction by\\nthe static method _single_iq_pulse() .\\nThe pulse is used to resonantly drive the qubit to effect the required rotation. The pulse calibration data consists of the parameters of an \\\\(x_\\\\pi\\\\) IQPulse only.\\nIt is assumed that the transfer function from the AWG to the qubit is linear, i.e.,\\nother rotation angles can be obtained by linearly scaling the pulse amplitude, and other phase angles can be obtained by adjusting the IQ modulation phase. The generated pulses all have the same time duration, also for identity rotations. In the special case of the\\nduration being zero, the gate implementation will apply a Block(0) instruction to the qubit’s drive channel. Module: iqm.pulse.gates.prx Attributes iq_pulse Alias for self.pulse for backward compatibility Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – Phased x rotation gate. angle ( float ) – rotation angle (in radians) phase ( float ) – phase angle (in radians) boxed instruction schedule implementing the phased x rotation gate TimeBox Alias for self.pulse for backward compatibility previous PRX_GateImplementation next reset © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"Instruction","url":"/iqm-pulse/api/iqm.pulse.playlist.instructions.Instruction.html","description":"Bases: object Command that can be executed by the quantum computer on a control channel. Has a well-specified time duration. Module: iqm.pulse.playlist.instructions Attributes duration Time duration o...","content":"Bases: object Command that can be executed by the quantum computer on a control channel. Has a well-specified time duration. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods copy Make a copy of the Instruction with the given changes applied to its contents. get_child_instructions Returns all the child Instructions the Instruction contains. get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) – Time duration of the instruction. In samples at the channel sample rate. Validate the instruction attributes. ValueError – something about the instruction is not ok None Make a copy of the Instruction with the given changes applied to its contents. Instruction Returns all the child Instructions the Instruction contains. tuple [ Instruction , …] Returns all the waveforms the Instruction contains. tuple [ Waveform , …] previous IQPulse next MultiplexedIQPulse © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CircuitOperation","url":"/iqm-pulse/api/iqm.pulse.builder.CircuitOperation.html","description":"Bases: object Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. Module: iqm.pulse.builder Attributes implementation name of the implementation name name of t...","content":"Bases: object Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. Module: iqm.pulse.builder Attributes implementation name of the implementation name name of the quantum operation locus names of the information-bearing QPU components (qubits, computational resonators...) the operation acts on args arguments for the operation Methods validate Validate the operation against a table of operation definitions. name ( str ) – locus ( tuple [ str , ... ] ) – args ( dict [ str , Any ] ) – implementation ( str | None ) – name of the quantum operation names of the information-bearing QPU components (qubits, computational resonators…) the operation acts on arguments for the operation name of the implementation Validate the operation against a table of operation definitions. op_table ( dict [ str , QuantumOp ] ) – table containing allowed quantum operations ValueError – operation is not valid None previous iqm.pulse.builder.validate_quantum_circuit next ScheduleBuilder © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"SegmentPointer","url":"/iqm-pulse/api/iqm.pulse.scheduler.SegmentPointer.html","description":"Bases: object Tool for working with Segments. Serves as a time pointer inside the Segment. Module: iqm.pulse.scheduler Attributes frac time, in seconds, after the start of the current instruction rema...","content":"Bases: object Tool for working with Segments. Serves as a time pointer inside the Segment. Module: iqm.pulse.scheduler Attributes frac time, in seconds, after the start of the current instruction remainder Remaining duration of the current instruction (in seconds). source contents of the Segment idx index of the current instruction TOL time durations equal or smaller than this tolerance are considered zero (in seconds) Methods cut_tail Cut the source of the pointer at the current index. fastforward Move the pointer forward by duration seconds. get Current instruction. next Move to the beginning of the next instruction. rewind Move the pointer back by duration seconds. tail Instructions from the current index onwards. source ( list [ Instruction ] ) – idx ( int ) – TOL ( float ) – frac ( float ) – contents of the Segment index of the current instruction time durations equal or smaller than this tolerance are considered zero (in seconds) time, in seconds, after the start of the current instruction Current instruction. Instruction Remaining duration of the current instruction (in seconds). Move to the beginning of the next instruction. bool Cut the source of the pointer at the current index. Truncate source at idx , make self point to\\nthe cut tail part only. frac is not changed. Note: modifies source . None Instructions from the current index onwards. Sequence [ Instruction ] Move the pointer back by duration seconds. duration ( float ) – None Move the pointer forward by duration seconds. duration ( float ) – bool previous iqm.pulse.scheduler.extend_schedule_new next timebox © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.gates.prx.get_unitary_prx","url":"/iqm-pulse/api/iqm.pulse.gates.prx.get_unitary_prx.html","description":"Unitary for a PRX gate. angle ( float ) – rotation angle (in rad) phase ( float ) – phase angle (in rad) 2x2 unitary representing prx(angle, phase) . ndarray previous prx next ABC_Constant_smooth © Co...","content":"Unitary for a PRX gate. angle ( float ) – rotation angle (in rad) phase ( float ) – phase angle (in rad) 2x2 unitary representing prx(angle, phase) . ndarray previous prx next ABC_Constant_smooth © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"measure","url":"/iqm-pulse/api/iqm.pulse.gates.measure.html","description":"Projective measurement in the Z basis. Full path: iqm.pulse.gates.measure Classes Measure_Constant Implementation of a single-qubit projective, dispersive measurement in the Z basis. Measure_Constant_...","content":"Projective measurement in the Z basis. Full path: iqm.pulse.gates.measure Classes Measure_Constant Implementation of a single-qubit projective, dispersive measurement in the Z basis. Measure_Constant_Qnd Implementation of a single-qubit projective, non quantum demolition, dispersive measurements in the Z basis. Measure_CustomWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. ProbePulse_CustomWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. Inheritance previous FluxMultiplexer_SampleLinear next Measure_Constant © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"iqm.pulse.utils.phase_transformation","url":"/iqm-pulse/api/iqm.pulse.utils.phase_transformation.html","description":"Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the\\nIQ pulse implementing the PRX. By commutation rules we have Hence an arbitrary (RZ, PRX, RZ) gate sequence is equi...","content":"Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the\\nIQ pulse implementing the PRX. By commutation rules we have Hence an arbitrary (RZ, PRX, RZ) gate sequence is equivalent to (RZ, PRX) with adjusted angles. Use case: with resonant driving, the PRX gate can be implemented using an IQPulse instance,\\nand the preceding RZ can be handled by decrementing the local oscillator phase beforehand (something\\nthe IQPulse instruction can also do), which is equivalent to rotating the local computational frame\\naround the z axis in the opposite direction of the required quantum state rotation. psi_1 ( float ) – RZ angle before the PRX (in rad) psi_2 ( float ) – RZ angle after the PRX (in rad) change to the PRX phase angle (in rad),\\nphase increment for the IQ pulse that implements the remaining RZ (in rad) tuple [ float , float ] previous iqm.pulse.utils.normalize_angle next validation © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"channel","url":"/iqm-pulse/api/iqm.pulse.playlist.channel.html","description":"Control channel properties. Full path: iqm.pulse.playlist.channel Functions get_channel_properties (chip_topology, ...) Internal function to get channel properties. get_channel_properties_from_station...","content":"Control channel properties. Full path: iqm.pulse.playlist.channel Functions get_channel_properties (chip_topology, ...) Internal function to get channel properties. get_channel_properties_from_station_settings (...) Get channel properties from Station Control controller settings following the standard convention. round_duration_to_granularity_samples (...[, ...]) Round a time duration to the least common multiple of the granularities of the given channels. Classes ChannelConfiguration Base class for configuring channels. ChannelDescription Channel specific data, including tables for the instructions and waveforms used. ChannelProperties Defines the properties of a control or measurement channel. IQChannelConfig Requested configuration of an IQ channel. ProbeChannelProperties ChannelProperties for probe line channels. RealChannelConfig Requested configuration of a real channel. Inheritance previous playlist next iqm.pulse.playlist.channel.get_channel_properties © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"GateImplementation","url":"/iqm-pulse/api/iqm.pulse.gate_implementation.GateImplementation.html","description":"Bases: ABC ABC for implementing quantum gates and other quantum operations using instruction schedules. There is a separate GateImplementation subclass for every implementation of every operation type...","content":"Bases: ABC ABC for implementing quantum gates and other quantum operations using instruction schedules. There is a separate GateImplementation subclass for every implementation of every operation type.\\nEach GateImplementation instance represents a particular locus for that implementation, and encapsulates\\nthe calibration data it requires. All GateImplementation subclasses __init__ must have exactly the below arguments in order to be\\nusable via ScheduleBuilder.get_implementation() . GateImplementations also have the __call__() method, which takes the operation parameters\\n(e.g. rotation angles) as input, and returns a TimeBox instance which implements\\nan instance of the operation at that locus. parent ( QuantumOp ) – Quantum operation this instance implements. name ( str ) – Name of the implementation provided by this instance. locus ( Locus ) – Locus the operation acts on. calibration_data ( OILCalibrationData ) – (Raw) calibration data for the (operation, implementation, locus) represented by this instance builder ( ScheduleBuilder ) – Schedule builder. Module: iqm.pulse.gate_implementation Attributes parameters Required calibration data, may be nested qualified_name Qualified name of the implementation. special_implementation Set to True if  the implementation is a special purpose implementation that should never get called in ScheduleBuilder.get_implementation unless explicitly requested via the impl_name argument. symmetric True iff the implementation is symmetric in its locus components. Methods build Utility method for constructing a GateImplementation with self.builder . convert_calibration_data Convert time-like items in the calibration data to fractions of the time duration of the gate. duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_custom_locus_mapping Get custom locus mapping for this GateImplementation. get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. get_parameters Calibration data tree the GateImplementation subclass expects for each locus. needs_calibration Whether the implementation needs calibration data to_timebox Wraps the given instruction schedule into an atomic/resolved timebox. True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. Required calibration data, may be nested Set to True if  the implementation is a special purpose implementation that should never get called in ScheduleBuilder.get_implementation unless explicitly requested via the impl_name argument. Qualified name of the implementation. Whether the implementation needs calibration data Returns True if the calibration dict must contain a node with keyed with\\n<operation name>: <implementation name>: <appropriate locus> in order to use this implementation. bool The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox | list [ TimeBox ] Utility method for constructing a GateImplementation with self.builder . Inheriting classes may override this in order to add additional logic. op_name ( str ) – operation name locus ( tuple [ str , ... ] ) – locus the operation acts on impl_name ( str | None ) – implementation name. Uses the assigned default implementation if not specified. strict_locus ( bool ) – iff False, for non-symmetric implementations of symmetric ops the locus order may\\nbe changed if no calibration data is available for the requested locus order Calibrated gate implementation. GateImplementation Wraps the given instruction schedule into an atomic/resolved timebox. schedule ( Schedule ) – TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\\nSubclasses can reimplement this method in case it makes sense in their context. float Convert time-like items in the calibration data to fractions of the time duration of the gate. This is a convenience method for converting calibration data items involving time\\ndurations measured in seconds into fractions of the duration of the gate. Values of items that are not measured in seconds or Hz are returned as is. Additionally, converts duration to channel samples and adds it in the converted\\ncalibration data under the key \\"n_samples\\" , while the original \\"duration\\" key is removed. calibration_data ( OILCalibrationData ) – (subset of) calibration data for the gate/implementation/locus params ( NestedParams ) – (subset of) cls.parameters specifying the calibration_data items\\nto convert and return channel_props ( ChannelProperties ) – used to convert \\"duration\\" from seconds into channel samples duration ( float | None ) – Time duration of the gate, in seconds. If None, calibration_data must have\\nan item named \\"duration\\" , measured in seconds, which will be used instead. converted calibration_data items OILCalibrationData Calibration data tree the GateImplementation subclass expects for each locus. Helper method for EXA use. locus ( Iterable [ str ] ) – Locus component names to replace the wildcard character \\"*\\" in the calibration\\nparameter names. One Setting will be generated for each component name in locus .\\nIf there are no wildcard characters in cls.parameters , this argument has no effect. path ( Iterable [ str ] ) – parts of the dotted name for the root node, if any. EXA setting node describing the required calibration data for each locus.\\nAll the Setting values are None . SettingNode Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \\"<operation_name>.<implementation_name>\\" . Inheriting classes may\\noverride this for different behaviour. operation_name ( str ) – name of the quantum operation. implementation_name ( str ) – name of the implementation name of the locus mapping str Get custom locus mapping for this GateImplementation. This method can be used to return the locus mapping (wrt. to the given ChipTopology ) for this GateImplementation . Overriding this method allows a GateImplementation to be “self-sufficient” in the\\nsense that it knows its own locus mapping. chip_topology ( ChipTopology ) – ChipTopology instance in which context to create the custom locus mapping. component_to_channels ( dict [ str , Iterable [ str ] ] ) – dict mapping QPU component names to an Iterable of channel operation names\\navailable for this component (i.e. “readout”, “drive”, “flux”). This info is often needed\\nin building a locus mapping. Custom locus mapping for this GateImplementation or None if the gate implementation has no need for a custom locus mapping, otherwise the returned mapping should be like in ChipTopology.set_locus_mapping() custom locus mapping, otherwise the returned mapping should be like in ChipTopology.set_locus_mapping() dict [ tuple [ str , …] | frozenset [ str ], tuple [ str , …]] | None previous CustomIQWaveforms next SinglePulseGate © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-pulse","title":"CZ_GaussianSmoothedSquare","url":"/iqm-pulse/api/iqm.pulse.gates.cz.CZ_GaussianSmoothedSquare.html","description":"Bases: FluxPulseGate CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse W...","content":"Bases: FluxPulseGate CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) – name ( str ) – locus ( Locus ) – calibration_data ( OILCalibrationData ) – builder ( ScheduleBuilder ) – alias of GaussianSmoothedSquare Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_CRF_ACStarkCRF next CZ_Slepian © Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"API documentation: exa-common","url":"/iqm-exa-common/index.html","description":"26.6 2025-03-30 This documentation describes the common library of the Experiment Automation ( EXA ) project. exa-common contains classes and functions that are shared by EXA , Cortex and Station Cont...","content":"26.6 2025-03-30 This documentation describes the common library of the Experiment Automation ( EXA ) project. exa-common contains classes and functions that are shared by EXA , Cortex and Station Control . Index Module Index Search Page next API Reference © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"API Reference","url":"/iqm-exa-common/API.html","description":"exa.common Shared errors, helpers, control structures, settings, API models etc. previous API documentation: exa-common next common © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30....","content":"exa.common Shared errors, helpers, control structures, settings, API models etc. previous API documentation: exa-common next common © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"start_stop_options","url":"/iqm-exa-common/api/exa.common.control.sweep.option.start_stop_options.html","description":"Range specification to define a linearly spaced interval. Full path: exa.common.control.sweep.option.start_stop_options Classes StartStopOptions Range generation options. Inheritance previous StartSto...","content":"Range specification to define a linearly spaced interval. Full path: exa.common.control.sweep.option.start_stop_options Classes StartStopOptions Range generation options. Inheritance previous StartStopBaseOptions next StartStopOptions © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"sequence","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.sequence.html","description":"Convert Python Sequences to protos and back. Full path: exa.common.api.proto_serialization.sequence Functions pack (values) Packs a sequence of native Python types into protobuf format. unpack (source...","content":"Convert Python Sequences to protos and back. Full path: exa.common.api.proto_serialization.sequence Functions pack (values) Packs a sequence of native Python types into protobuf format. unpack (source) Unpacks protobuf to list. previous exa.common.api.proto_serialization.nd_sweep.unpack next exa.common.api.proto_serialization.sequence.pack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exponential_sweep","url":"/iqm-exa-common/api/exa.common.control.sweep.exponential_sweep.html","description":"Sweep specification with exponentially spaced values. Full path: exa.common.control.sweep.exponential_sweep Classes ExponentialSweep Generates parameter values spaced evenly on a geometric progression...","content":"Sweep specification with exponentially spaced values. Full path: exa.common.control.sweep.exponential_sweep Classes ExponentialSweep Generates parameter values spaced evenly on a geometric progression based on options . Inheritance previous sweep next ExponentialSweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.UnauthorizedError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.UnauthorizedError.html","description":"Error raised when the user is not authorized. message ( str ) – previous exa.common.errors.server_errors.StationControlError next exa.common.errors.server_errors.ValidationError © Copyright 2019-2022,...","content":"Error raised when the user is not authorized. message ( str ) – previous exa.common.errors.server_errors.StationControlError next exa.common.errors.server_errors.ValidationError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"array","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.array.html","description":"Convert numpy arrays to protos and back. Full path: exa.common.api.proto_serialization.array Functions pack (array) Packs a numeric numpy array into protobuf format. unpack (source) Unpacks protobuf t...","content":"Convert numpy arrays to protos and back. Full path: exa.common.api.proto_serialization.array Functions pack (array) Packs a numeric numpy array into protobuf format. unpack (source) Unpacks protobuf to array. previous proto_serialization next exa.common.api.proto_serialization.array.pack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"helpers","url":"/iqm-exa-common/api/exa.common.helpers.html","description":"Miscellaneous helper functionality. Full path: exa.common.helpers Subpackages and modules data_helper  json_helper  numpy_helper Coercion of numpy types. software_version_helper  previous exa.common.e...","content":"Miscellaneous helper functionality. Full path: exa.common.helpers Subpackages and modules data_helper  json_helper  numpy_helper Coercion of numpy types. software_version_helper  previous exa.common.errors.server_errors.ValidationError next data_helper © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"CHAD","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.CHAD.html","description":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidate...","content":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes computational_resonator_names Names of all the computational resonators declared in CHAD data. coupler_names Names of all the couplers declared in CHAD data. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. probe_line_names Names of all the probe lines declared in CHAD data. qubit_names Names of all the qubits declared in CHAD data. mask_set_name  variant  components  Methods filter_qubit_components Filter qubit components from the input components. get_common_coupler_for Convenience method for getting the name of a coupler connecting a pair of components. get_component Get component by component name. get_coupler_mapping_for Get the coupler-component mapping for the couplers that connects to at least two components get_probe_line_mapping_for Get the probe line-component mapping. get_probe_line_names_for Get probe lines for given qubits in CHAD data. group_components_per_default_operations Groups given qubits/couplers based on their defined default operations. mask_set_name ( str ) – variant ( str ) – components ( Components ) – Get component by component name. component_name ( str ) – Component Names of all the qubits declared in CHAD data. Names of all the couplers declared in CHAD data. Names of all the probe lines declared in CHAD data. Names of all the computational resonators declared in CHAD data. Filter qubit components from the input components. component_names ( Collection [ str ] ) – list [ str ] Get probe lines for given qubits in CHAD data. component_names ( Collection [ str ] ) – list [ str ] Groups given qubits/couplers based on their defined default operations. The default operations that can be deducted from a CHAD are readout , drive , and flux . component_names ( Collection [ str ] ) – The component names to which to do the grouping.\\nOther components present in the CHAD will not be included in the returned data. Tuple of qubits and couplers mapped to their connected default operations. The data is in the form of a dict with the keys being readout , drive , and flux ,\\nand the values the list of component names having that particular operation. The data is in the form of a dict with the keys being readout , drive , and flux ,\\nand the values the list of component names having that particular operation. tuple [ dict [ str , list [ str ]], dict [ str , list [ str ]]] in the given qubits. component_names ( Collection [ str ] ) – The qubit names. May contain any number of qubits. Coupler names mapped to the components they connect. - ValueError – If the provided qubit name list contains duplicates. dict [ str , list [ str ]] Get the probe line-component mapping. component_names ( Collection [ str ] ) – The qubit names. May contain any number of qubits. dict [ str , list [ str ]] Convenience method for getting the name of a coupler connecting a pair of components. first_component ( str ) – The name of the first component. second_component ( str ) – The name of the second component.\\nThe order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the coupler that connects the inputted components. The name of the coupler that connects the inputted components. - ValueError – If there were no couplers or more than one coupler connecting the component pair (the latter\\n    should not be possible in a realistic chip). str Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous chad_model next Component © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"chip_topology","url":"/iqm-exa-common/api/exa.common.qcm_data.chip_topology.html","description":"Chip topology class for parsing CHAD and other QPU related data into human-usable form. Full path: exa.common.qcm_data.chip_topology Functions sort_components (components) Sort the given components in...","content":"Chip topology class for parsing CHAD and other QPU related data into human-usable form. Full path: exa.common.qcm_data.chip_topology Functions sort_components (components) Sort the given components in a human-readable way. sort_couplers (couplers) Sort the given couplers in a human-readable way. Classes ChipTopology Topology information for a chip (typically a QPU). Inheritance previous Qubit next exa.common.qcm_data.chip_topology.sort_components © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.logger.logger.init_loggers","url":"/iqm-exa-common/api/exa.common.logger.logger.init_loggers.html","description":"Set the log level of given logger names. Logs with INFO or DEBUG logging levels are written into stdout, and logs with other levels are written into stderr. By default, the root logger uses WARNING le...","content":"Set the log level of given logger names. Logs with INFO or DEBUG logging levels are written into stdout, and logs with other levels are written into stderr. By default, the root logger uses WARNING level. See Python’s logging module for possible logging levels. loggers ( dict [ str , str | None ] | None ) – A mapping from logger name to (case insensitive) logging level. If logging level is None or empty\\nstring, default_level will be used for that logger. It is possible to fine tune logging for individual\\nmodules, since logger propagation is turned off. Overriding works both ways: a parent logger can have higher\\nlogging level than its descendants, and vice versa.\\nFor example, {\\"sqlalchemy\\": None, \\"sqlalchemy.engine\\": \\"debug\\"} will put\\n“sqlalchemy” and its descendants (i.e. “sqlalchemy.dialects”, “sqlalchemy.dialects.sqlite”, etc.) into default_level , except for “sqlalchemy.engine” for which DEBUG level is defined.\\nFor the root logger, use empty string key, for example: {\\"\\": \\"INFO\\"} .\\nIf empty dict or None is given, only the root logger will be initialized to its default WARNING level. default_level ( str ) – The default level (case insensitive) to be used for logger names given with loggers for which a level is not specified. verbose ( bool ) – If False, :const: BRIEF format will be used for log messages, otherwise :const: VERBOSE . extra_info_getter ( Callable [ [ ] , str ] | None ) – Optional callable to convey extra information to log messages. It will get called before\\neach log message emission and the output will get appended to the log message. None previous logger next ExtraFormatter © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"center_span_base_options","url":"/iqm-exa-common/api/exa.common.control.sweep.option.center_span_base_options.html","description":"Range specification used with exponential sweeps. Full path: exa.common.control.sweep.option.center_span_base_options Classes CenterSpanBaseOptions Range generation options. Inheritance previous optio...","content":"Range specification used with exponential sweeps. Full path: exa.common.control.sweep.option.center_span_base_options Classes CenterSpanBaseOptions Range generation options. Inheritance previous option next CenterSpanBaseOptions © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"start_stop_base_options","url":"/iqm-exa-common/api/exa.common.control.sweep.option.start_stop_base_options.html","description":"Range specification used with exponential sweeps. Full path: exa.common.control.sweep.option.start_stop_base_options Classes StartStopBaseOptions Range generation options. Inheritance previous exa.com...","content":"Range specification used with exponential sweeps. Full path: exa.common.control.sweep.option.start_stop_base_options Classes StartStopBaseOptions Range generation options. Inheritance previous exa.common.control.sweep.option.option_converter.convert_to_options next StartStopBaseOptions © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"Coupler","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Coupler.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ComputationalResonator next Launcher © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.setting_node.pack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.setting_node.pack.html","description":"Convert a SettingNode into protobuf representation. Silently coerces some datatypes to be compatible with the proto definition of Datum :\\n- Numpy arrays of 32-bit ints are converted to 64-bits (Window...","content":"Convert a SettingNode into protobuf representation. Silently coerces some datatypes to be compatible with the proto definition of Datum :\\n- Numpy arrays of 32-bit ints are converted to 64-bits (Windows only).\\n- Singular numpy types are converted into corresponding native types. node ( SettingNode ) – SettingNode to pack, recursively. minimal ( bool ) – If True, only the Parameter.name of each Setting is preserved along with the setting value.\\nIf False, the the whole Setting.parameter is packed. Protobuf instance that represents node . iqm.data_definitions.common.v1.setting_pb2.SettingNode previous setting_node next exa.common.api.proto_serialization.setting_node.unpack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"center_span_options","url":"/iqm-exa-common/api/exa.common.control.sweep.option.center_span_options.html","description":"Range specification to define a range around a center value. Full path: exa.common.control.sweep.option.center_span_options Classes CenterSpanOptions Range generation options. Inheritance previous Cen...","content":"Range specification to define a range around a center value. Full path: exa.common.control.sweep.option.center_span_options Classes CenterSpanOptions Range generation options. Inheritance previous CenterSpanBaseOptions next CenterSpanOptions © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.nd_sweep.pack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.nd_sweep.pack.html","description":"Convert an NdSweep into protobuf representation. Note: The protobuf does not make any distinction between different types of Sweeps, so the type information is lost. nd_sweep ( list [ tuple [ Sweep , ...","content":"Convert an NdSweep into protobuf representation. Note: The protobuf does not make any distinction between different types of Sweeps, so the type information is lost. nd_sweep ( list [ tuple [ Sweep , ... ] ] ) – minimal ( bool ) – iqm.data_definitions.common.v1.sweep_pb2.CartesianSweep previous nd_sweep next exa.common.api.proto_serialization.nd_sweep.unpack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"Components","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Components.html","description":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidate...","content":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes all  model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. qubits  couplers  probe_lines  launchers  computational_resonators  Methods sort_components  qubit ( tuple [ Qubit , ... ] ) – tunable_coupler ( tuple [ Coupler , ... ] ) – probe_line ( tuple [ ProbeLine , ... ] ) – launcher ( tuple [ Launcher , ... ] ) – computational_resonator ( tuple [ ComputationalResonator , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Component next ComputationalResonator © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.control.sweep.sweep_values.serialize_sweep_values","url":"/iqm-exa-common/api/exa.common.control.sweep.sweep_values.serialize_sweep_values.html","description":"Serialize sweep values type to JSON serializable type, to support complex types. sweep_values ( Any ) – Any previous sweep_values next exa.common.control.sweep.sweep_values.validate_sweep_values © Cop...","content":"Serialize sweep values type to JSON serializable type, to support complex types. sweep_values ( Any ) – Any previous sweep_values next exa.common.control.sweep.sweep_values.validate_sweep_values © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"Setting","url":"/iqm-exa-common/api/exa.common.data.parameter.Setting.html","description":"Bases: BaseModel Physical quantity represented as a Parameter attached to a numerical value. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][...","content":"Bases: BaseModel Physical quantity represented as a Parameter attached to a numerical value. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.parameter Attributes element_indices Element-wise indices of the parameter in self . label Label used as pretty identifier for display purposes, same as label of parameter . model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name Name used as identifier, same as name of parameter . parent_label Parent label of the parameter of self . parent_name Parent name of the parameter of self . unit SI unit of the value , if applicable, same as unit of parameter . parameter The parameter this Setting represents. value Data value attached to the parameter. read_only Indicates if the attribute is read-only. path Path in the settings tree (starting from the root SettingNode ) for this setting. Methods create_element_parameter_for Utility for creating an element-wise parameter for a single value in a collection valued parameter. diff_sets Return a one-sided difference between two sets of Settings, prioritising values in first . get_by_name  merge  remove_by_name  replace  update Create a new setting object with updated value . validate_parameter_value_after  with_path_name Copy of self with the parameter name replaced by the path name. parameter ( Parameter | None ) – value ( ObservationValue | None ) – read_only ( bool ) – path ( str ) – The parameter this Setting represents. Data value attached to the parameter. Indicates if the attribute is read-only. Path in the settings tree (starting from the root SettingNode ) for this setting. Create a new setting object with updated value . value ( bool | str | int | float | complex | ndarray ) – Setting Name used as identifier, same as name of parameter . Parent name of the parameter of self . Label used as pretty identifier for display purposes, same as label of parameter . Parent label of the parameter of self . Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. SI unit of the value , if applicable, same as unit of parameter . Element-wise indices of the parameter in self . Return a one-sided difference between two sets of Settings, prioritising values in first . first ( set [ Setting ] ) – Set whose values will be in the resulting diff. second ( set [ Setting ] ) – Set that is compared to first . A new set of Settings whose parameters are only found in first , and Settings in first whose\\nvalues differ from their counterparts in second . set [ Setting ] Utility for creating an element-wise parameter for a single value in a collection valued parameter. indices ( int | list [ int ] ) – The indices in the collection for which to create the element-wise parameter. The element-wise parameter. ValueError – If self is not collection-valued. Parameter Copy of self with the parameter name replaced by the path name. Setting previous Parameter next setting_node © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"ChipTopology","url":"/iqm-exa-common/api/exa.common.qcm_data.chip_topology.ChipTopology.html","description":"Bases: object Topology information for a chip (typically a QPU). Can represent the information found in a CHAD, as well as locus mappings for gates. qubits ( Iterable [ str ] ) – names of the qubits. ...","content":"Bases: object Topology information for a chip (typically a QPU). Can represent the information found in a CHAD, as well as locus mappings for gates. qubits ( Iterable [ str ] ) – names of the qubits. computational_resonators ( Iterable [ str ] ) – names of the computational resonators. couplers ( dict [ str , Iterable [ str ] ] ) – mapping from coupler name to names of chip components it connects to. probe_lines ( dict [ str , Iterable [ str ] ] ) – mapping from probe line name to names of chip components it connects to. variant ( str ) – identifier of the QPU design variant. Module: exa.common.qcm_data.chip_topology Attributes computational_resonators Computational resonators on the chip, in any order. computational_resonators_sorted Computational resonators on the chip, sorted. couplers Tunable couplers on the chip, in any order. couplers_sorted Tunable couplers on the chip, sorted by numerical IDs. probe_lines Probe lines on the chip, in any order. probe_lines_sorted Probe lines on the chip, sorted. all_components All components on the chip. coupler_to_components Map from each coupler to all other components it connects to. component_to_couplers Map from each component to all couplers connected to it. probe_line_to_components Map from each probe line to all components it connects to. component_to_probe_line Map from each component to the probeline connected to it. Methods from_chad Construct a ChipTopology instance from a CHAD. from_chip_design_record Construct a ChipTopology instance from a raw Chip design record. get_all_common_resonators Computational resonators connected to all the given qubits via a coupler. get_common_computational_resonator Convenience method for getting the name of a computational resonator which is connected to both specified qubit components via tunable couplers. get_connected_probe_lines Get probelines that are connected to any of the given components. get_connecting_couplers Couplers that only connect to the given chip components, and connect at least two of them. get_coupler_for Common coupler for the given chip components (e.g. qubit or computational resonator). get_loci Gives all the loci of a given gate. get_neighbor_couplers Couplers that connect to at least one of the given chip components. get_neighbor_locus_components Chip components that are connected to the given components by a coupler, but not included in them. is_computational_resonator True iff the given component is a computational resonator. is_coupler True iff the given component is a coupler. is_probe_line True iff the given component is a probe line. is_qubit True iff the given component is a qubit. limit_values Prunes the given dictionary (e.g. a coupler-to-qubits map) to a subset of values. map_locus Returns the mapped components for the given locus and the given gate. map_to_locus Returns the locus that is mapped to the given components. set_locus_mapping Add a custom mapping from a gate locus to a set of components required for the gate operation. Computational resonators on the chip, in any order. Computational resonators on the chip, sorted. Tunable couplers on the chip, in any order. Tunable couplers on the chip, sorted by numerical IDs. Probe lines on the chip, in any order. Probe lines on the chip, sorted. All components on the chip. Map from each coupler to all other components it connects to. The values are sorted. Map from each component to all couplers connected to it. Map from each probe line to all components it connects to. Map from each component to the probeline connected to it.\\nMax 1 connection per component is assumed.\\nComponents without connection to a probe line don’t appear. Construct a ChipTopology instance from a raw Chip design record. record ( dict ) – Record as returned by Station control. Corresponding chip topology ChipTopology Construct a ChipTopology instance from a CHAD. Use from_chip_design_record() if possible. chad ( CHAD ) – parsed CHAD model corresponding chip topology ChipTopology Couplers that connect to at least one of the given chip components. components ( Iterable [ str ] ) – some chip components, typically qubits and computational resonators couplers that connect to at least one of components set [ str ] Couplers that only connect to the given chip components, and connect at least two of them. Equivalent to returning the edges in the components -induced\\nsubgraph of the coupling topology. components ( Collection [ str ] ) – some chip components, typically qubits and computational resonators couplers that connect to only members of components , and to at least two of them set [ str ] Common coupler for the given chip components (e.g. qubit or computational resonator). component_1 ( str ) – first component component_2 ( str ) – second component the common coupler ValueError – the given components have zero or more than one connecting coupler str Chip components that are connected to the given components by a coupler, but not included in them. components ( Collection [ str ] ) – some chip components, typically qubits and computational resonators components that are connected to components by a coupler, but not included in them set [ str ] Get probelines that are connected to any of the given components. components ( Collection [ str ] ) – set [ str ] Prunes the given dictionary (e.g. a coupler-to-qubits map) to a subset of values. Used to prune e.g. coupler_to_components to a subset of relevant elements. dct ( ComponentMap ) – Dictionary of collections of values. limit_to ( Collection [ str ] ) – Components to limit the output to. The input dictionary, but only with key-value pairs where the value intersects with limit_to . ComponentMap True iff the given component is a qubit. component ( str ) – bool True iff the given component is a coupler. component ( str ) – bool True iff the given component is a probe line. component ( str ) – bool True iff the given component is a computational resonator. component ( str ) – bool Add a custom mapping from a gate locus to a set of components required for the gate operation. The mapping is of the form {<locus>: <components mapped to locus>}, where a locus can be mapped to one or more\\ncomponents. The locus itself can be a frozenset (denoting a symmetric gate) or a tuple (non-symmetric gate). Some examples:\\n- DEFAULT_2QB_MAPPING (added in __init__() ) maps pairs of qubits to their common coupler symmetrically.\\n- Fast flux CZ-gate maps pairs of qubits to their couplers non-symmetrically (first locus qubit can perform flux pulses).\\n- A two-qubit gate implementation that includes playing pulses on neighboring components in addition to the connecting coupler. name ( str ) – The name for the gate & implementation this locus mapping represents (typically in the format \\"<gate name>.<implementation name>\\" ). mapping ( dict [ tuple [ str , ... ] | frozenset [ str ] , tuple [ str , ... ] ] ) – The locus mapping to be added. None Validate that the components given in mapping are found in self and the mapping is correctly formed. mapping ( dict [ str | tuple [ str ] , tuple [ str , ... ] | frozenset [ str ] ] | None ) – None Returns the mapped components for the given locus and the given gate. If the locus or the gate is not found from the locus mappings of self, returns None. locus ( tuple [ str , ... ] | frozenset [ str ] ) – The locus to map. name ( str | None ) – The name for the gate & implementation with which to map the locus (typically in the format \\"<gate name>.<implementation name>\\" ). The components mapped to the given locus or None if locus is not found in the given mapping. str | tuple [ str ] | None Returns the locus that is mapped to the given components. mapped ( str | tuple [ str ] ) – The mapped components. name ( str ) – The name for the gate & implementation with which to map the locus (typically in the format \\"<gate name>.<implementation name>\\" ). The locus mapped to the given components or None if the components are not mapped to any locus. tuple [ str , …] | frozenset [ str ] | None Gives all the loci of a given gate. If no mapping with the given the name nor a default mapping with the given dimensionality is found,\\nreturns an empty list. name ( str ) – The name for the gate & implementation with which to map the locus (typically in the format \\"<gate name>.<implementation name>\\" ). default_mapping_dimension ( int | None ) – If provided, will return the loci of the default mapping of the given\\ndimensionality in case no mapping for name can be found. The loci associated with the given gate. list [ tuple [ str , …] | frozenset [ str ]] Convenience method for getting the name of a computational resonator which is connected to both specified\\nqubit components via tunable couplers. first_qubit ( str ) – The name of the first qubit. second_qubit ( str ) – The name of the second qubit. The order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the second qubit. The order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the computational resonator that is connected to both inputted qubits via tunable couplers. The name of the computational resonator that is connected to both inputted qubits via tunable couplers. - ValueError – If no computational resonator was found that is connected to both qubits via tunable couplers. – str Computational resonators connected to all the given qubits via a coupler. qubits ( list [ str ] ) – Qubit names. Names of the computational resonators neighboring all of qubits (can be an empty set). set [ str ] previous exa.common.qcm_data.chip_topology.sort_couplers next file_adapter © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"fixed_sweep","url":"/iqm-exa-common/api/exa.common.control.sweep.fixed_sweep.html","description":"Sweep specification with arbitrary values. Full path: exa.common.control.sweep.fixed_sweep Classes FixedSweep A sweep over arbitrary set of values, given by options . Inheritance previous ExponentialS...","content":"Sweep specification with arbitrary values. Full path: exa.common.control.sweep.fixed_sweep Classes FixedSweep A sweep over arbitrary set of values, given by options . Inheritance previous ExponentialSweep next FixedSweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"FileAdapter","url":"/iqm-exa-common/api/exa.common.qcm_data.file_adapter.FileAdapter.html","description":"Bases: BaseAdapter Module: exa.common.qcm_data.file_adapter Methods close Cleans up adapter specific items. send Sends PreparedRequest object. Sends PreparedRequest object. Returns Response object. Cl...","content":"Bases: BaseAdapter Module: exa.common.qcm_data.file_adapter Methods close Cleans up adapter specific items. send Sends PreparedRequest object. Sends PreparedRequest object. Returns Response object. Cleans up adapter specific items. previous file_adapter next immutable_base_model © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"sweep","url":"/iqm-exa-common/api/exa.common.control.sweep.sweep.html","description":"Base immutable class for sweeps specifications. Full path: exa.common.control.sweep.sweep Classes Sweep Base immutable class for sweeps. Inheritance previous SweepOptions next Sweep © Copyright 2019-2...","content":"Base immutable class for sweeps specifications. Full path: exa.common.control.sweep.sweep Classes Sweep Base immutable class for sweeps. Inheritance previous SweepOptions next Sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa_error","url":"/iqm-exa-common/api/exa.common.errors.exa_error.html","description":"Full path: exa.common.errors.exa_error Exceptions EmptyComponentListError (message, *args) Error raised when an empty list is given as components for running an experiment. ExaError (message, *args) B...","content":"Full path: exa.common.errors.exa_error Exceptions EmptyComponentListError (message, *args) Error raised when an empty list is given as components for running an experiment. ExaError (message, *args) Base class for exa errors. InvalidSweepOptionsTypeError (options, *args) The type of sweep options is invalid. UnknownSettingError (message, *args) This SettingNode does not have a given key. previous errors next exa.common.errors.exa_error.EmptyComponentListError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.exa_error.InvalidSweepOptionsTypeError","url":"/iqm-exa-common/api/exa.common.errors.exa_error.InvalidSweepOptionsTypeError.html","description":"The type of sweep options is invalid. options ( str ) – previous exa.common.errors.exa_error.ExaError next exa.common.errors.exa_error.UnknownSettingError © Copyright 2019-2022, IQM Finland Oy. Last u...","content":"The type of sweep options is invalid. options ( str ) – previous exa.common.errors.exa_error.ExaError next exa.common.errors.exa_error.UnknownSettingError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.sweep.database_serialization.decode_return_parameters","url":"/iqm-exa-common/api/exa.common.sweep.database_serialization.decode_return_parameters.html","description":"Deserialize return parameters. For backwards compatibility, changes values of the return parameters dict to a new,\\nmore general format: NdSweeps, which is a list of tuples of Sweeps. Return parameters...","content":"Deserialize return parameters. For backwards compatibility, changes values of the return parameters dict to a new,\\nmore general format: NdSweeps, which is a list of tuples of Sweeps. Return parameters JSON syntax: [{\\"parameter\\": readout_parameter_json, \\"hard_sweeps\\": [hard_sweep,...]}, ...] . readout_parameter_json may be a Parameter or a Setting; both will be converted to a Parameter. hard_sweeps are converted with the following rules: 1 is converted to an empty NdSweep, i.e., a scalar. Other integers are converted to a linear_index_sweep() Sweep is converted to an NdSweep that contains only the sweep NdSweep and None are not converted. json_str ( str ) – JSON representation of the return_parameters loaded\\nfrom e.g. persistence a reconstituted, typed return_parameters structure dict [ Parameter , list [ tuple [ Sweep , …]] | None ] previous exa.common.sweep.database_serialization.decode_and_validate_sweeps next exa.common.sweep.database_serialization.decode_settings © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"sweep","url":"/iqm-exa-common/api/exa.common.sweep.html","description":"Sweep utilities. Full path: exa.common.sweep Subpackages and modules database_serialization Functions that encode and decode all sweep arguments(different types of sweeps, return parameters, settings,...","content":"Sweep utilities. Full path: exa.common.sweep Subpackages and modules database_serialization Functions that encode and decode all sweep arguments(different types of sweeps, return parameters, settings, etc.). util Generic utilities for converting sweep definitions from user-friendly format to canonic ones. previous QCMDataClient next database_serialization © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.control.sweep.option.option_converter.convert_to_options","url":"/iqm-exa-common/api/exa.common.control.sweep.option.option_converter.convert_to_options.html","description":"Creates one of the options object based on configuration dictionary. If configuration has keys start and stop , StartStopOptions is created. If configuration has keys start_exp and stop_exp , StartSto...","content":"Creates one of the options object based on configuration dictionary. If configuration has keys start and stop , StartStopOptions is created. If configuration has keys start_exp and stop_exp , StartStopBaseOptions is created. If configuration has keys center and span , CenterSpanOptions is created. If configuration has keys center_exp and span_exp , CenterSpanBaseOptions is created If configuration has keys fixed , FixedOptions is created. config ( dict [ str , Any ] ) – Configuration dictionary. ValueError – Error is raised if config has unsupported structure SweepOptions previous option_converter next start_stop_base_options © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"qcm_data_client","url":"/iqm-exa-common/api/exa.common.qcm_data.qcm_data_client.html","description":"QCM (Quantum Computer Management) Data API client implementation. Full path: exa.common.qcm_data.qcm_data_client Classes QCMDataClient Python client for QCM (Quantum Computer Management) Data API. Inh...","content":"QCM (Quantum Computer Management) Data API client implementation. Full path: exa.common.qcm_data.qcm_data_client Classes QCMDataClient Python client for QCM (Quantum Computer Management) Data API. Inheritance previous ImmutableBaseModel next QCMDataClient © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"linear_sweep","url":"/iqm-exa-common/api/exa.common.control.sweep.linear_sweep.html","description":"Sweep specification with linearly spaced values. Full path: exa.common.control.sweep.linear_sweep Classes LinearSweep Generates evenly spaced parameter values based on options . Inheritance previous F...","content":"Sweep specification with linearly spaced values. Full path: exa.common.control.sweep.linear_sweep Classes LinearSweep Generates evenly spaced parameter values based on options . Inheritance previous FixedSweep next LinearSweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"chad_model","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.html","description":"Pydantic models for CHAD. Full path: exa.common.qcm_data.chad_model Classes CHAD Create a new model by parsing and validating input data from keyword arguments. Component Create a new model by parsing...","content":"Pydantic models for CHAD. Full path: exa.common.qcm_data.chad_model Classes CHAD Create a new model by parsing and validating input data from keyword arguments. Component Create a new model by parsing and validating input data from keyword arguments. Components Create a new model by parsing and validating input data from keyword arguments. ComputationalResonator Create a new model by parsing and validating input data from keyword arguments. Coupler Create a new model by parsing and validating input data from keyword arguments. Launcher Create a new model by parsing and validating input data from keyword arguments. ProbeLine Create a new model by parsing and validating input data from keyword arguments. Qubit Create a new model by parsing and validating input data from keyword arguments. Inheritance previous qcm_data next CHAD © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.NotFoundError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.NotFoundError.html","description":"Error raised when nothing was found with the given parameters. This should be used when it’s expected that something is found, for example when trying to find with an exact ID. message ( str ) – previ...","content":"Error raised when nothing was found with the given parameters. This should be used when it’s expected that something is found, for example when trying to find with an exact ID. message ( str ) – previous exa.common.errors.server_errors.InternalServerError next exa.common.errors.server_errors.ServiceUnavailableError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"Qubit","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Qubit.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ProbeLine next chip_topology © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"logger","url":"/iqm-exa-common/api/exa.common.logger.html","description":"Helper to initialize loggers to the specified logging level. Full path: exa.common.logger Subpackages and modules logger  previous exa.common.helpers.software_version_helper.get_vcs_description next l...","content":"Helper to initialize loggers to the specified logging level. Full path: exa.common.logger Subpackages and modules logger  previous exa.common.helpers.software_version_helper.get_vcs_description next logger © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.StationControlError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.StationControlError.html","description":"Base class for station control errors used in client-server communication. message ( str ) – previous exa.common.errors.server_errors.ServiceUnavailableError next exa.common.errors.server_errors.Unaut...","content":"Base class for station control errors used in client-server communication. message ( str ) – previous exa.common.errors.server_errors.ServiceUnavailableError next exa.common.errors.server_errors.UnauthorizedError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"StartStopOptions","url":"/iqm-exa-common/api/exa.common.control.sweep.option.start_stop_options.StartStopOptions.html","description":"Bases: SweepOptions Range generation options. Values are generated over the interval from start to stop . For linear sweep range the\\nnumber of generated values can be based either on count or step . I...","content":"Bases: SweepOptions Range generation options. Values are generated over the interval from start to stop . For linear sweep range the\\nnumber of generated values can be based either on count or step . In case count is empty\\nand step is not, step is used for calculating count . For exponential sweep range only count is used. Module: exa.common.control.sweep.option.start_stop_options Attributes count Number of values to generate. data List of values for parameter step Size of spacing between values. start Starting value of interval. stop Stopping value of interval. Methods start ( int | float | complex ) – stop ( int | float | complex ) – count ( int | None ) – step ( int | float | complex | None ) – Starting value of interval. Stopping value of interval. Number of values to generate. Must be non-negative.\\nIf count and step are empty, the default value of count is exa.common.control.sweep.option.constants.DEFAULT_COUNT . Size of spacing between values. Must be non-zero.\\nIf both count and step are not empty, only count is used List of values for parameter previous start_stop_options next sweep_options © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"util","url":"/iqm-exa-common/api/exa.common.sweep.util.html","description":"Generic utilities for converting sweep definitions from\\nuser-friendly format to canonic ones. Full path: exa.common.sweep.util Functions convert_sweeps_to_list_of_tuples (sweeps) Validate sweeps and c...","content":"Generic utilities for converting sweep definitions from\\nuser-friendly format to canonic ones. Full path: exa.common.sweep.util Functions convert_sweeps_to_list_of_tuples (sweeps) Validate sweeps and convert it to format accepted by the station control. linear_index_sweep (parameter, length) Produce an NdSweep over a dummy index. previous exa.common.sweep.database_serialization.encode_return_parameters next exa.common.sweep.util.convert_sweeps_to_list_of_tuples © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"numpy_helper","url":"/iqm-exa-common/api/exa.common.helpers.numpy_helper.html","description":"Coercion of numpy types. Full path: exa.common.helpers.numpy_helper Functions coerce_numpy_type_to_native (value) Convert numpy types to underlying native types, and Windows-specific int32 arrays to i...","content":"Coercion of numpy types. Full path: exa.common.helpers.numpy_helper Functions coerce_numpy_type_to_native (value) Convert numpy types to underlying native types, and Windows-specific int32 arrays to int64s. previous exa.common.helpers.json_helper.get_json_encoder next exa.common.helpers.numpy_helper.coerce_numpy_type_to_native © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"FixedSweep","url":"/iqm-exa-common/api/exa.common.control.sweep.fixed_sweep.FixedSweep.html","description":"Bases: Sweep A sweep over arbitrary set of values, given by options . Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.Validatio...","content":"Bases: Sweep A sweep over arbitrary set of values, given by options . Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.control.sweep.fixed_sweep Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parameter The Sweep represents changing the values of this Parameter. data List of values for parameter Methods parameter ( Parameter ) – options ( FixedOptions | None ) – data ( list [ Any ] | ndarray [ Any ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous fixed_sweep next linear_sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.datum.deserialize","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.datum.deserialize.html","description":"Deserialize a bitstring into a native Python type or a numpy array. Reverse operation of serialize() . source ( bytes ) – Bitstring that encodes some data. Deserialized data. None | str | bool | int |...","content":"Deserialize a bitstring into a native Python type or a numpy array. Reverse operation of serialize() . source ( bytes ) – Bitstring that encodes some data. Deserialized data. None | str | bool | int | float | complex | ndarray | list previous datum next exa.common.api.proto_serialization.datum.pack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.helpers.json_helper.get_json_encoder","url":"/iqm-exa-common/api/exa.common.helpers.json_helper.get_json_encoder.html","description":"Custom JSON encoder for complex number, ndarray or tuple Can be used in situation when serialization of JSON can be customised\\n(json_encoders config in pydantic models, custom_encoder in jsonable_enco...","content":"Custom JSON encoder for complex number, ndarray or tuple Can be used in situation when serialization of JSON can be customised\\n(json_encoders config in pydantic models, custom_encoder in jsonable_encoder\\nof fastapi, etc.) dict [ Any , Callable [[…], dict [ str , Any ]]] previous exa.common.helpers.json_helper.decode_json next numpy_helper © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"InfoFilter","url":"/iqm-exa-common/api/exa.common.logger.logger.InfoFilter.html","description":"Bases: Filter Helper class to filter log messages above INFO level. Initialize a filter. Initialize with the name of the logger which, together with its\\nchildren, will have its events allowed through ...","content":"Bases: Filter Helper class to filter log messages above INFO level. Initialize a filter. Initialize with the name of the logger which, together with its\\nchildren, will have its events allowed through the filter. If no\\nname is specified, allow every event. Module: exa.common.logger.logger Methods filter Determine if the specified record is to be logged. Determine if the specified record is to be logged. Returns True if the record should be logged, or False otherwise.\\nIf deemed appropriate, the record may be modified in-place. record ( LogRecord ) – bool previous ExtraFormatter next qcm_data © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.sweep.util.convert_sweeps_to_list_of_tuples","url":"/iqm-exa-common/api/exa.common.sweep.util.convert_sweeps_to_list_of_tuples.html","description":"Validate sweeps and convert it to format accepted by the station control. Converts a more convenient sweep definition list to a strict list of tuples of sweeps.\\nThe sweep instances themselves are the ...","content":"Validate sweeps and convert it to format accepted by the station control. Converts a more convenient sweep definition list to a strict list of tuples of sweeps.\\nThe sweep instances themselves are the same, except single sweep instances are turned\\ninto a tuple containing a single sweep. Verify that:\\n* sweeps list element is either Sweep or ParallelSweep\\n* tuple_of_sweep element is a Sweep\\n* tuple of sweeps contains at least one element\\n* length of a data is identical in all tuples of sweeps sweeps ( list [ Sweep | tuple [ Sweep , ... ] ] ) – More user-friendly definition of a list of sweeps. List of tuples of sweeps. ValueError if sweeps parameter does not follow the contract. – list [ tuple [ Sweep , …]] previous util next exa.common.sweep.util.linear_index_sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.data.value.serialize_value","url":"/iqm-exa-common/api/exa.common.data.value.serialize_value.html","description":"Serialize value type to JSON serializable type, to support complex and ndarray types. value ( Any ) – Any previous value next exa.common.data.value.validate_value © Copyright 2019-2022, IQM Finland Oy...","content":"Serialize value type to JSON serializable type, to support complex and ndarray types. value ( Any ) – Any previous value next exa.common.data.value.validate_value © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.sweep.database_serialization.encode_nd_sweeps","url":"/iqm-exa-common/api/exa.common.sweep.database_serialization.encode_nd_sweeps.html","description":"Encode sweeps to a JSON string. sweeps ( list [ tuple [ Sweep , ... ] ] ) – sweeps to be serialized. kwargs – keyword arguments passed to json.dumps json as a string str previous exa.common.sweep.data...","content":"Encode sweeps to a JSON string. sweeps ( list [ tuple [ Sweep , ... ] ] ) – sweeps to be serialized. kwargs – keyword arguments passed to json.dumps json as a string str previous exa.common.sweep.database_serialization.decode_settings next exa.common.sweep.database_serialization.encode_return_parameters © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"constants","url":"/iqm-exa-common/api/exa.common.control.sweep.option.constants.html","description":"Helper constants for SweepOptions classes. Full path: exa.common.control.sweep.option.constants Module Attributes DEFAULT_COUNT Default value for count value in options. DEFAULT_BASE Default value for...","content":"Helper constants for SweepOptions classes. Full path: exa.common.control.sweep.option.constants Module Attributes DEFAULT_COUNT Default value for count value in options. DEFAULT_BASE Default value for base value in options. OPTIONS_TYPE Dictionary with all possible types of options previous CenterSpanOptions next exa.common.control.sweep.option.constants.DEFAULT_COUNT © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.array.pack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.array.pack.html","description":"Packs a numeric numpy array into protobuf format. array ( ndarray ) – Numpy array to convert. A protobuf instance that encapsulates array . iqm.data_definitions.common.v1.data_types_pb2.Array previous...","content":"Packs a numeric numpy array into protobuf format. array ( ndarray ) – Numpy array to convert. A protobuf instance that encapsulates array . iqm.data_definitions.common.v1.data_types_pb2.Array previous array next exa.common.api.proto_serialization.array.unpack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.sweep.database_serialization.decode_settings","url":"/iqm-exa-common/api/exa.common.sweep.database_serialization.decode_settings.html","description":"Deserialize settings from json string json_str ( str ) – JSON representation of settings loaded\\nfrom e.g. persistence deserialized settings SettingNode previous exa.common.sweep.database_serialization...","content":"Deserialize settings from json string json_str ( str ) – JSON representation of settings loaded\\nfrom e.g. persistence deserialized settings SettingNode previous exa.common.sweep.database_serialization.decode_return_parameters next exa.common.sweep.database_serialization.encode_nd_sweeps © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"CenterSpanBaseOptions","url":"/iqm-exa-common/api/exa.common.control.sweep.option.center_span_base_options.CenterSpanBaseOptions.html","description":"Bases: SweepOptions Range generation options. Values are generated over the interval from base power start of the range\\nwith the center center and the size of span to base power end of the range\\nwith ...","content":"Bases: SweepOptions Range generation options. Values are generated over the interval from base power start of the range\\nwith the center center and the size of span to base power end of the range\\nwith the center center and the size of span . The number of values = count .\\nThese options are used only for exponential sweep range. Module: exa.common.control.sweep.option.center_span_base_options Attributes asc Order of generated values. base  count Number of values to generate. data List of values for parameter center Value of interval center for the power. span Size of the interval for the power Methods center ( int | float ) – span ( int | float ) – count ( int | None ) – base ( int | float | None ) – asc ( bool | None ) – Value of interval center for the power. Size of the interval for the power Number of values to generate. Default to exa.common.control.sweep.option.constants.DEFAULT_COUNT . Order of generated values. Default to ascending List of values for parameter previous center_span_base_options next center_span_options © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.ForbiddenError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.ForbiddenError.html","description":"Error raised when the operation is forbidden for the user. message ( str ) – previous exa.common.errors.server_errors.BadRequestError next exa.common.errors.server_errors.InternalServerError © Copyrig...","content":"Error raised when the operation is forbidden for the user. message ( str ) – previous exa.common.errors.server_errors.BadRequestError next exa.common.errors.server_errors.InternalServerError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"FixedOptions","url":"/iqm-exa-common/api/exa.common.control.sweep.option.fixed_options.FixedOptions.html","description":"Bases: SweepOptions Range fixed options. Module: exa.common.control.sweep.option.fixed_options Attributes data List of values for parameter fixed List of values. Methods fixed ( list [ Any ] | ndarray...","content":"Bases: SweepOptions Range fixed options. Module: exa.common.control.sweep.option.fixed_options Attributes data List of values for parameter fixed List of values. Methods fixed ( list [ Any ] | ndarray [ Any ] ) – List of values. List of values for parameter previous fixed_options next option_converter © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"data","url":"/iqm-exa-common/api/exa.common.data.html","description":"Classes for representing physical quantities and instrument settings. Full path: exa.common.data Subpackages and modules base_model  parameter Physical quantities and instrument settings. setting_node...","content":"Classes for representing physical quantities and instrument settings. Full path: exa.common.data Subpackages and modules base_model  parameter Physical quantities and instrument settings. setting_node A tree-structured container for Settings . value  previous exa.common.control.sweep.sweep_values.validate_sweep_values next base_model © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.sweep.database_serialization.decode_and_validate_sweeps","url":"/iqm-exa-common/api/exa.common.sweep.database_serialization.decode_and_validate_sweeps.html","description":"Decodes and validates json string of list of Sweeps and tuples of Sweeps. sweeps_json ( str ) – json string of nested structure of Sweep objects list of sweeps and tuples of sweeps ValueError if decod...","content":"Decodes and validates json string of list of Sweeps and tuples of Sweeps. sweeps_json ( str ) – json string of nested structure of Sweep objects list of sweeps and tuples of sweeps ValueError if decoded result is not expected return type – list [ Sweep | tuple [ Sweep , …]] previous database_serialization next exa.common.sweep.database_serialization.decode_return_parameters © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"value","url":"/iqm-exa-common/api/exa.common.data.value.html","description":"Full path: exa.common.data.value Functions serialize_value (value) Serialize value type to JSON serializable type, to support complex and ndarray types. validate_value (value) Validate (i.e. deseriali...","content":"Full path: exa.common.data.value Functions serialize_value (value) Serialize value type to JSON serializable type, to support complex and ndarray types. validate_value (value) Validate (i.e. deserialize) JSON serializable value to Python type, to support complex and ndarray types. previous SettingNode next exa.common.data.value.serialize_value © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.nd_sweep.unpack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.nd_sweep.unpack.html","description":"Convert protobuf representation into a NdSweep. Reverse operation of pack() . proto ( iqm.data_definitions.common.v1.sweep_pb2.CartesianSweep ) – list [ tuple [ Sweep , …]] previous exa.common.api.pro...","content":"Convert protobuf representation into a NdSweep. Reverse operation of pack() . proto ( iqm.data_definitions.common.v1.sweep_pb2.CartesianSweep ) – list [ tuple [ Sweep , …]] previous exa.common.api.proto_serialization.nd_sweep.pack next sequence © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"software_version_helper","url":"/iqm-exa-common/api/exa.common.helpers.software_version_helper.html","description":"Full path: exa.common.helpers.software_version_helper Functions get_all_software_versions ([reload_module]) Get all available software version information. get_vcs_description (root_directory) Get Ver...","content":"Full path: exa.common.helpers.software_version_helper Functions get_all_software_versions ([reload_module]) Get all available software version information. get_vcs_description (root_directory) Get Version Control System (VCS) description for the caller's current working directory. previous exa.common.helpers.numpy_helper.coerce_numpy_type_to_native next exa.common.helpers.software_version_helper.get_all_software_versions © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"ImmutableBaseModel","url":"/iqm-exa-common/api/exa.common.qcm_data.immutable_base_model.ImmutableBaseModel.html","description":"Bases: BaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: BaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.immutable_base_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous immutable_base_model next qcm_data_client © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"common","url":"/iqm-exa-common/api/exa.common.html","description":"Shared errors, helpers, control structures, settings, API models etc. Full path: exa.common Subpackages and modules api API helpers. control Common data structures of abstract instrument control. data...","content":"Shared errors, helpers, control structures, settings, API models etc. Full path: exa.common Subpackages and modules api API helpers. control Common data structures of abstract instrument control. data Classes for representing physical quantities and instrument settings. errors Common error messages. helpers Miscellaneous helper functionality. logger Helper to initialize loggers to the specified logging level. qcm_data  sweep Sweep utilities. previous API Reference next api © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"LinearSweep","url":"/iqm-exa-common/api/exa.common.control.sweep.linear_sweep.LinearSweep.html","description":"Bases: Sweep Generates evenly spaced parameter values based on options . If options is instance of StartStopOptions , then start and stop options are used for interval If options is instance of Center...","content":"Bases: Sweep Generates evenly spaced parameter values based on options . If options is instance of StartStopOptions , then start and stop options are used for interval If options is instance of CenterSpanOptions ,\\nthen the start and stop of the interval are calculated from center and span values ValueError – Error is raised if options is inconsistent. parameter ( Parameter ) – options ( StartStopOptions | CenterSpanOptions | None ) – data ( list [ Any ] | ndarray [ Any ] ) – Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.control.sweep.linear_sweep Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parameter The Sweep represents changing the values of this Parameter. data List of values for parameter Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous linear_sweep next option © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"qcm_data","url":"/iqm-exa-common/api/exa.common.qcm_data.html","description":"Full path: exa.common.qcm_data Subpackages and modules chad_model Pydantic models for CHAD. chip_topology Chip topology class for parsing CHAD and other QPU related data into human-usable form. file_a...","content":"Full path: exa.common.qcm_data Subpackages and modules chad_model Pydantic models for CHAD. chip_topology Chip topology class for parsing CHAD and other QPU related data into human-usable form. file_adapter  immutable_base_model  qcm_data_client QCM (Quantum Computer Management) Data API client implementation. previous InfoFilter next chad_model © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"Launcher","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Launcher.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. pin  function  name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – pin ( str ) – function ( str ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Coupler next ProbeLine © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"base_model","url":"/iqm-exa-common/api/exa.common.data.base_model.html","description":"Full path: exa.common.data.base_model Classes BaseModel Pydantic base model to change the behaviour of pydantic globally. Inheritance previous data next BaseModel © Copyright 2019-2022, IQM Finland Oy...","content":"Full path: exa.common.data.base_model Classes BaseModel Pydantic base model to change the behaviour of pydantic globally. Inheritance previous data next BaseModel © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"option","url":"/iqm-exa-common/api/exa.common.control.sweep.option.html","description":"Range specifications for Sweeps. Full path: exa.common.control.sweep.option Subpackages and modules center_span_base_options Range specification used with exponential sweeps. center_span_options Range...","content":"Range specifications for Sweeps. Full path: exa.common.control.sweep.option Subpackages and modules center_span_base_options Range specification used with exponential sweeps. center_span_options Range specification to define a range around a center value. constants Helper constants for SweepOptions classes. fixed_options Range specification for arbitrary set of values. option_converter Helper to create a SweepOptions instance from a dict. start_stop_base_options Range specification used with exponential sweeps. start_stop_options Range specification to define a linearly spaced interval. sweep_options Base class for sweep options. previous LinearSweep next center_span_base_options © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.exa_error.EmptyComponentListError","url":"/iqm-exa-common/api/exa.common.errors.exa_error.EmptyComponentListError.html","description":"Error raised when an empty list is given as components for running an experiment. message ( str ) – previous exa_error next exa.common.errors.exa_error.ExaError © Copyright 2019-2022, IQM Finland Oy. ...","content":"Error raised when an empty list is given as components for running an experiment. message ( str ) – previous exa_error next exa.common.errors.exa_error.ExaError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"SweepOptions","url":"/iqm-exa-common/api/exa.common.control.sweep.option.sweep_options.SweepOptions.html","description":"Bases: object Base immutable class for sweep options. Module: exa.common.control.sweep.option.sweep_options Attributes data List of values for parameter Methods List of values for parameter previous s...","content":"Bases: object Base immutable class for sweep options. Module: exa.common.control.sweep.option.sweep_options Attributes data List of values for parameter Methods List of values for parameter previous sweep_options next sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.control.sweep.option.constants.OPTIONS_TYPE","url":"/iqm-exa-common/api/exa.common.control.sweep.option.constants.OPTIONS_TYPE.html","description":"Dictionary with all possible types of options previous exa.common.control.sweep.option.constants.DEFAULT_BASE next fixed_options © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30....","content":"Dictionary with all possible types of options previous exa.common.control.sweep.option.constants.DEFAULT_BASE next fixed_options © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.datum.pack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.datum.pack.html","description":"Packs a string, numerical value, or an array thereof into protobuf format. Supported data types are:\\n- str\\n- bool\\n- int, float and complex\\n- Sequences of above. Note that the type of Sequence (list, t...","content":"Packs a string, numerical value, or an array thereof into protobuf format. Supported data types are:\\n- str\\n- bool\\n- int, float and complex\\n- Sequences of above. Note that the type of Sequence (list, tuple…) is lost in the conversion.\\n- numeric numpy arrays\\n- None value ( None | bool | str | int | float | complex | ndarray | Sequence ) – The piece of data to convert. A protobuf instance that encapsulates value . TypeError in case of unsupported type. – iqm.data_definitions.common.v1.data_types_pb2.Datum previous exa.common.api.proto_serialization.datum.deserialize next exa.common.api.proto_serialization.datum.serialize © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.control.sweep.option.constants.DEFAULT_BASE","url":"/iqm-exa-common/api/exa.common.control.sweep.option.constants.DEFAULT_BASE.html","description":"Default value for base value in options. previous exa.common.control.sweep.option.constants.DEFAULT_COUNT next exa.common.control.sweep.option.constants.OPTIONS_TYPE © Copyright 2019-2022, IQM Finland...","content":"Default value for base value in options. previous exa.common.control.sweep.option.constants.DEFAULT_COUNT next exa.common.control.sweep.option.constants.OPTIONS_TYPE © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"server_errors","url":"/iqm-exa-common/api/exa.common.errors.server_errors.html","description":"Errors used in the client-server communication. Full path: exa.common.errors.server_errors Exceptions BadRequestError (message, *args) Error raised when the request syntax is invalid or the method is ...","content":"Errors used in the client-server communication. Full path: exa.common.errors.server_errors Exceptions BadRequestError (message, *args) Error raised when the request syntax is invalid or the method is unsupported in general. ForbiddenError (message, *args) Error raised when the operation is forbidden for the user. InternalServerError (message, *args) Error raised when an unexpected error happened on the server side. NotFoundError (message, *args) Error raised when nothing was found with the given parameters. ServiceUnavailableError (message, *args) Error raised when the service is unavailable. StationControlError (message, *args) Base class for station control errors used in client-server communication. UnauthorizedError (message, *args) Error raised when the user is not authorized. ValidationError (message, *args) Error raised when something is unprocessable in general, for example if the input value is not acceptable. previous exa.common.errors.exa_error.UnknownSettingError next exa.common.errors.server_errors.BadRequestError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"json_helper","url":"/iqm-exa-common/api/exa.common.helpers.json_helper.html","description":"Full path: exa.common.helpers.json_helper Functions decode_json (obj) Custom json decoder for object, in case it is represented as complex number, ndarray or tuple. get_json_encoder () Custom JSON enc...","content":"Full path: exa.common.helpers.json_helper Functions decode_json (obj) Custom json decoder for object, in case it is represented as complex number, ndarray or tuple. get_json_encoder () Custom JSON encoder for complex number, ndarray or tuple previous exa.common.helpers.data_helper.add_data_array next exa.common.helpers.json_helper.decode_json © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.qcm_data.chip_topology.sort_components","url":"/iqm-exa-common/api/exa.common.qcm_data.chip_topology.sort_components.html","description":"Sort the given components in a human-readable way. components ( Iterable [ str ] ) – list [ str ] previous chip_topology next exa.common.qcm_data.chip_topology.sort_couplers © Copyright 2019-2022, IQM...","content":"Sort the given components in a human-readable way. components ( Iterable [ str ] ) – list [ str ] previous chip_topology next exa.common.qcm_data.chip_topology.sort_couplers © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.sequence.unpack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.sequence.unpack.html","description":"Unpacks protobuf to list. Reverse operation of pack() . source ( iqm.data_definitions.common.v1.data_types_pb2.Sequence ) – A protobuf instance that encapsulates some data. Unpacked data. ValueError o...","content":"Unpacks protobuf to list. Reverse operation of pack() . source ( iqm.data_definitions.common.v1.data_types_pb2.Sequence ) – A protobuf instance that encapsulates some data. Unpacked data. ValueError or google.protobuf.message.DecodeError in case of invalid buffer – list previous exa.common.api.proto_serialization.sequence.pack next setting_node © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.array.unpack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.array.unpack.html","description":"Unpacks protobuf to array. Reverse operation of pack() . source ( iqm.data_definitions.common.v1.data_types_pb2.Array ) – A protobuf instance that encapsulates some data. Unpacked data. ValueError or ...","content":"Unpacks protobuf to array. Reverse operation of pack() . source ( iqm.data_definitions.common.v1.data_types_pb2.Array ) – A protobuf instance that encapsulates some data. Unpacked data. ValueError or google.protobuf.message.DecodeError in case of invalid buffer – ndarray previous exa.common.api.proto_serialization.array.pack next datum © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"control","url":"/iqm-exa-common/api/exa.common.control.html","description":"Common data structures of abstract instrument control. Full path: exa.common.control Subpackages and modules sweep Classes for sweep specification. previous exa.common.api.proto_serialization.setting_...","content":"Common data structures of abstract instrument control. Full path: exa.common.control Subpackages and modules sweep Classes for sweep specification. previous exa.common.api.proto_serialization.setting_node.unpack next sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.control.sweep.sweep_values.validate_sweep_values","url":"/iqm-exa-common/api/exa.common.control.sweep.sweep_values.validate_sweep_values.html","description":"Validate (i.e. deserialize) JSON serializable sweep values to Python type, to support complex types. sweep_values ( Any ) – Any previous exa.common.control.sweep.sweep_values.serialize_sweep_values ne...","content":"Validate (i.e. deserialize) JSON serializable sweep values to Python type, to support complex types. sweep_values ( Any ) – Any previous exa.common.control.sweep.sweep_values.serialize_sweep_values next data © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"ExponentialSweep","url":"/iqm-exa-common/api/exa.common.control.sweep.exponential_sweep.ExponentialSweep.html","description":"Bases: Sweep Generates parameter values spaced evenly on a geometric progression based on options . If options is instance of StartStopBaseOptions ,\\nthe start and stop of the interval are calculated f...","content":"Bases: Sweep Generates parameter values spaced evenly on a geometric progression based on options . If options is instance of StartStopBaseOptions ,\\nthe start and stop of the interval are calculated from powers of start and stop. If options is instance of CenterSpanBaseOptions ,\\nthe start and stop of the interval are calculated from powers of start and stop,\\nwhich are derived from center and span. ValueError – Error is raised if options is inconsistent. parameter ( Parameter ) – options ( StartStopBaseOptions | CenterSpanBaseOptions | None ) – data ( list [ Any ] | ndarray [ Any ] ) – Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.control.sweep.exponential_sweep Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parameter The Sweep represents changing the values of this Parameter. data List of values for parameter Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous exponential_sweep next fixed_sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.helpers.numpy_helper.coerce_numpy_type_to_native","url":"/iqm-exa-common/api/exa.common.helpers.numpy_helper.coerce_numpy_type_to_native.html","description":"Convert numpy types to underlying native types, and Windows-specific int32 arrays to int64s. value ( Any ) – Any previous numpy_helper next software_version_helper © Copyright 2019-2022, IQM Finland O...","content":"Convert numpy types to underlying native types, and Windows-specific int32 arrays to int64s. value ( Any ) – Any previous numpy_helper next software_version_helper © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.helpers.software_version_helper.get_all_software_versions","url":"/iqm-exa-common/api/exa.common.helpers.software_version_helper.get_all_software_versions.html","description":"Get all available software version information. Currently, this function collects all Python package versions and Python interpreter version. reload_module ( bool ) – Whether to reload the pkg_resourc...","content":"Get all available software version information. Currently, this function collects all Python package versions and Python interpreter version. reload_module ( bool ) – Whether to reload the pkg_resources module or not. By default,\\nit is disabled because reloading the module is not thread safe!\\nThis function should be called with reload_module=True when IPython autoreload is in use. dict [ str , str ] Example You have numpy==1.21.0 installed, and in the notebook you have executed the following IPython magic: You install numpy==1.21.1 You call this function with reload_module=False . This will result in some warning printouts and\\nthe function will succeed by returning 1.21.0 for numpy, which is wrong because in reality IPython\\nautoreload has reloaded the newly installed numpy 1.21.1.\\nWith reload_module=True the correct version 1.21.1 is returned and no warnings are printed. information. A package’s version information contains the base version, and the string\\n“(local editable)” in the case the package is a local editable installation. previous software_version_helper next exa.common.helpers.software_version_helper.get_vcs_description © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"setting_node","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.setting_node.html","description":"Convert SettingNodes to protos and back. Full path: exa.common.api.proto_serialization.setting_node Functions pack (node, minimal) Convert a SettingNode into protobuf representation. unpack (proto) Co...","content":"Convert SettingNodes to protos and back. Full path: exa.common.api.proto_serialization.setting_node Functions pack (node, minimal) Convert a SettingNode into protobuf representation. unpack (proto) Convert protobuf representation into a SettingNode. previous exa.common.api.proto_serialization.sequence.unpack next exa.common.api.proto_serialization.setting_node.pack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.helpers.json_helper.decode_json","url":"/iqm-exa-common/api/exa.common.helpers.json_helper.decode_json.html","description":"Custom json decoder for object, in case it is represented as\\ncomplex number, ndarray or tuple.\\nOtherwise decoder won’t be applied Here is an example of encoded/decoded json with complex number and nda...","content":"Custom json decoder for object, in case it is represented as\\ncomplex number, ndarray or tuple.\\nOtherwise decoder won’t be applied Here is an example of encoded/decoded json with complex number and ndarray: obj ( Any ) – Any previous json_helper next exa.common.helpers.json_helper.get_json_encoder © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.setting_node.unpack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.setting_node.unpack.html","description":"Convert protobuf representation into a SettingNode. Reverse operation of pack() proto ( iqm.data_definitions.common.v1.setting_pb2.SettingNode ) – Protobuf instance to unpack, recursively. Unpacked Se...","content":"Convert protobuf representation into a SettingNode. Reverse operation of pack() proto ( iqm.data_definitions.common.v1.setting_pb2.SettingNode ) – Protobuf instance to unpack, recursively. Unpacked SettingNode. In case proto only contains the parameter names (see optimize in pack() ), dummy Parameters are generated. SettingNode previous exa.common.api.proto_serialization.setting_node.pack next control © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"api","url":"/iqm-exa-common/api/exa.common.api.html","description":"API helpers. Full path: exa.common.api Subpackages and modules proto_serialization Conversions between Protocol buffers in iqm.data_structures.common and Python objects in exa-common. previous common ...","content":"API helpers. Full path: exa.common.api Subpackages and modules proto_serialization Conversions between Protocol buffers in iqm.data_structures.common and Python objects in exa-common. previous common next proto_serialization © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"parameter","url":"/iqm-exa-common/api/exa.common.data.parameter.html","description":"Physical quantities and instrument settings. A basic data structure in EXA is the Parameter , which represents\\na single variable. The variable can be a high-level or low-level control knob of an instr...","content":"Physical quantities and instrument settings. A basic data structure in EXA is the Parameter , which represents\\na single variable. The variable can be a high-level or low-level control knob of an instrument such as\\nthe amplitude of a pulse or a control voltage; a physical quantity such as resonance frequency; or an abstract concept\\nlike the number of averages in a measurement. The Parameter is a simple structure with a name, label, unit and a datatype without much functionality.\\nThe Setting combines a Parameter and a value of the corresponding type.\\nLike Parameters, Settings are lightweight objects that contain information but don’t do anything by themselves. The Settings are immutable, which means that the value can’t be changed, we can only make a copy with another value.\\nWhen assigning a new value to a Setting, the datatype of the value is validated against the expected datatype of the\\nparameter. Full path: exa.common.data.parameter Classes CollectionType Parameter collection type. DataType Parameter data type. Parameter A basic data structure that represents a single variable. Setting Physical quantity represented as a Parameter attached to a numerical value. Inheritance previous BaseModel next CollectionType © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"Component","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Component.html","description":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidate...","content":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods sort  name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous CHAD next Components © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.BadRequestError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.BadRequestError.html","description":"Error raised when the request syntax is invalid or the method is unsupported in general. message ( str ) – previous server_errors next exa.common.errors.server_errors.ForbiddenError © Copyright 2019-2...","content":"Error raised when the request syntax is invalid or the method is unsupported in general. message ( str ) – previous server_errors next exa.common.errors.server_errors.ForbiddenError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"CenterSpanOptions","url":"/iqm-exa-common/api/exa.common.control.sweep.option.center_span_options.CenterSpanOptions.html","description":"Bases: SweepOptions Range generation options. Values are generated over the interval with the center center and the size of span .\\nFor linear sweep range the number of generated values can be based ei...","content":"Bases: SweepOptions Range generation options. Values are generated over the interval with the center center and the size of span .\\nFor linear sweep range the number of generated values can be based either on count or step .\\nIn case count is empty and step is not, step is used for calculating count .\\nFor exponential sweep range only count is used. Module: exa.common.control.sweep.option.center_span_options Attributes asc Order of generated values. count Number of values to generate. data List of values for parameter step Size of spacing between values. center Value of interval center. span Size of the interval. Methods center ( int | float | complex ) – span ( int | float | complex ) – count ( int | None ) – step ( int | float | complex ) – asc ( bool | None ) – Value of interval center. Size of the interval. Number of values to generate.\\nIf count and step are empty, the default value of count is exa.common.control.sweep.option.constants.DEFAULT_COUNT . Size of spacing between values. Order of generated values. Default to ascending List of values for parameter previous center_span_options next constants © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.helpers.software_version_helper.get_vcs_description","url":"/iqm-exa-common/api/exa.common.helpers.software_version_helper.get_vcs_description.html","description":"Get Version Control System (VCS) description for the caller’s current working directory. The description is used to verify if a directory is installed under VCS and whether changes to the files have\\nb...","content":"Get Version Control System (VCS) description for the caller’s current working directory. The description is used to verify if a directory is installed under VCS and whether changes to the files have\\nbeen made. First, the existence of .git directory will be checked from root_directory .\\nOnly if it exists, a git command is executed in a subprocess with a timeout\\nof 1 seconds as the best effort only. The path to the directory where the command will be executed. For instance when called from\\nexa-experiment, it can be the exa-experiment root directory or any directory under it. If root_directory is not installed under git, None will be returned. Otherwise, the output of git describe --dirty --tags --long is returned. In case of errors in executing the command, the caught subprocess.CalledProcessError will be converted to string and returned. If the command fails or timeouts , an exception will be raised directly from subprocess.check_output. – root_directory ( str ) – str | None previous exa.common.helpers.software_version_helper.get_all_software_versions next logger © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"StartStopBaseOptions","url":"/iqm-exa-common/api/exa.common.control.sweep.option.start_stop_base_options.StartStopBaseOptions.html","description":"Bases: SweepOptions Range generation options. Values are generated over the interval from base power start to base power stop .\\nThe number of values = count . These options are used only for exponenti...","content":"Bases: SweepOptions Range generation options. Values are generated over the interval from base power start to base power stop .\\nThe number of values = count . These options are used only for exponential sweep range. Module: exa.common.control.sweep.option.start_stop_base_options Attributes base Number, that is raised to the power start or stop . count Number of values to generate. data List of values for parameter start The power for the start of the interval. stop The power for the end of the interval. Methods start ( int | float | complex ) – stop ( int | float | complex ) – count ( int | None ) – base ( int | float | None ) – The power for the start of the interval. The power for the end of the interval. Number of values to generate. Default to exa.common.control.sweep.option.constants.DEFAULT_COUNT . Number, that is raised to the power start or stop . Default to exa.common.control.sweep.option.constants.DEFAULT_BASE . List of values for parameter previous start_stop_base_options next start_stop_options © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"Parameter","url":"/iqm-exa-common/api/exa.common.data.parameter.Parameter.html","description":"Bases: BaseModel A basic data structure that represents a single variable. The variable can be a high-level or low-level control knob of an instrument such as the amplitude of a pulse\\nor a control vol...","content":"Bases: BaseModel A basic data structure that represents a single variable. The variable can be a high-level or low-level control knob of an instrument such as the amplitude of a pulse\\nor a control voltage; a physical quantity such as resonance frequency; or an abstract concept\\nlike the number of averages in a measurement. Setting combines Parameter with a numerical, boolean, or string value to represent a quantity. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.parameter Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parent_label Returns the parent label. parent_name Returns the parent name. name Parameter name used as identifier label name unit SI unit of the quantity, if applicable. data_type Data type or a tuple of datatypes that this parameter accepts and validates. collection_type Data format that this parameter accepts and validates. element_indices For parameters representing a single value in a collection-valued parent parameter, this field gives the indices of that value. Methods build_data_array Attach Parameter information to a numerical array. build_data_set Build an xarray Dataset, where the only DataArray is given by results and coordinates are given by variables . create_element_parameter_for Utility for creating an element-wise parameter for a single value in a collection valued parameter. model_post_init This function is meant to behave like a BaseModel method to initialise private attributes. set Create a Setting object with given value . validate Validate that given value matches the data_type and collection_type . name ( str ) – label ( str ) – unit ( str ) – data_type ( DataType | tuple [ DataType , ... ] ) – collection_type ( CollectionType ) – element_indices ( int | list [ int ] | None ) – Parameter name used as identifier name Parameter label used as pretty identifier for display purposes. Default SI unit of the quantity, if applicable. Data type or a tuple of datatypes that this parameter accepts and validates. One of DataType .\\nDefault: FLOAT. Data format that this parameter accepts and validates. One of CollectionType .\\nDefault: SCALAR. For parameters representing a single value in a collection-valued parent parameter, this field gives the indices\\nof that value. If populated, the self.name and self.label will be updated in post init to include\\nthe indices (becoming \\"<parent name>__<index0>__<index1>__...__<indexN>\\" and \\"<parent label> <indices>\\" , respectively). The parent name can then be retrieved with self.parent_name and the parent label with self.parent_label . Returns the parent name. This None except in element-wise parameters where gives the name of the parent parameter. Returns the parent label. This None except in element-wise parameters where gives the label of the parent parameter. Create a Setting object with given value . value ( Any ) – Setting Build an xarray Dataset, where the only DataArray is given by results and coordinates are given by variables . The data is reshaped to correspond to the sizes of the variables. For example, variables = [(par_x, [1,2,3]), (par_y: [-1, -2])] will shape the data to 3-by-2 array. If there are not\\nenough variables to reshape the data, remaining dimensions can be given by extra_variables . For example, variables = [(par_x: [1,2,3])], extra_variables=[('y', 2)] yields the same 3-by-2 data. 'y' will then be\\na “dimension without coordinate” in xarray terms. variables ( list [ tuple [ Parameter , list [ Any ] ] ] ) – Coordinates of the set. data ( tuple [ Parameter , list [ Any ] | ndarray [ Any ] ] ) – Data Parameter and associated data as a possible nested list. attributes ( dict [ str , Any ] ) – metadata to attach to the whole Dataset. extra_variables ( list [ tuple [ str , int ] ] | None ) – Valueless dimensions and their sizes. Validate that given value matches the data_type and collection_type . value ( Any ) – bool Attach Parameter information to a numerical array. Given an array of numerical values, returns a corresponding xr.DataArray instance\\nthat gets its name, units, and dimension names (unless explicitly given) from the Parameter instance. data ( ndarray ) – numerical values dimensions ( list [ Hashable ] ) – names of the dimensions of data coords ( dict [ Hashable , Any ] ) – coordinates labeling the dimensions of data metadata ( dict [ str , Any ] ) – additional xr.DataArray.attrs corresponding DataArray DataArray Utility for creating an element-wise parameter for a single value in a collection valued parameter. indices ( int | list [ int ] ) – The indices in the collection for which to create the element-wise parameter. The element-wise parameter. UnprocessableEntityError – If self is not collection-valued. Parameter Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. This function is meant to behave like a BaseModel method to initialise private attributes. It takes context as an argument since that’s what pydantic-core passes when calling it. self ( BaseModel ) – The BaseModel instance. context ( Any ) – The context. None previous DataType next Setting © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"option_converter","url":"/iqm-exa-common/api/exa.common.control.sweep.option.option_converter.html","description":"Helper to create a SweepOptions instance from a dict. Full path: exa.common.control.sweep.option.option_converter Functions convert_to_options (config) Creates one of the options object based on confi...","content":"Helper to create a SweepOptions instance from a dict. Full path: exa.common.control.sweep.option.option_converter Functions convert_to_options (config) Creates one of the options object based on configuration dictionary. previous FixedOptions next exa.common.control.sweep.option.option_converter.convert_to_options © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"proto_serialization","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.html","description":"Conversions between Protocol buffers in iqm.data_structures.common and Python objects in exa-common. Each submodule corresponds to a Protobuf definition from iqm.data_structures.common .\\nEach module h...","content":"Conversions between Protocol buffers in iqm.data_structures.common and Python objects in exa-common. Each submodule corresponds to a Protobuf definition from iqm.data_structures.common .\\nEach module has at least 2 functions, pack and unpack , which pack the Python type into a Protobuf instance or\\nvice versa. The packed objects can be nested when constructing new Protobuf objects.\\nIt is intended that the user does the final serialization using the Protobuf service methods. Full path: exa.common.api.proto_serialization Subpackages and modules array Convert numpy arrays to protos and back. datum Convert native Python types and numpy arrays to protos and back. nd_sweep Convert NdSweeps to protos and back. sequence Convert Python Sequences to protos and back. setting_node Convert SettingNodes to protos and back. previous api next array © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"fixed_options","url":"/iqm-exa-common/api/exa.common.control.sweep.option.fixed_options.html","description":"Range specification for arbitrary set of values. Full path: exa.common.control.sweep.option.fixed_options Classes FixedOptions Range fixed options. Inheritance previous exa.common.control.sweep.option...","content":"Range specification for arbitrary set of values. Full path: exa.common.control.sweep.option.fixed_options Classes FixedOptions Range fixed options. Inheritance previous exa.common.control.sweep.option.constants.OPTIONS_TYPE next FixedOptions © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"immutable_base_model","url":"/iqm-exa-common/api/exa.common.qcm_data.immutable_base_model.html","description":"Full path: exa.common.qcm_data.immutable_base_model Classes ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Inheritance previous FileAdapter next Imm...","content":"Full path: exa.common.qcm_data.immutable_base_model Classes ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Inheritance previous FileAdapter next ImmutableBaseModel © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"sweep","url":"/iqm-exa-common/api/exa.common.control.sweep.html","description":"Classes for sweep specification. Full path: exa.common.control.sweep Subpackages and modules exponential_sweep Sweep specification with exponentially spaced values. fixed_sweep Sweep specification wit...","content":"Classes for sweep specification. Full path: exa.common.control.sweep Subpackages and modules exponential_sweep Sweep specification with exponentially spaced values. fixed_sweep Sweep specification with arbitrary values. linear_sweep Sweep specification with linearly spaced values. option Range specifications for Sweeps. sweep Base immutable class for sweeps specifications. sweep_values Pydantic compatible annotated class for sweep values. previous control next exponential_sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"CollectionType","url":"/iqm-exa-common/api/exa.common.data.parameter.CollectionType.html","description":"Bases: IntEnum Parameter collection type. Module: exa.common.data.parameter Attributes SCALAR Scalar, not a list of any kind. LIST Python list. NDARRAY Numpy ndarray. Methods cast Cast the given value...","content":"Bases: IntEnum Parameter collection type. Module: exa.common.data.parameter Attributes SCALAR Scalar, not a list of any kind. LIST Python list. NDARRAY Numpy ndarray. Methods cast Cast the given value to this collection type. Scalar, not a list of any kind. Python list. Numpy ndarray. Cast the given value to this collection type. value ( Any ) – Any previous parameter next DataType © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.ValidationError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.ValidationError.html","description":"Error raised when something is unprocessable in general, for example if the input value is not acceptable. message ( str ) – previous exa.common.errors.server_errors.UnauthorizedError next helpers © C...","content":"Error raised when something is unprocessable in general, for example if the input value is not acceptable. message ( str ) – previous exa.common.errors.server_errors.UnauthorizedError next helpers © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.data.value.validate_value","url":"/iqm-exa-common/api/exa.common.data.value.validate_value.html","description":"Validate (i.e. deserialize) JSON serializable value to Python type, to support complex and ndarray types. value ( Any ) – Any previous exa.common.data.value.serialize_value next errors © Copyright 201...","content":"Validate (i.e. deserialize) JSON serializable value to Python type, to support complex and ndarray types. value ( Any ) – Any previous exa.common.data.value.serialize_value next errors © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.exa_error.UnknownSettingError","url":"/iqm-exa-common/api/exa.common.errors.exa_error.UnknownSettingError.html","description":"This SettingNode does not have a given key. message ( str ) – previous exa.common.errors.exa_error.InvalidSweepOptionsTypeError next server_errors © Copyright 2019-2022, IQM Finland Oy. Last updated o...","content":"This SettingNode does not have a given key. message ( str ) – previous exa.common.errors.exa_error.InvalidSweepOptionsTypeError next server_errors © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"database_serialization","url":"/iqm-exa-common/api/exa.common.sweep.database_serialization.html","description":"Functions that encode and decode all sweep arguments(different types of\\nsweeps, return parameters, settings, etc.). The module provides functions for\\nserializing and deserializing sweep arguments befo...","content":"Functions that encode and decode all sweep arguments(different types of\\nsweeps, return parameters, settings, etc.). The module provides functions for\\nserializing and deserializing sweep arguments before saving them to database. Full path: exa.common.sweep.database_serialization Functions decode_and_validate_sweeps (sweeps_json) Decodes and validates json string of list of Sweeps and tuples of Sweeps. decode_return_parameters (json_str) Deserialize return parameters. decode_settings (json_str) Deserialize settings from json string encode_nd_sweeps (sweeps, **kwargs) Encode sweeps to a JSON string. encode_return_parameters (return_parameters, ...) Encode sweeps to a JSON string. previous sweep next exa.common.sweep.database_serialization.decode_and_validate_sweeps © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.datum.unpack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.datum.unpack.html","description":"Unpacks a protobuf into a native Python type or a numpy array. Reverse operation of pack() . source ( iqm.data_definitions.common.v1.data_types_pb2.Datum ) – A protobuf instance that encapsulates some...","content":"Unpacks a protobuf into a native Python type or a numpy array. Reverse operation of pack() . source ( iqm.data_definitions.common.v1.data_types_pb2.Datum ) – A protobuf instance that encapsulates some data. Unpacked data. TypeError or google.protobuf.message.DecodeError in case of invalid buffer – None | str | bool | int | float | complex | ndarray | list previous exa.common.api.proto_serialization.datum.serialize next nd_sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"BaseModel","url":"/iqm-exa-common/api/exa.common.data.base_model.BaseModel.html","description":"Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.py...","content":"Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.pydantic.dev/latest/concepts/config/#change-behaviour-globally Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.base_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods copy Returns a copy of the model. model_copy Returns a copy of the model. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Returns a copy of the model. Overrides the Pydantic default ‘model_copy’ to set ‘deep=True’ by default. update ( dict [ str , Any ] | None ) – deep ( bool ) – Self Returns a copy of the model. DEPRECATED: Use model_copy(update: dict[str, Any], deep: bool) instead. Self previous base_model next parameter © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"sweep_options","url":"/iqm-exa-common/api/exa.common.control.sweep.option.sweep_options.html","description":"Base class for sweep options. Full path: exa.common.control.sweep.option.sweep_options Classes SweepOptions Base immutable class for sweep options. Inheritance previous StartStopOptions next SweepOpti...","content":"Base class for sweep options. Full path: exa.common.control.sweep.option.sweep_options Classes SweepOptions Base immutable class for sweep options. Inheritance previous StartStopOptions next SweepOptions © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"ProbeLine","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.ProbeLine.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Launcher next Qubit © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"file_adapter","url":"/iqm-exa-common/api/exa.common.qcm_data.file_adapter.html","description":"Full path: exa.common.qcm_data.file_adapter Classes FileAdapter  Inheritance previous ChipTopology next FileAdapter © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30....","content":"Full path: exa.common.qcm_data.file_adapter Classes FileAdapter  Inheritance previous ChipTopology next FileAdapter © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"QCMDataClient","url":"/iqm-exa-common/api/exa.common.qcm_data.qcm_data_client.QCMDataClient.html","description":"Bases: object Python client for QCM (Quantum Computer Management) Data API. root_url ( str ) – URL pointing to QCM Data service.\\nThis URL can point to a local file storage as well.\\nIn that case, the U...","content":"Bases: object Python client for QCM (Quantum Computer Management) Data API. root_url ( str ) – URL pointing to QCM Data service.\\nThis URL can point to a local file storage as well.\\nIn that case, the URL should point to a directory which\\nhas a directory structure identical to QCM Data service (for example /chip-data-records/),\\nand files containing data in identical format returned by QCM Data service.\\nFor example, CHAD files should be named {chip_label}.json, like M156_W531_A09_L09.json, and contain\\na list instead of a single object. fallback_root_url ( str ) – Same as root_url , used if a query via root_url returns nothing. Module: exa.common.qcm_data.qcm_data_client Attributes root_url Returns the remote QCM Data service URL. Methods get_chip_design_record Get a raw chip design record matching the given chip label. Returns the remote QCM Data service URL. Get a raw chip design record matching the given chip label. chip_label ( str ) – Chip label. Data record matching the given chip label. dict previous qcm_data_client next sweep © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.helpers.data_helper.add_data_array","url":"/iqm-exa-common/api/exa.common.helpers.data_helper.add_data_array.html","description":"Add data array da to dataset ds . Unlike the default xarray command, preserves metadata of the dataset. ds ( Dataset ) – Dataset to add to. da ( DataArray ) – DataArray to add name ( str | None ) – na...","content":"Add data array da to dataset ds . Unlike the default xarray command, preserves metadata of the dataset. ds ( Dataset ) – Dataset to add to. da ( DataArray ) – DataArray to add name ( str | None ) – name under which da can be accessed inside ds .\\nBy default, uses the name property of da . The updated dataset. Dataset previous data_helper next json_helper © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.InternalServerError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.InternalServerError.html","description":"Error raised when an unexpected error happened on the server side. This error should never be raised when something expected happens,\\nand whenever the client encounters this, it should be considered a...","content":"Error raised when an unexpected error happened on the server side. This error should never be raised when something expected happens,\\nand whenever the client encounters this, it should be considered as a server bug. message ( str ) – previous exa.common.errors.server_errors.ForbiddenError next exa.common.errors.server_errors.NotFoundError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"errors","url":"/iqm-exa-common/api/exa.common.errors.html","description":"Common error messages. Full path: exa.common.errors Subpackages and modules exa_error  server_errors Errors used in the client-server communication. previous exa.common.data.value.validate_value next ...","content":"Common error messages. Full path: exa.common.errors Subpackages and modules exa_error  server_errors Errors used in the client-server communication. previous exa.common.data.value.validate_value next exa_error © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"DataType","url":"/iqm-exa-common/api/exa.common.data.parameter.DataType.html","description":"Bases: IntEnum Parameter data type. Module: exa.common.data.parameter Attributes ANYTHING  FLOAT  COMPLEX  STRING  BOOLEAN  INT  NUMBER  Methods cast  validate  previous CollectionType next Parameter ...","content":"Bases: IntEnum Parameter data type. Module: exa.common.data.parameter Attributes ANYTHING  FLOAT  COMPLEX  STRING  BOOLEAN  INT  NUMBER  Methods cast  validate  previous CollectionType next Parameter © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"data_helper","url":"/iqm-exa-common/api/exa.common.helpers.data_helper.html","description":"Full path: exa.common.helpers.data_helper Functions add_data_array (ds, da[, name]) Add data array da to dataset ds . previous helpers next exa.common.helpers.data_helper.add_data_array © Copyright 20...","content":"Full path: exa.common.helpers.data_helper Functions add_data_array (ds, da[, name]) Add data array da to dataset ds . previous helpers next exa.common.helpers.data_helper.add_data_array © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"nd_sweep","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.nd_sweep.html","description":"Convert NdSweeps to protos and back. Full path: exa.common.api.proto_serialization.nd_sweep Functions pack (nd_sweep[, minimal]) Convert an NdSweep into protobuf representation. unpack (proto) Convert...","content":"Convert NdSweeps to protos and back. Full path: exa.common.api.proto_serialization.nd_sweep Functions pack (nd_sweep[, minimal]) Convert an NdSweep into protobuf representation. unpack (proto) Convert protobuf representation into a NdSweep. previous exa.common.api.proto_serialization.datum.unpack next exa.common.api.proto_serialization.nd_sweep.pack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"setting_node","url":"/iqm-exa-common/api/exa.common.data.setting_node.html","description":"A tree-structured container for Settings . The SettingNode class combines a bunch of Settings together.\\nIt may also contain other SettingNodes.\\nTogether, the contents form a tree structure that provid...","content":"A tree-structured container for Settings . The SettingNode class combines a bunch of Settings together.\\nIt may also contain other SettingNodes.\\nTogether, the contents form a tree structure that provides a useful way of grouping Settings. As an example, we manually construct a tree of SettingNodes with some dummy Settings, but it is usually not necessary.\\nThe root node in the following examples is called 'node' . The easiest way to see the content of the node is the SettingNode.print_tree() method: We see that the 'root' node has two children, named 'root.flux' and 'root.pulse' , which\\nthemselves are also SettingNodes.\\nThis follows the typical naming convention in EXA: Subnodes include the names of their parents, separated by a dot. The children contain some dummy Settings, showing the keys, labels and current values. For other ways to access the content of the node, see also SettingNode.children , SettingNode.all_settings , and SettingNode.nodes_by_type() . The values within the nodes can be accessed using the attribute or dictionary syntax: The values can be changed with a simple = syntax: Note node.setting refers to the Setting object. node.setting.value syntax refers to the data stored inside. SettingNode also supports “the path notation” by default (but not if align_name is set to False ,\\nsince it cannot be made to work consistently if nodes are allowed to be named differently from their paths): is the same as node['flux']['voltage'] . Adding and deleting new Settings and nodes is simple: It is usually a good idea to make a copy of the original node, so that it won’t be modified accidentally. The path notation of \`\` SettingNode\`\`also works when inserting: Any nodes that did not already exist under node will be inserted (in this case flux already existed, but\\nthe rest not, so under flux the nodes my , new , and path would be added), and then finally the\\nvalue is added as child to the final node. Note: SettingNode always alings the path and name of any nodes under it,\\nso this would result in the new setting being renamed as “flux.my.new.path.foo”: If align_name is set to False\\", the name and path of nodes are not automatically aligned, but otherwise the above path notation will still work. The added nodes will be named by just their path fragments (\\"my\\", \\"new\\", \\"path\\", and so on), and the Setting will be added under the key \\"foo\\", but it will still retain its name \\"bar\\". Note: the root node name will always be excluded from the paths (and names when they are aligned with the path), so that the path of \`\`root.foo.bar is \\"foo.bar\\" . To merge values of two SettingNodes, there are helpers SettingNode.merge() and SettingNode.merge_values() . The first one merges the tree structure and values of two nodes and outputs a third one as a result. None values are always replaced by a proper value if such exists. In case of conflicting nodes or values,\\nthe content of the first argument takes priority. Note how the result has values from node.flux , but also settings node.pulse that do not exist in node.flux . The SettingNode.merge_values() method is an in-place operation that only changes\\nthe values of Settings that already exist in the node, if possible: Sometimes, it is easier to collect values in a dictionary and set them all at once by using SettingNode.set_from_dict() . The nested structure of the dictionary should match\\nthe structure of the SettingNode. Keys that are not found in the tree are silently ignored, unless the strict flag is used. Full path: exa.common.data.setting_node Classes SettingNode A tree-structured Setting container. Inheritance previous Setting next SettingNode © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"ExtraFormatter","url":"/iqm-exa-common/api/exa.common.logger.logger.ExtraFormatter.html","description":"Bases: Formatter Helper formatter class to pass in arbitrary extra information to log messages. Initialize the formatter with specified format strings. Initialize the formatter either with the specifi...","content":"Bases: Formatter Helper formatter class to pass in arbitrary extra information to log messages. Initialize the formatter with specified format strings. Initialize the formatter either with the specified format string, or a\\ndefault as described above. Allow for specialized date formatting with\\nthe optional datefmt argument. If datefmt is omitted, you get an\\nISO8601-like (or RFC 3339-like) format. Use a style parameter of ‘%’, ‘{’ or ‘$’ to specify that you want to\\nuse one of %-formatting, str.format() ( {} ) formatting or string.Template formatting in your format string. Changed in version 3.2: Added the style parameter. Module: exa.common.logger.logger Attributes Methods format Format the specified record as text. extra_info_getter ( Callable [ [ ] , str ] | None ) – Format the specified record as text. The record’s attribute dictionary is used as the operand to a\\nstring formatting operation which yields the returned string.\\nBefore formatting the dictionary, a couple of preparatory steps\\nare carried out. The message attribute of the record is computed\\nusing LogRecord.getMessage(). If the formatting string uses the\\ntime (as determined by a call to usesTime(), formatTime() is\\ncalled to format the event time. If there is exception information,\\nit is formatted using formatException() and appended to the message. previous exa.common.logger.logger.init_loggers next InfoFilter © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.sweep.util.linear_index_sweep","url":"/iqm-exa-common/api/exa.common.sweep.util.linear_index_sweep.html","description":"Produce an NdSweep over a dummy index. Can be used in places where a “hardware sweep” is needed but not really meaningful. parameter ( Parameter ) – Data parameter this index is for. length ( int ) – ...","content":"Produce an NdSweep over a dummy index. Can be used in places where a “hardware sweep” is needed but not really meaningful. parameter ( Parameter ) – Data parameter this index is for. length ( int ) – Number of integers in the dummy sweep. A linear sweep over a parameter whose name is parameter.name + _index and whose data ranges from 0 to length with steps of 1. list [ tuple [ Sweep ]] previous exa.common.sweep.util.convert_sweeps_to_list_of_tuples next Changelog © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"sweep_values","url":"/iqm-exa-common/api/exa.common.control.sweep.sweep_values.html","description":"Pydantic compatible annotated class for sweep values. Full path: exa.common.control.sweep.sweep_values Functions serialize_sweep_values (sweep_values) Serialize sweep values type to JSON serializable ...","content":"Pydantic compatible annotated class for sweep values. Full path: exa.common.control.sweep.sweep_values Functions serialize_sweep_values (sweep_values) Serialize sweep values type to JSON serializable type, to support complex types. validate_sweep_values (sweep_values) Validate (i.e. deserialize) JSON serializable sweep values to Python type, to support complex types. previous Sweep next exa.common.control.sweep.sweep_values.serialize_sweep_values © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.sequence.pack","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.sequence.pack.html","description":"Packs a sequence of native Python types into protobuf format. values ( Sequence ) – Sequence to convert. A protobuf instance that encapsulates values . ValueError in case of unsupported value. – iqm.d...","content":"Packs a sequence of native Python types into protobuf format. values ( Sequence ) – Sequence to convert. A protobuf instance that encapsulates values . ValueError in case of unsupported value. – iqm.data_definitions.common.v1.data_types_pb2.Sequence previous sequence next exa.common.api.proto_serialization.sequence.unpack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.api.proto_serialization.datum.serialize","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.datum.serialize.html","description":"Serialize a piece of data into a bitstring. value ( None | bool | str | int | float | complex | ndarray | Sequence ) – same as in pack() . Bitstring that encodes value . bytes previous exa.common.api....","content":"Serialize a piece of data into a bitstring. value ( None | bool | str | int | float | complex | ndarray | Sequence ) – same as in pack() . Bitstring that encodes value . bytes previous exa.common.api.proto_serialization.datum.pack next exa.common.api.proto_serialization.datum.unpack © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"SettingNode","url":"/iqm-exa-common/api/exa.common.data.setting_node.SettingNode.html","description":"Bases: BaseModel A tree-structured Setting container. Each child of the node is a Setting , or another SettingNode .\\nIterating over the node returns all children, recursively.\\nSettings can be accessed...","content":"Bases: BaseModel A tree-structured Setting container. Each child of the node is a Setting , or another SettingNode .\\nIterating over the node returns all children, recursively.\\nSettings can be accessed by dictionary syntax or attribute syntax: name ( str ) – Name of the node. settings ( dict [ str , Any ] | None ) – Dict of setting path fraqment names (usually the same as the setting name) to the settings. Mostly\\nused when deserialising and otherwise left empty. subtrees ( dict [ str , Any ] | None ) – Dict of child node path fraqment names (usually the same as the child node name) to the settings.\\nMostly used when deserialising and otherwise left empty. path ( str ) – Optionally give a path for the node, by default empty. generate_paths ( bool ) – If set True , all subnodes will get their paths autogenerated correctly. Only set to False if the subnodes already have correct paths set (e.g. when deserialising). kwargs – The children given as keyword arguments. Each argument must be a Setting , Parameter , or a SettingNode . The keywords are used as the names of the nodes.\\nParameters will be cast into Settings with the value None . align_name ( bool ) – Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.setting_node Attributes all_settings Yields all Setting instances inside this node, recursively. child_nodes ItemsView of immediate child nodes of this node. child_settings ItemsView of settings of this node. children Dictionary of immediate child nodes of this node. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  settings  subtrees  path  align_name  Methods add_for_path Add nodes to self while creating the missing nodes in-between. diff Recursive diff between two SettingNodes. find_by_name Find first occurrence of Setting or SettingNode by name, by iterating recursively through all children. get_default_implementation_name Get the default implementation name for a given gate and locus. get_gate_node_for_locus Get the gate calibration sub-node for the locus given as a parameter if it exists in the settings tree. get_gate_properties_for_locus Get the gate characterization sub-node for the locus given as a parameter if it exists in the settings tree. get_locus_node_paths_for Get all the gate locus node paths for a given gate . get_node_for_path Return the node corresponding to the given path. get_parent_of Get the first SettingNode that has a Setting named name . merge Recursively combine the tree structures and values of two SettingNodes. merge_values Recursively combine the values from another SettingNode to this one. nodes_by_type Yields all nodes, filtered by given node_types . print_tree Print a tree representation of the contents of this node. prune Recursively delete all branches from this SettingNode that are not found in other . set_from_dict Recursively set values to Settings, taking values from a dictionary that has similar tree structure. setting_with_path_name Get a copy of a setting with its name replaced with the path name. transform_node_types Reduce any subclass of SettingNode and it's contents into instances of cls . update_setting Update an existing Setting in this tree. This method generates the paths and aligns the names when required. None List items and subtree names, so they occur in IPython autocomplete after node[<TAB> Yields all nodes, filtered by given node_types . Used to find and iterate over nodes of specific types. node_types ( type | tuple [ type , ... ] | None ) – when iterating over the tree, yields only instances that match this type\\nor any of the types in the tuple. By default, yields Settings and SettingNodes. recursive ( bool ) – If True, the search is carried recursively. If False, the search is limited to\\nimmediate child nodes. Iterator that yields the filtered nodes. Iterator Update an existing Setting in this tree. setting ( Setting ) – Setting that will replace an existing Setting with the same name. Or if the setting is an\\nelement-wise setting (i.e. it has a non-empty value of setting.element_indices ), the corresponding\\nelement will be updated in the collection. UnknownSettingError – If no setting is found in the children of this tree. None Yields all Setting instances inside this node, recursively. Dictionary of immediate child nodes of this node. ItemsView of settings of this node. ItemsView of immediate child nodes of this node. Get the first SettingNode that has a Setting named name . name ( str ) – Name of the setting to look for. A SettingNode that has a child name . SettingNode Find first occurrence of Setting or SettingNode by name, by iterating recursively through all children. name ( str ) – Name of the Setting or SettingNode to look for. First found item, or None if nothing is found. SettingNode | Setting | None Recursively combine the tree structures and values of two SettingNodes. In case of conflicting nodes,values in first take priority regardless of the replaced content in second . None values are not prioritized unless merge_nones is set to True . first ( SettingNode ) – SettingNode to merge, whose values and structure take priority second ( SettingNode ) – SettingNode to merge. merge_nones ( bool ) – Whether to merge also None values from first to second . align_name ( bool ) – Whether to align the paths (and also names if second does not use align_name==False )\\nwhen merging the nodes. Should never be set False unless the paths in first already align with\\nwhat they should be in second (setting it False in such cases can improve performance). deep_copy ( bool ) – Whether to deepcopy or just shallow copy all the sub-nodes. Set to False with high caution\\nand understand the consequences. A new SettingNode constructed from arguments. SettingNode Recursively combine the values from another SettingNode to this one. The resulting tree structure the same as that of self. other ( SettingNode ) – SettingNode to merge. prioritize_other ( bool ) – If True, will prioritize values in other. If False (default), only None values in self\\nwill be replaced. Recursively delete all branches from this SettingNode that are not found in other . other ( SettingNode ) – None Print a tree representation of the contents of this node. levels ( int ) – display this many levels, starting from the root. None Reduce any subclass of SettingNode and it’s contents into instances of cls . node ( SettingNode ) – node to transform. A new SettingNode with the same structure as the original, but where node instances are of type cls . SettingNode Recursively set values to Settings, taking values from a dictionary that has similar tree structure.\\nKeys that are not found in self are ignored, unless strict is True. dct ( dict [ str , Any ] ) – Dictionary containing the new values to use. strict ( bool ) – If True, will raise error if dct contains a setting that is not found in self . UnknownSettingError – If the condition of strict happens. None Get a copy of a setting with its name replaced with the path name. setting ( Setting ) – Setting Recursive diff between two SettingNodes. This function is meant to produce human-readable output, e.g. for debugging purposes.\\nIt returns the differences in a list of strings, each string detailing\\none specific difference. The diff is non-symmetric. other ( SettingNode ) – second node to compare self to path ( str ) – node path to the currently compared nodes (used in printing the results) differences from self to other , in depth-first order list [ str ] Turn a numerical value and unit, and return rescaled value and SI prefixed unit. Unit must be a whitelisted SI base unit. Return the node corresponding to the given path. path ( str ) – The path. The node at path in self. ValueError – If the given path cannot be found in self. Setting | SettingNode Add nodes to self while creating the missing nodes in-between. Whether the names and paths are aligned is determined by the attribute align_name of the current node\\n( self ). All the created missing nodes will use this same align_name value,\\nwhich determines whether their names will align with their paths. nodes ( Iterable [ Setting | Parameter | SettingNode ] | dict [ str , Setting | Parameter | SettingNode ] ) – Nodes to add as new leaves/branches of path . If of type dict , maps the keys used in self.settings or self.subtrees to the nodes themselves. If align_name=False , the key and\\nthe node name can differ, but otherwise the names will be replaced by the path anyways). path ( str ) – Path in self to which nodes will be added. If the path or any part (suffix) of it is not\\nfound in self, the associated nodes will be created automatically. override_values ( dict [ str , Any ] | None ) – Optionally override the values for the Settings corresponding to nodes . This dict\\nshould have the same structure as nodes , including matching names. None Get the default implementation name for a given gate and locus. Takes into account the global default implementation and a possible locus specific implementation and also\\nthe symmetry properties of the gate. NOTE: using this method requires the standard EXA settings tree structure. gate ( str ) – The name of the gate. locus ( str | Iterable [ str ] ) – Individual qubits, couplers, or combinations. The default implementation name. str Get the gate calibration sub-node for the locus given as a parameter if it exists in the settings tree. NOTE: using this method requires the standard EXA settings tree structure. gate ( str ) – The gate to retrieve the settings for. locus ( str | Iterable [ str ] ) – Individual qubits, couplers, or combinations. implementation ( str | None ) – Using a custom rather than the default gate implementation. The settings of the specified locus and gate. SettingNode Get all the gate locus node paths for a given gate . NOTE: using this method requires the standard EXA settings tree structure. gate ( str ) – Gate name. implementations ( list [ str ] | None ) – optionally limit the paths by these gate implementations. The locus node (string) paths corresponding to this gate. list [ str ] Get the gate characterization sub-node for the locus given as a parameter if it exists in the settings tree. NOTE: using this method requires the standard EXA settings tree structure. gate ( str ) – The gate to retrieve the settings for. locus ( str | Iterable [ str ] ) – Individual qubits, couplers, or combinations. implementation ( str | None ) – Using a custom rather than the default gate implementation. The settings of the specified locus and gate. SettingNode Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous setting_node next value © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.qcm_data.chip_topology.sort_couplers","url":"/iqm-exa-common/api/exa.common.qcm_data.chip_topology.sort_couplers.html","description":"Sort the given couplers in a human-readable way. couplers ( Iterable [ str ] ) – list [ str ] previous exa.common.qcm_data.chip_topology.sort_components next ChipTopology © Copyright 2019-2022, IQM Fi...","content":"Sort the given couplers in a human-readable way. couplers ( Iterable [ str ] ) – list [ str ] previous exa.common.qcm_data.chip_topology.sort_components next ChipTopology © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.sweep.database_serialization.encode_return_parameters","url":"/iqm-exa-common/api/exa.common.sweep.database_serialization.encode_return_parameters.html","description":"Encode sweeps to a JSON string. return_parameters ( dict [ Parameter , list [ tuple [ Sweep , ... ] ] | None ] ) – Return parameters as specified by sweep() . kwargs – keyword arguments passed to json...","content":"Encode sweeps to a JSON string. return_parameters ( dict [ Parameter , list [ tuple [ Sweep , ... ] ] | None ] ) – Return parameters as specified by sweep() . kwargs – keyword arguments passed to json.dumps json as a string str previous exa.common.sweep.database_serialization.encode_nd_sweeps next util © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"ComputationalResonator","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.ComputationalResonator.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Components next Coupler © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"Sweep","url":"/iqm-exa-common/api/exa.common.control.sweep.sweep.Sweep.html","description":"Bases: BaseModel Base immutable class for sweeps. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input...","content":"Bases: BaseModel Base immutable class for sweeps. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.control.sweep.sweep Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parameter The Sweep represents changing the values of this Parameter. data List of values for parameter Methods model_post_init Override this method to perform additional initialization after __init__ and model_construct . parameter ( Parameter ) – options ( SweepOptions | None ) – data ( list [ Any ] | ndarray [ Any ] ) – The Sweep represents changing the values of this Parameter. List of values for parameter Override this method to perform additional initialization after __init__ and model_construct .\\nThis is useful if you want to do some validation that requires the entire model to be initialized. _Sweep__context ( Any ) – None Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous sweep next sweep_values © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.ServiceUnavailableError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.ServiceUnavailableError.html","description":"Error raised when the service is unavailable. message ( str ) – previous exa.common.errors.server_errors.NotFoundError next exa.common.errors.server_errors.StationControlError © Copyright 2019-2022, I...","content":"Error raised when the service is unavailable. message ( str ) – previous exa.common.errors.server_errors.NotFoundError next exa.common.errors.server_errors.StationControlError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.errors.exa_error.ExaError","url":"/iqm-exa-common/api/exa.common.errors.exa_error.ExaError.html","description":"Base class for exa errors. message ( str ) – Error message. previous exa.common.errors.exa_error.EmptyComponentListError next exa.common.errors.exa_error.InvalidSweepOptionsTypeError © Copyright 2019-...","content":"Base class for exa errors. message ( str ) – Error message. previous exa.common.errors.exa_error.EmptyComponentListError next exa.common.errors.exa_error.InvalidSweepOptionsTypeError © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"exa.common.control.sweep.option.constants.DEFAULT_COUNT","url":"/iqm-exa-common/api/exa.common.control.sweep.option.constants.DEFAULT_COUNT.html","description":"Default value for count value in options. previous constants next exa.common.control.sweep.option.constants.DEFAULT_BASE © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30....","content":"Default value for count value in options. previous constants next exa.common.control.sweep.option.constants.DEFAULT_BASE © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"datum","url":"/iqm-exa-common/api/exa.common.api.proto_serialization.datum.html","description":"Convert native Python types and numpy arrays to protos and back. Full path: exa.common.api.proto_serialization.datum Functions deserialize (source) Deserialize a bitstring into a native Python type or...","content":"Convert native Python types and numpy arrays to protos and back. Full path: exa.common.api.proto_serialization.datum Functions deserialize (source) Deserialize a bitstring into a native Python type or a numpy array. pack (value) Packs a string, numerical value, or an array thereof into protobuf format. serialize (value) Serialize a piece of data into a bitstring. unpack (source) Unpacks a protobuf into a native Python type or a numpy array. previous exa.common.api.proto_serialization.array.unpack next exa.common.api.proto_serialization.datum.deserialize © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-exa-common","title":"logger","url":"/iqm-exa-common/api/exa.common.logger.logger.html","description":"Full path: exa.common.logger.logger Functions init_loggers ([loggers, default_level, ...]) Set the log level of given logger names. Classes ExtraFormatter Helper formatter class to pass in arbitrary e...","content":"Full path: exa.common.logger.logger Functions init_loggers ([loggers, default_level, ...]) Set the log level of given logger names. Classes ExtraFormatter Helper formatter class to pass in arbitrary extra information to log messages. InfoFilter Helper class to filter log messages above INFO level. Inheritance previous logger next exa.common.logger.logger.init_loggers © Copyright 2019-2022, IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"API documentation: station-control-client","url":"/iqm-station-control-client/index.html","description":"3.8 2025-03-30 This is the documentation of the IQM station-control client library. Index Module Index Search Page next API Reference © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated o...","content":"3.8 2025-03-30 This is the documentation of the IQM station-control client library. Index Module Index Search Page next API Reference © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"API Reference","url":"/iqm-station-control-client/API.html","description":"iqm.station_control.client Station control client implementation. iqm.station_control.interface Station control interface. previous API documentation: station-control-client next client © Copyright Co...","content":"iqm.station_control.client Station control client implementation. iqm.station_control.interface Station control interface. previous API documentation: station-control-client next client © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"serializers","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.html","description":"Module for station control client serialization and deserialization. Full path: iqm.station_control.client.serializers Subpackages and modules channel_property_serializer Serializers and deserializers...","content":"Module for station control client serialization and deserialization. Full path: iqm.station_control.client.serializers Subpackages and modules channel_property_serializer Serializers and deserializers for ChannelProperties datetime_serializers Serializers and deserializers for datetime related models. playlist_serializers Serializers and deserializers for Playlist run_serializers Serializers and deserializers for run related models. setting_node_serializer Serializers and deserializers for setting node related models. struct_serializer Serializers and deserializers for struct related models. sweep_serializers Serializers and deserializers for sweep related models. task_serializers Serializers and deserializers for task related models. previous SequenceMetadataDataList next channel_property_serializer © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"datetime_serializers","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.datetime_serializers.html","description":"Serializers and deserializers for datetime related models. Full path: iqm.station_control.client.serializers.datetime_serializers Functions deserialize_datetime (timestamp) Convert a string formatted ...","content":"Serializers and deserializers for datetime related models. Full path: iqm.station_control.client.serializers.datetime_serializers Functions deserialize_datetime (timestamp) Convert a string formatted according to ISO to a datetime object. serialize_datetime (timestamp) Convert a datetime object to a string formatted according to ISO. previous iqm.station_control.client.serializers.channel_property_serializer.unpack_channel_properties next iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime.html","description":"Convert a string formatted according to ISO to a datetime object. timestamp ( str | None ) – datetime | None previous datetime_serializers next iqm.station_control.client.serializers.datetime_serializ...","content":"Convert a string formatted according to ISO to a datetime object. timestamp ( str | None ) – datetime | None previous datetime_serializers next iqm.station_control.client.serializers.datetime_serializers.serialize_datetime © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationData","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationData.html","description":"Bases: ObservationLite , ObservationDefinition The content of the observation stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ Validatio...","content":"Bases: ObservationLite , ObservationDefinition The content of the observation stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_set_ids List of observation set UUIDs this observation belongs to. observation_id Unique identifier of the observation. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. dut_label DUT label of the device the observation is about. source How the observation was made, e.g. experiment analysis or manual specification. tags Human-readable tags of the observation. dut_field Name of the property the observation is about. value Value of the observation. unit SI unit of the value. uncertainty Uncertainty of the observation value. invalid Flag indicating if the object is invalid. Methods dut_field ( str ) – value ( bool | str | int | float | complex | ndarray ) – unit ( str ) – uncertainty ( int | float | complex | ndarray | None ) – invalid ( bool ) – dut_label ( str ) – source ( dict [ str , Any ] ) – tags ( list [ str ] ) – observation_id ( int ) – created_timestamp ( datetime ) – modified_timestamp ( datetime ) – observation_set_ids ( list [ UUID ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. List of observation set UUIDs this observation belongs to. previous ObservationBase next ObservationDefinition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.playlist_serializers.unpack_playlist","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.playlist_serializers.unpack_playlist.html","description":"Unpack a protobuf representation of a playlist into its runtime representation. proto_playlist ( Playlist ) – serialized playlist proto_playlist in runtime representation Playlist previous iqm.station...","content":"Unpack a protobuf representation of a playlist into its runtime representation. proto_playlist ( Playlist ) – serialized playlist proto_playlist in runtime representation Playlist previous iqm.station_control.client.serializers.playlist_serializers.pack_playlist next run_serializers © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationDefinition","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationDefinition.html","description":"Bases: ObservationBase The content of the observation definition. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationErr...","content":"Bases: ObservationBase The content of the observation definition. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. dut_label DUT label of the device the observation is about. source How the observation was made, e.g. experiment analysis or manual specification. tags Human-readable tags of the observation. dut_field Name of the property the observation is about. value Value of the observation. unit SI unit of the value. uncertainty Uncertainty of the observation value. invalid Flag indicating if the object is invalid. Methods dut_field ( str ) – value ( bool | str | int | float | complex | ndarray ) – unit ( str ) – uncertainty ( int | float | complex | ndarray | None ) – invalid ( bool ) – dut_label ( str ) – source ( dict [ str , Any ] ) – tags ( list [ str ] ) – DUT label of the device the observation is about. How the observation was made, e.g. experiment analysis or manual specification. source always has the key \\"type\\" whose str value determines the other contents of the dict.\\nThe currently supported source types are:\\n- analysis_source\\n- configuration_source\\n- measurement_source\\n- sequence_analysis_source\\n- specification_source Human-readable tags of the observation. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ObservationData next ObservationLite © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationUpdateList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationUpdateList.html","description":"alias of ListModel[list[ObservationUpdate]] previous ObservationSetDataList next ResponseWithMeta © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[ObservationUpdate]] previous ObservationSetDataList next ResponseWithMeta © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"observation_set","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.html","description":"Observation set related station control interface models. Full path: iqm.station_control.interface.models.observation_set Classes ObservationSetBase Abstract base class of the observation set definiti...","content":"Observation set related station control interface models. Full path: iqm.station_control.interface.models.observation_set Classes ObservationSetBase Abstract base class of the observation set definition and data. ObservationSetData The content of the observation set stored in the database. ObservationSetDefinition The content of the observation set object when creating it. ObservationSetUpdate The observation set data to be updated in the database. Inheritance previous ObservationUpdate next ObservationSetBase © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.datetime_serializers.serialize_datetime","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.datetime_serializers.serialize_datetime.html","description":"Convert a datetime object to a string formatted according to ISO. timestamp ( datetime | None ) – str | None previous iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime n...","content":"Convert a datetime object to a string formatted according to ISO. timestamp ( datetime | None ) – str | None previous iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime next playlist_serializers © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SweepBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.SweepBase.html","description":"Bases: object Abstract base class of the sweep definition and data. Module: iqm.station_control.interface.models.sweep Attributes sweep_id Unique identifier of the sweep. dut_label DUT label of the de...","content":"Bases: object Abstract base class of the sweep definition and data. Module: iqm.station_control.interface.models.sweep Attributes sweep_id Unique identifier of the sweep. dut_label DUT label of the device being used. settings A tree representation of the initial settings to set before the sweep. sweeps Sweeps that define the swept parameters, i.e. a list of parallel sweeps, where the data values of all sweeps in the tuple are interleaved, and updated simultaneously during the sweep. return_parameters Parameters that will be queried from devices and saved for each spot (variable-tuple) of the N-dimensional sweep. Methods sweep_id ( UUID ) – dut_label ( str ) – settings ( SettingNode ) – sweeps ( list [ tuple [ Sweep , ... ] ] ) – return_parameters ( list [ str ] ) – Unique identifier of the sweep. DUT label of the device being used. A tree representation of the initial settings to set before the sweep. Sweeps that define the swept parameters, i.e. a list of parallel sweeps,\\nwhere the data values of all sweeps in the tuple are interleaved, and updated simultaneously during the sweep. Parameters that will be queried from devices and saved for each spot (variable-tuple)\\nof the N-dimensional sweep. Each item must correspond to a setting name in settings . previous sweep next SweepData © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.run_serializers.serialize_run_definition","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.serialize_run_definition.html","description":"Convert RunDefinition into run proto. run_definition ( RunDefinition ) – RunDefinition previous iqm.station_control.client.serializers.run_serializers.serialize_run_data next setting_node_serializer ©...","content":"Convert RunDefinition into run proto. run_definition ( RunDefinition ) – RunDefinition previous iqm.station_control.client.serializers.run_serializers.serialize_run_data next setting_node_serializer © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data.html","description":"Convert JSON serializable dictionary into SweepData. data ( dict ) – SweepData previous sweep_serializers next iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition © C...","content":"Convert JSON serializable dictionary into SweepData. data ( dict ) – SweepData previous sweep_serializers next iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"task_serializers","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.task_serializers.html","description":"Serializers and deserializers for task related models. Full path: iqm.station_control.client.serializers.task_serializers Functions serialize_run_task_request (run_definition, ...) Wrap run_definition...","content":"Serializers and deserializers for task related models. Full path: iqm.station_control.client.serializers.task_serializers Functions serialize_run_task_request (run_definition, ...) Wrap run_definition and queue_name into a protobuf message and serialize into a bitstring. serialize_sweep_task_request (...) Wrap sweep_definition and queue_name into a protobuf message and serialize into a bitstring. previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_results next iqm.station_control.client.serializers.task_serializers.serialize_run_task_request © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.channel_property_serializer.deserialize_channel_properties","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.deserialize_channel_properties.html","description":"Convert the given protobuf dictionary of channel properties into a dictionary of ChannelProperties . channel_properties_dictionary – channel property dictionary in protobuf format convert_instructions...","content":"Convert the given protobuf dictionary of channel properties into a dictionary of ChannelProperties . channel_properties_dictionary – channel property dictionary in protobuf format convert_instructions ( bool ) – whether to convert string representation of instruction types to actual\\npython types. channel_property_dictionary ( ChannelPropertyDictionary ) – dictionary of channel properties dict [ str , ChannelProperties ] previous channel_property_serializer next iqm.station_control.client.serializers.channel_property_serializer.deserialize_instructions © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_definition","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_definition.html","description":"Convert SweepDefinition into sweep proto. sweep_definition ( SweepDefinition ) – SweepRequest previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data next iqm.station_co...","content":"Convert SweepDefinition into sweep proto. sweep_definition ( SweepDefinition ) – SweepRequest previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data next iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_results © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"sweep_serializers","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.html","description":"Serializers and deserializers for sweep related models. Full path: iqm.station_control.client.serializers.sweep_serializers Functions deserialize_sweep_data (data) Convert JSON serializable dictionary...","content":"Serializers and deserializers for sweep related models. Full path: iqm.station_control.client.serializers.sweep_serializers Functions deserialize_sweep_data (data) Convert JSON serializable dictionary into SweepData. deserialize_sweep_definition (...) Convert sweep proto into SweepDefinition. deserialize_sweep_results (sweep_results_str) Convert binary string into SweepResults. serialize_sweep_data (sweep_data) Convert SweepData into JSON serializable dictionary. serialize_sweep_definition (sweep_definition) Convert SweepDefinition into sweep proto. serialize_sweep_results (sweep_id, sweep_results) Convert SweepResults into binary string. previous iqm.station_control.client.serializers.struct_serializer.serialize_struct next iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.channel_property_serializer.unpack_channel_properties","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.unpack_channel_properties.html","description":"Parse the Channel Property Dictionary from a string serialised protobuf payload. payload ( bytes ) – protobuf serialised payload of channel property dictionary. convert_instructions ( bool ) – whether...","content":"Parse the Channel Property Dictionary from a string serialised protobuf payload. payload ( bytes ) – protobuf serialised payload of channel property dictionary. convert_instructions ( bool ) – whether to convert string representation of instruction types to actual\\npython types. dict [ str , ChannelProperties ] previous iqm.station_control.client.serializers.channel_property_serializer.serialize_channel_properties next datetime_serializers © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationSetDefinition","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.ObservationSetDefinition.html","description":"Bases: ObservationSetBase The content of the observation set object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydanti...","content":"Bases: ObservationSetBase The content of the observation set object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation_set Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_set_type Indicates the type (i.e. purpose) of the observation set. observation_ids Database IDs of the observations belonging to the observation set. describes_id Unique identifier of the observation set this observation set describes. invalid Flag indicating if the object is invalid. Methods observation_set_type ( Literal [ 'calibration-set' , 'characterization-set' , 'generic-set' , 'quality-metric-set' ] ) – observation_ids ( list [ int ] ) – describes_id ( UUID | None ) – invalid ( bool ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ObservationSetData next ObservationSetUpdate © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SequenceResultData","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceResultData.html","description":"Bases: SequenceResultBase The content of the sequence result stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic...","content":"Bases: SequenceResultBase The content of the sequence result stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. sequence_id Unique identifier of the sequence result. data JSON serializable dict. final Indicates whether this result was marked as final. Methods sequence_id ( UUID ) – data ( dict [ str , Any ] ) – final ( bool ) – created_timestamp ( datetime ) – modified_timestamp ( datetime | None ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Time when the object was created in the database. Time when the object was last modified in the database. previous SequenceResultBase next SequenceResultDefinition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SweepDefinition","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.SweepDefinition.html","description":"Bases: SweepBase The content of the sweep object when creating it. Module: iqm.station_control.interface.models.sweep Attributes playlist A Playlist that should be uploaded to the controllers. sweep_i...","content":"Bases: SweepBase The content of the sweep object when creating it. Module: iqm.station_control.interface.models.sweep Attributes playlist A Playlist that should be uploaded to the controllers. sweep_id Unique identifier of the sweep. dut_label DUT label of the device being used. settings A tree representation of the initial settings to set before the sweep. sweeps Sweeps that define the swept parameters, i.e. a list of parallel sweeps, where the data values of all sweeps in the tuple are interleaved, and updated simultaneously during the sweep. return_parameters Parameters that will be queried from devices and saved for each spot (variable-tuple) of the N-dimensional sweep. Methods sweep_id ( UUID ) – dut_label ( str ) – settings ( SettingNode ) – sweeps ( list [ tuple [ Sweep , ... ] ] ) – return_parameters ( list [ str ] ) – playlist ( Playlist | None ) – A Playlist that should be uploaded to the controllers. previous SweepData next SweepStatus © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationBase.html","description":"Bases: PydanticBase Abstract base class of the observation models. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationEr...","content":"Bases: PydanticBase Abstract base class of the observation models. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. dut_field Name of the property the observation is about. value Value of the observation. unit SI unit of the value. uncertainty Uncertainty of the observation value. invalid Flag indicating if the object is invalid. Methods dut_field ( str ) – value ( bool | str | int | float | complex | ndarray ) – unit ( str ) – uncertainty ( int | float | complex | ndarray | None ) – invalid ( bool ) – Name of the property the observation is about. Value of the observation. SI unit of the value. Empty string means the value is dimensionless. Uncertainty of the observation value. None means unknown. Flag indicating if the object is invalid. Automated systems must not use invalid objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous observation next ObservationData © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"RunBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunBase.html","description":"Bases: object Abstract base class of run data. Module: iqm.station_control.interface.models.run Attributes run_id Unique identifier of the run. username User who defined the run. experiment_name Ident...","content":"Bases: object Abstract base class of run data. Module: iqm.station_control.interface.models.run Attributes run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. Methods run_id ( UUID ) – username ( str ) – experiment_name ( str ) – experiment_label ( str ) – options ( dict [ str , Any ] | None ) – software_version_set_id ( int | None ) – Unique identifier of the run. User who defined the run. Identifier of the Experiment ( Experiment.name ). Freeform label of the Experiment. As opposed to experiment_name , no core logic relies on this value. Experiment-specific options or toggles that generated the run. Unique identifier of the software version set of the current Python runtime. previous run next RunConfigurationBase © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationSetUpdate","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.ObservationSetUpdate.html","description":"Bases: PydanticBase The observation set data to be updated in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.Val...","content":"Bases: PydanticBase The observation set data to be updated in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation_set Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_set_id Unique identifier of the observation set. observation_ids Database IDs of the observations belonging to the observation set. invalid Flag indicating if the object is invalid. Methods observation_set_id ( UUID ) – observation_ids ( list [ int ] | None ) – invalid ( bool ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Unique identifier of the observation set. Database IDs of the observations belonging to the observation set. This will only add new observations to the observation set, deleting existing ones is not possible.\\nSetting this to None or omitting it will leave existing observation_ids as is with no changes. Flag indicating if the object is invalid. Automated systems must not use invalid objects. previous ObservationSetDefinition next run © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"StationControlClient","url":"/iqm-station-control-client/api/iqm.station_control.client.station_control.StationControlClient.html","description":"Bases: object Station control client implementation. Current implementation uses HTTP calls to the remote station control service,\\nthat is controlling the station control instance. root_url ( str ) – ...","content":"Bases: object Station control client implementation. Current implementation uses HTTP calls to the remote station control service,\\nthat is controlling the station control instance. root_url ( str ) – Remote station control service URL. get_token_callback ( Callable [ [ ] , str ] | None ) – A callback function that returns a token (str) which will be passed in Authorization header\\nin all requests. Station control client implements generic query methods for certain objects,\\nlike query_observations() , query_observation_sets() , and query_sequence_metadatas() .\\nThese methods accept only keyword arguments as parameters, which are based on the syntax field__lookup=value .\\nNote double-underscore in the name, to separate field names like dut_field from lookup types like in .\\nThe syntax is based on Django implementation, documented here and here . As a convenience, when no lookup type is provided (like in dut_label=\\"foo\\" ),\\nthe lookup type is assumed to be exact ( dut_label__exact=\\"foo\\" ). Other supported lookup types are: For example, created_timestamp__range=(datetime(2023, 10, 12), datetime(2024, 10, 14)) For example, dut_field__in=[\\"QB1.frequency\\", \\"gates.measure.constant.QB2.frequency\\"] For example, origin_uri__icontains=\\"local\\" For example, tags__overlap=[\\"calibration=good\\", \\"2023-12-04\\"] For example, tags__contains=[\\"calibration=good\\", \\"2023-12-04\\"] For example, end_timestamp__isnull=False In addition to model fields (like “dut_label”, “dut_field”, “created_timestamp”, “invalid”, etc.),\\nall of our generic query methods accept also following shared query parameters: For example, latest=\\"invalid\\" would return only one result (latest “created_timestamp”)\\nfor each different “invalid” value in the database. Thus, maximum three results would be returned,\\none for each invalid value of True , False , and None . order_by: str. Prefix with “-” for descending order, for example “-created_timestamp”. limit: int: Default 20. If 0 (or negative number) is given, then pagination is not used, i.e. limit=infinity. offset: int. Default 0. Our generic query methods are not fully generalized yet, thus not all fields and lookup types are supported.\\nCheck query methods own documentation for details about currently supported query parameters. Generic query methods will return a list of objects, but with additional (optional) “meta” attribute,\\nwhich contains metadata, like pagination details. The client can ignore this data,\\nor use it to implement pagination logic for example to fetch all results available. Module: iqm.station_control.client.station_control Methods create_observation_set Create an observation set in the database. create_observations Create observations in the database. create_sequence_metadata Create sequence metadata in the database. delete_sweep Delete sweep in the database. finalize_observation_set Finalize an observation set in the database. get_about Return information about the station control. get_channel_properties Get channel properties from the station. get_chip_design_record Get a raw chip design record matching the given chip label. get_configuration Return the configuration of the station control. get_dut_fields Get DUT fields for the specified DUT label from the database. get_duts Get DUTs of the station control. get_exa_configuration Return the recommended EXA configuration from the server. get_observation_set Get an observation set from the database. get_observation_set_observations Get the constituent observations of an observation set from the database. get_observations Get observations from the database. get_or_create_software_version_set Get software version set ID from the database, or create if it doesn't exist. get_run Get run data from the database. get_sequence_result Get sequence result from the database. get_settings Return a tree representation of the default settings as defined in the configuration file. get_sweep Get N-dimensional sweep data from the database. get_sweep_results Get N-dimensional sweep results from the database. get_task Get task data. query_observation_sets Query observation sets from the database. query_observations Query observations from the database. query_runs Query runs from the database. query_sequence_metadatas Query sequence metadatas from the database. revoke_sweep Either remove a sweep task from the queue, or abort it gracefully if it's already executing. run Execute an N-dimensional sweep of selected variables and save run, sweep and results. save_sequence_result Save sequence result in the database. sweep Execute an N-dimensional sweep of selected variables and save sweep and results. update_observation_set Update an observation set in the database. update_observations Update observations in the database. Return information about the station control. dict Return the configuration of the station control. dict Return the recommended EXA configuration from the server. str Get software version set ID from the database, or create if it doesn’t exist. software_version_set ( dict [ str , str ] ) – int Return a tree representation of the default settings as defined in the configuration file. SettingNode Get a raw chip design record matching the given chip label. dut_label ( str ) – dict Get channel properties from the station. Channel properties contain information regarding hardware limitations e.g. sampling rate, granularity\\nand supported instructions. Mapping from channel name to AWGProperties or ReadoutProperties dict [ str , ChannelProperties ] Execute an N-dimensional sweep of selected variables and save sweep and results. The raw data for each spot in the sweep is saved as numpy arrays,\\nand the complete data for the whole sweep is saved as an x-array dataset\\nwhich has the sweep_definition.sweeps as coordinates and\\ndata of sweep_definition.return_parameters data as DataArrays. The values of sweep_definition.playlist will be uploaded to the controllers given by the keys of sweep_definition.playlist . sweep_definition ( SweepDefinition ) – The content of the sweep to be created. Dict containing the task ID  and sweep ID, and corresponding hrefs, of a successful sweep execution\\nin monolithic mode or successful submission to the task queue in remote mode. ExaError if submitting a sweep failed. – dict Get N-dimensional sweep data from the database. sweep_id ( UUID ) – SweepData Either remove a sweep task from the queue, or abort it gracefully if it’s already executing. If the task was already executing when revoked, the status of the task will be set to \\"INTERRUPTED\\" .\\nIf the task had not started yet, the status will be set to \\"REVOKED\\" .\\nIf the task is not found or is already finished nothing happens. sweep_id ( UUID ) – None Delete sweep in the database. sweep_id ( UUID ) – None Get N-dimensional sweep results from the database. sweep_id ( UUID ) – dict [ str , list [ ndarray ]] Execute an N-dimensional sweep of selected variables and save run, sweep and results. run_definition ( RunDefinition ) – update_progress_callback ( Callable [ [ list [ tuple [ str , int , int ] ] ] , None ] | None ) – wait_task_completion ( bool ) – bool Get run data from the database. run_id ( UUID ) – RunData Query runs from the database. run_id: uuid.UUID run_id__in: list[uuid.UUID] sweep_id: uuid.UUID sweep_id__in: list[uuid.UUID] username: str username__in: list[str] username__contains: str username__icontains: str experiment_label: str experiment_label__in: list[str] experiment_label__contains: str experiment_label__icontains: str experiment_name: str experiment_name__in: list[str] experiment_name__contains: str experiment_name__icontains: str software_version_set_id: int software_version_set_id__in: list[int] begin_timestamp__range: tuple[datetime, datetime] end_timestamp__range: tuple[datetime, datetime] end_timestamp__isnull: bool Queried runs with some query related metadata. ListWithMeta [ RunLite ] Create observations in the database. observation_definitions ( Sequence [ ObservationDefinition ] ) – A sequence of observation definitions,\\neach containing the content of the observation which will be created. Created observations, each including also the database created fields like ID and timestamps. ListWithMeta [ ObservationData ] Get observations from the database. Observations are queried by the given query parameters. mode ( Literal [ 'all_latest' , 'tags_and' , 'tags_or' , 'sequence' ] ) – The “mode” used to query the observations. Possible values “all_latest”, “tags_and”, or “tags_or”. ”all_latest”:Query all the latest observations for the given dut_label .\\nNo other query parameters are accepted. ”tags_and”: Query observations. Query all the observations that have all the given tags .\\nBy default, only valid observations are included.\\nAll other query parameters can be used to narrow down the query,\\nexpect “run_ids” and “sequence_ids”. ”tags_or”: Query all the latest observations that have at least one of the given tags .\\nAdditionally, dut_label must be given. No other query parameters are used. ”sequence”: Query observations originating from a list of run and/or sequence IDs.\\nNo other query parameters are accepted. The “mode” used to query the observations. Possible values “all_latest”, “tags_and”, or “tags_or”. ”all_latest”:Query all the latest observations for the given dut_label .\\nNo other query parameters are accepted. ”tags_and”: Query observations. Query all the observations that have all the given tags .\\nBy default, only valid observations are included.\\nAll other query parameters can be used to narrow down the query,\\nexpect “run_ids” and “sequence_ids”. ”tags_or”: Query all the latest observations that have at least one of the given tags .\\nAdditionally, dut_label must be given. No other query parameters are used. ”sequence”: Query observations originating from a list of run and/or sequence IDs.\\nNo other query parameters are accepted. dut_label ( str | None ) – DUT label of the device the observations pertain to. dut_field ( str | None ) – Name of the property the observation is about. tags ( list [ str ] | None ) – Human-readable tags of the observation. invalid ( bool | None ) – Flag indicating if the object is invalid. Automated systems must not use invalid objects.\\nIf None , both valid and invalid objects are included. run_ids ( list [ UUID ] | None ) – The run IDs for which to query the observations. sequence_ids ( list [ UUID ] | None ) – The sequence IDs for which to query the observations. limit ( int | None ) – Indicates the maximum number of items to return. Observations, each including also the database created fields like ID and timestamps. list [ ObservationData ] Query observations from the database. observation_id: int observation_id__in: list[int] dut_label: str dut_field: str dut_field__in: list[str] tags__overlap: list[str] tags__contains: list[str] invalid: bool source__run_id__in: list[uuid.UUID] source__sequence_id__in: list[uuid.UUID] source__type: str uncertainty__isnull: bool created_timestamp__range: tuple[datetime, datetime] observation_set_ids__overlap: list[uuid.UUID] observation_set_ids__contains: list[uuid.UUID] Queried observations with some query related metadata. ListWithMeta [ ObservationData ] Update observations in the database. observation_updates ( Sequence [ ObservationUpdate ] ) – A sequence of observation updates,\\neach containing the content of the observation which will be updated. Updated observations, each including also the database created fields like ID and timestamps. list [ ObservationData ] Query observation sets from the database. observation_set_id: UUID observation_set_id__in: list[UUID] observation_set_type: Literal[“calibration-set”, “generic-set”, “quality-metric-set”] observation_ids__overlap: list[int] observation_ids__contains: list[int] describes_id: UUID describes_id__in: list[UUID] invalid: bool created_timestamp__range: tuple[datetime, datetime] end_timestamp__isnull: bool dut_label: str dut_label__in: list[str] Queried observation sets with some query related metadata ListWithMeta [ ObservationSetData ] Create an observation set in the database. observation_set_definition ( ObservationSetDefinition ) – The content of the observation set to be created. The content of the observation set. ExaError – If creation failed. ObservationSetData Get an observation set from the database. observation_set_id ( UUID ) – Observation set to retrieve. The content of the observation set. ExaError – If retrieval failed. ObservationSetData Update an observation set in the database. observation_set_update ( ObservationSetUpdate ) – The content of the observation set to be updated. The content of the observation set. ExaError – If updating failed. ObservationSetData Finalize an observation set in the database. A finalized set is nearly immutable, allowing to change only invalid flag after finalization. observation_set_id ( UUID ) – Observation set to finalize. ExaError – If finalization failed. None Get the constituent observations of an observation set from the database. observation_set_id ( UUID ) – UUID of the observation set to retrieve. Observations belonging to the given observation set. list [ ObservationLite ] Get DUTs of the station control. list [ DutData ] Get DUT fields for the specified DUT label from the database. dut_label ( str ) – list [ DutFieldData ] Query sequence metadatas from the database. origin_id: str origin_id__in: list[str] origin_uri: str origin_uri__icontains: str created_timestamp__range: tuple[datetime, datetime] Sequence metadatas with some query related metadata. ListWithMeta [ SequenceMetadataData ] Create sequence metadata in the database. sequence_metadata_definition ( SequenceMetadataDefinition ) – SequenceMetadataData Save sequence result in the database. This method creates the object if it doesn’t exist and completely replaces the “data” and “final” if it does.\\nTimestamps are assigned by the database. “modified_timestamp” is not set on initial creation,\\nbut it’s updated on each subsequent call. sequence_result_definition ( SequenceResultDefinition ) – SequenceResultData Get sequence result from the database. sequence_id ( UUID ) – SequenceResultData Get task data. task_id ( UUID ) – dict previous station_control next utils © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.setting_node_serializer.deserialize_setting_node","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.setting_node_serializer.deserialize_setting_node.html","description":"Convert binary string into SettingNode. setting_node_str ( bytes ) – SettingNode previous setting_node_serializer next struct_serializer © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last update...","content":"Convert binary string into SettingNode. setting_node_str ( bytes ) – SettingNode previous setting_node_serializer next struct_serializer © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ListWithMeta","url":"/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.ListWithMeta.html","description":"Bases: list Standard list extension holding optional metadata as well. Module: iqm.station_control.interface.list_with_meta Methods items ( Iterable ) – meta ( Meta ) – previous list_with_meta next Me...","content":"Bases: list Standard list extension holding optional metadata as well. Module: iqm.station_control.interface.list_with_meta Methods items ( Iterable ) – meta ( Meta ) – previous list_with_meta next Meta © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ListModel","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.ListModel.html","description":"Bases: RootModel A Pydantic BaseModel for a container model of a list of objects. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_co...","content":"Bases: RootModel A Pydantic BaseModel for a container model of a list of objects. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.client.list_models Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. root  Methods root ( RootModelRootType ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous DutList next ObservationDataList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationDefinitionList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationDefinitionList.html","description":"alias of ListModel[list[ObservationDefinition]] previous ObservationDataList next ObservationLiteList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[ObservationDefinition]] previous ObservationDataList next ObservationLiteList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.channel_property_serializer.deserialize_instructions","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.deserialize_instructions.html","description":"Convert a repeated scalar container of instruction type strings into a tuple of python types. instructions ( Iterable [ str ] ) – tuple [ Operation , …] previous iqm.station_control.client.serializers...","content":"Convert a repeated scalar container of instruction type strings into a tuple of python types. instructions ( Iterable [ str ] ) – tuple [ Operation , …] previous iqm.station_control.client.serializers.channel_property_serializer.deserialize_channel_properties next iqm.station_control.client.serializers.channel_property_serializer.serialize_channel_properties © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationLite","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationLite.html","description":"Bases: ObservationBase The lightweight version of the observation data. This model can be used when not all observation data is needed, to speed up retrieval. Create a new model by parsing and validat...","content":"Bases: ObservationBase The lightweight version of the observation data. This model can be used when not all observation data is needed, to speed up retrieval. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_id Unique identifier of the observation. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. dut_field Name of the property the observation is about. value Value of the observation. unit SI unit of the value. uncertainty Uncertainty of the observation value. invalid Flag indicating if the object is invalid. Methods dut_field ( str ) – value ( bool | str | int | float | complex | ndarray ) – unit ( str ) – uncertainty ( int | float | complex | ndarray | None ) – invalid ( bool ) – observation_id ( int ) – created_timestamp ( datetime ) – modified_timestamp ( datetime ) – Unique identifier of the observation. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Time when the object was created in the database. Time when the object was last modified in the database. previous ObservationDefinition next ObservationUpdate © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"PydanticBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.pydantic_base.PydanticBase.html","description":"Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.py...","content":"Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.pydantic.dev/latest/concepts/config/#change-behaviour-globally Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.pydantic_base Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous pydantic_base next Changelog © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data.html","description":"Convert SweepData into JSON serializable dictionary. sweep_data ( SweepData ) – dict previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results next iqm.station_contro...","content":"Convert SweepData into JSON serializable dictionary. sweep_data ( SweepData ) – dict previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results next iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_definition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.task_serializers.serialize_sweep_task_request","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.task_serializers.serialize_sweep_task_request.html","description":"Wrap sweep_definition and queue_name into a protobuf message and serialize into a bitstring. sweep_definition ( SweepDefinition ) – The content of the sweep. queue_name ( str ) – Name of the destinati...","content":"Wrap sweep_definition and queue_name into a protobuf message and serialize into a bitstring. sweep_definition ( SweepDefinition ) – The content of the sweep. queue_name ( str ) – Name of the destination queue. SweepTaskRequest encoded into a bitstring. bytes previous iqm.station_control.client.serializers.task_serializers.serialize_run_task_request next station_control © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"DutFieldData","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.dut.DutFieldData.html","description":"Bases: PydanticBase A DUT field or path and its unit. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the i...","content":"Bases: PydanticBase A DUT field or path and its unit. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.dut Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. path DUT field or path. unit SI unit of the value. Methods path ( str ) – unit ( str ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. DUT field or path. SI unit of the value. Empty string means the value is dimensionless. previous DutData next observation © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"DutList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.DutList.html","description":"alias of ListModel[list[DutData]] previous DutFieldDataList next ListModel © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[DutData]] previous DutFieldDataList next ListModel © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"setting_node_serializer","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.setting_node_serializer.html","description":"Serializers and deserializers for setting node related models. Full path: iqm.station_control.client.serializers.setting_node_serializer Functions deserialize_setting_node (setting_node_str) Convert b...","content":"Serializers and deserializers for setting node related models. Full path: iqm.station_control.client.serializers.setting_node_serializer Functions deserialize_setting_node (setting_node_str) Convert binary string into SettingNode. previous iqm.station_control.client.serializers.run_serializers.serialize_run_definition next iqm.station_control.client.serializers.setting_node_serializer.deserialize_setting_node © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"station_control","url":"/iqm-station-control-client/api/iqm.station_control.client.station_control.html","description":"Station control client implementation. Full path: iqm.station_control.client.station_control Classes StationControlClient Station control client implementation. Inheritance previous iqm.station_contro...","content":"Station control client implementation. Full path: iqm.station_control.client.station_control Classes StationControlClient Station control client implementation. Inheritance previous iqm.station_control.client.serializers.task_serializers.serialize_sweep_task_request next StationControlClient © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SequenceResultDefinition","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceResultDefinition.html","description":"Bases: SequenceResultBase The content of the sequence result object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydanti...","content":"Bases: SequenceResultBase The content of the sequence result object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. sequence_id Unique identifier of the sequence result. data JSON serializable dict. final Indicates whether this result was marked as final. Methods sequence_id ( UUID ) – data ( dict [ str , Any ] ) – final ( bool ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous SequenceResultData next sweep © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"models","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.html","description":"Station control interface models. Full path: iqm.station_control.interface.models Subpackages and modules dut DUT related interface models. observation Observation related station control interface mo...","content":"Station control interface models. Full path: iqm.station_control.interface.models Subpackages and modules dut DUT related interface models. observation Observation related station control interface models. observation_set Observation set related station control interface models. run Run related station control interface models. sequence Sequence related station control interface models. sweep Sweep related station control interface models. type_aliases Type hint aliases used in the station control interface. previous Meta next dut © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationSetBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.ObservationSetBase.html","description":"Bases: PydanticBase Abstract base class of the observation set definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_...","content":"Bases: PydanticBase Abstract base class of the observation set definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation_set Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_set_type Indicates the type (i.e. purpose) of the observation set. observation_ids Database IDs of the observations belonging to the observation set. describes_id Unique identifier of the observation set this observation set describes. invalid Flag indicating if the object is invalid. Methods observation_set_type ( Literal [ 'calibration-set' , 'characterization-set' , 'generic-set' , 'quality-metric-set' ] ) – observation_ids ( list [ int ] ) – describes_id ( UUID | None ) – invalid ( bool ) – Indicates the type (i.e. purpose) of the observation set. Database IDs of the observations belonging to the observation set. Unique identifier of the observation set this observation set describes. Flag indicating if the object is invalid. Automated systems must not use invalid objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous observation_set next ObservationSetData © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"interface","url":"/iqm-station-control-client/api/iqm.station_control.interface.html","description":"Station control interface. A StationControlInterface administers a set of control and measurement instruments\\nattached to a quantum device, and connects to the database and related external services. ...","content":"Station control interface. A StationControlInterface administers a set of control and measurement instruments\\nattached to a quantum device, and connects to the database and related external services. Full path: iqm.station_control.interface Subpackages and modules list_with_meta Models to extend standard list with metadata. models Station control interface models. pydantic_base Pydantic related models and types. previous iqm.station_control.client.utils.get_progress_bar_callback next list_with_meta © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"run_serializers","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.html","description":"Serializers and deserializers for run related models. Full path: iqm.station_control.client.serializers.run_serializers Functions deserialize_run_data (data) Convert a JSON serializable dictionary to ...","content":"Serializers and deserializers for run related models. Full path: iqm.station_control.client.serializers.run_serializers Functions deserialize_run_data (data) Convert a JSON serializable dictionary to RunData object. deserialize_run_definition (run_definition_proto) Convert run proto into RunDefinition. serialize_run_data (run_data) Convert RunData object to a JSON serializable dictionary. serialize_run_definition (run_definition) Convert RunDefinition into run proto. previous iqm.station_control.client.serializers.playlist_serializers.unpack_playlist next iqm.station_control.client.serializers.run_serializers.deserialize_run_data © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.struct_serializer.deserialize_struct","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.struct_serializer.deserialize_struct.html","description":"Deserialize a Struct protobuf representation into a free-form dict. proto ( Struct ) – dict previous struct_serializer next iqm.station_control.client.serializers.struct_serializer.serialize_struct © ...","content":"Deserialize a Struct protobuf representation into a free-form dict. proto ( Struct ) – dict previous struct_serializer next iqm.station_control.client.serializers.struct_serializer.serialize_struct © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationSetData","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.ObservationSetData.html","description":"Bases: ObservationSetBase The content of the observation set stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic...","content":"Bases: ObservationSetBase The content of the observation set stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation_set Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. dut_label String representation of the DUT the observation set is associated with. observation_set_id Unique identifier of the observation set. created_timestamp Time when the object was created in the database. end_timestamp Time when the observation set was finalized. observation_set_type Indicates the type (i.e. purpose) of the observation set. observation_ids Database IDs of the observations belonging to the observation set. describes_id Unique identifier of the observation set this observation set describes. invalid Flag indicating if the object is invalid. Methods observation_set_type ( Literal [ 'calibration-set' , 'characterization-set' , 'generic-set' , 'quality-metric-set' ] ) – observation_ids ( list [ int ] ) – describes_id ( UUID | None ) – invalid ( bool ) – dut_label ( str | None ) – observation_set_id ( UUID ) – created_timestamp ( datetime ) – end_timestamp ( datetime | None ) – String representation of the DUT the observation set is associated with. Can only be None for generic sets. Unique identifier of the observation set. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Time when the object was created in the database. Time when the observation set was finalized. If None , the set is not finalized yet. previous ObservationSetBase next ObservationSetDefinition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SequenceMetadataDataList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.SequenceMetadataDataList.html","description":"alias of ListModel[list[SequenceMetadataData]] previous RunLiteList next serializers © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[SequenceMetadataData]] previous RunLiteList next serializers © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.run_serializers.deserialize_run_definition","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.deserialize_run_definition.html","description":"Convert run proto into RunDefinition. run_definition_proto ( RunDefinition ) – RunDefinition previous iqm.station_control.client.serializers.run_serializers.deserialize_run_data next iqm.station_contr...","content":"Convert run proto into RunDefinition. run_definition_proto ( RunDefinition ) – RunDefinition previous iqm.station_control.client.serializers.run_serializers.deserialize_run_data next iqm.station_control.client.serializers.run_serializers.serialize_run_data © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"sequence","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.html","description":"Sequence related station control interface models. Full path: iqm.station_control.interface.models.sequence Classes SequenceMetadataBase Abstract base class of the sequence metadata definition and dat...","content":"Sequence related station control interface models. Full path: iqm.station_control.interface.models.sequence Classes SequenceMetadataBase Abstract base class of the sequence metadata definition and data. SequenceMetadataData The content of the sequence metadata stored in the database. SequenceMetadataDefinition The content of the sequence metadata object when creating it. SequenceResultBase Abstract base class of the sequence result definition and data. SequenceResultData The content of the sequence result stored in the database. SequenceResultDefinition The content of the sequence result object when creating it. Inheritance previous RunWithTimestamps next SequenceMetadataBase © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"utils","url":"/iqm-station-control-client/api/iqm.station_control.client.utils.html","description":"Utility functions for IQM Station Control Client. Full path: iqm.station_control.client.utils Functions get_progress_bar_callback () Returns a callback function that creates or updates existing progre...","content":"Utility functions for IQM Station Control Client. Full path: iqm.station_control.client.utils Functions get_progress_bar_callback () Returns a callback function that creates or updates existing progressbars when called. previous StationControlClient next iqm.station_control.client.utils.get_progress_bar_callback © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"sweep","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.html","description":"Sweep related station control interface models. Full path: iqm.station_control.interface.models.sweep Classes SweepBase Abstract base class of the sweep definition and data. SweepData The content of t...","content":"Sweep related station control interface models. Full path: iqm.station_control.interface.models.sweep Classes SweepBase Abstract base class of the sweep definition and data. SweepData The content of the sweep stored in the database. SweepDefinition The content of the sweep object when creating it. SweepStatus Status for sweeps. Inheritance previous SequenceResultDefinition next SweepBase © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SweepStatus","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.SweepStatus.html","description":"Bases: Enum Status for sweeps. Module: iqm.station_control.interface.models.sweep Attributes PENDING Sweep waiting for execution or status unknown PROGRESS Sweep is currently being executed SUCCESS Sw...","content":"Bases: Enum Status for sweeps. Module: iqm.station_control.interface.models.sweep Attributes PENDING Sweep waiting for execution or status unknown PROGRESS Sweep is currently being executed SUCCESS Sweep has succeeded, ready for result retrieval FAILURE Sweep has failed REVOKED Sweep was revoked from execution INTERRUPTED Sweep was interrupted during its execution Methods Sweep waiting for execution or status unknown Sweep is currently being executed Sweep has succeeded, ready for result retrieval Sweep has failed Sweep was revoked from execution Sweep was interrupted during its execution previous SweepDefinition next type_aliases © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"RunLite","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunLite.html","description":"Bases: RunWithTimestamps The data of the run stored in the database, excluding run configuration data. Module: iqm.station_control.interface.models.run Attributes sweep_id Unique identifier of the ass...","content":"Bases: RunWithTimestamps The data of the run stored in the database, excluding run configuration data. Module: iqm.station_control.interface.models.run Attributes sweep_id Unique identifier of the associated sweep. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. begin_timestamp Time when the run began in the station control. end_timestamp Time when the run ended in the station control. run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. Methods run_id ( UUID ) – username ( str ) – experiment_name ( str ) – experiment_label ( str ) – options ( dict [ str , Any ] | None ) – software_version_set_id ( int | None ) – created_timestamp ( datetime ) – modified_timestamp ( datetime ) – begin_timestamp ( datetime ) – end_timestamp ( datetime | None ) – sweep_id ( UUID | None ) – Unique identifier of the associated sweep. previous RunDefinition next RunWithTimestamps © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results.html","description":"Convert binary string into SweepResults. sweep_results_str ( bytes ) – dict [ str , list [ ndarray ]] previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition nex...","content":"Convert binary string into SweepResults. sweep_results_str ( bytes ) – dict [ str , list [ ndarray ]] previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition next iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"RunLiteList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.RunLiteList.html","description":"alias of ListModel[list[RunLite]] previous ResponseWithMeta next SequenceMetadataDataList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[RunLite]] previous ResponseWithMeta next SequenceMetadataDataList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"DutFieldDataList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.DutFieldDataList.html","description":"alias of ListModel[list[DutFieldData]] previous list_models next DutList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[DutFieldData]] previous list_models next DutList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_results","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_results.html","description":"Convert SweepResults into binary string. sweep_id ( UUID ) – sweep_results ( dict [ str , list [ ndarray ] ] ) – bytes previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep...","content":"Convert SweepResults into binary string. sweep_id ( UUID ) – sweep_results ( dict [ str , list [ ndarray ] ] ) – bytes previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_definition next task_serializers © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"RunData","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunData.html","description":"Bases: RunWithTimestamps , RunConfigurationBase The content of the run and its configuration stored in the database. Module: iqm.station_control.interface.models.run Attributes sweep_data The content ...","content":"Bases: RunWithTimestamps , RunConfigurationBase The content of the run and its configuration stored in the database. Module: iqm.station_control.interface.models.run Attributes sweep_data The content of the associated sweep stored in the database. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. begin_timestamp Time when the run began in the station control. end_timestamp Time when the run ended in the station control. run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. additional_run_properties A free-form dictionary of data, used to store information that does not fall into other categories. hard_sweeps Maps SweepBase.return_parameters to \\"hardware sweep specification\\" which specifies how the data measured at each spot should be interpreted and shaped. components Components that participate in this run. default_data_parameters The subset of SweepBase.return_parameters that were added by default, not by the user. default_sweep_parameters The subset of SweepBase.sweeps parameters were added by default, not by the user. Methods additional_run_properties ( dict [ str , Any ] | None ) – hard_sweeps ( dict [ str , list [ tuple [ Sweep , ... ] ] ] | None ) – components ( list [ str ] ) – default_data_parameters ( list [ str ] ) – default_sweep_parameters ( list [ str ] ) – run_id ( UUID ) – username ( str ) – experiment_name ( str ) – experiment_label ( str ) – options ( dict [ str , Any ] | None ) – software_version_set_id ( int | None ) – created_timestamp ( datetime ) – modified_timestamp ( datetime ) – begin_timestamp ( datetime ) – end_timestamp ( datetime | None ) – sweep_data ( SweepData ) – The content of the associated sweep stored in the database. previous RunConfigurationBase next RunDefinition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.playlist_serializers.pack_playlist","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.playlist_serializers.pack_playlist.html","description":"Pack the given playlist into a protobuf format for further serialization. playlist ( Playlist ) – playlist to pack playlist in protobuf format Playlist previous playlist_serializers next iqm.station_c...","content":"Pack the given playlist into a protobuf format for further serialization. playlist ( Playlist ) – playlist to pack playlist in protobuf format Playlist previous playlist_serializers next iqm.station_control.client.serializers.playlist_serializers.unpack_playlist © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"DutData","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.dut.DutData.html","description":"Bases: PydanticBase Represents a Device Under Test, or DUT, for short. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.Validati...","content":"Bases: PydanticBase Represents a Device Under Test, or DUT, for short. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.dut Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. label DUT label of the device. dut_type String indicating the DUT type of the device Can be either 'chip' or 'twpa'. Methods label ( str ) – dut_type ( Literal [ 'chip' , 'twpa' ] ) – DUT label of the device. String indicating the DUT type of the device\\nCan be either ‘chip’ or ‘twpa’. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous dut next DutFieldData © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"RunDefinition","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunDefinition.html","description":"Bases: RunBase , RunConfigurationBase The content of the run object when creating it. Module: iqm.station_control.interface.models.run Attributes sweep_definition The content of the associated sweep s...","content":"Bases: RunBase , RunConfigurationBase The content of the run object when creating it. Module: iqm.station_control.interface.models.run Attributes sweep_definition The content of the associated sweep stored in the database. run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. additional_run_properties A free-form dictionary of data, used to store information that does not fall into other categories. hard_sweeps Maps SweepBase.return_parameters to \\"hardware sweep specification\\" which specifies how the data measured at each spot should be interpreted and shaped. components Components that participate in this run. default_data_parameters The subset of SweepBase.return_parameters that were added by default, not by the user. default_sweep_parameters The subset of SweepBase.sweeps parameters were added by default, not by the user. Methods additional_run_properties ( dict [ str , Any ] | None ) – hard_sweeps ( dict [ str , list [ tuple [ Sweep , ... ] ] ] | None ) – components ( list [ str ] ) – default_data_parameters ( list [ str ] ) – default_sweep_parameters ( list [ str ] ) – run_id ( UUID ) – username ( str ) – experiment_name ( str ) – experiment_label ( str ) – options ( dict [ str , Any ] | None ) – software_version_set_id ( int | None ) – sweep_definition ( SweepDefinition ) – The content of the associated sweep stored in the database. previous RunData next RunLite © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SequenceResultBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceResultBase.html","description":"Bases: PydanticBase Abstract base class of the sequence result definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_...","content":"Bases: PydanticBase Abstract base class of the sequence result definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. sequence_id Unique identifier of the sequence result. data JSON serializable dict. final Indicates whether this result was marked as final. Methods sequence_id ( UUID ) – data ( dict [ str , Any ] ) – final ( bool ) – Unique identifier of the sequence result. JSON serializable dict. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Indicates whether this result was marked as final. previous SequenceMetadataDefinition next SequenceResultData © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SequenceMetadataData","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceMetadataData.html","description":"Bases: SequenceMetadataBase The content of the sequence metadata stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pyda...","content":"Bases: SequenceMetadataBase The content of the sequence metadata stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. created_timestamp Time when the object was created in the database. sequence_id Unique identifier of the sequence. origin_id Unique identifier of the creator. origin_uri Uniform resource identifier (weak reference) for the creator. Methods sequence_id ( UUID ) – origin_id ( str ) – origin_uri ( str ) – created_timestamp ( datetime ) – Time when the object was created in the database. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous SequenceMetadataBase next SequenceMetadataDefinition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SweepData","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.SweepData.html","description":"Bases: SweepBase The content of the sweep stored in the database. Module: iqm.station_control.interface.models.sweep Attributes created_timestamp Time when the object was created in the database. modi...","content":"Bases: SweepBase The content of the sweep stored in the database. Module: iqm.station_control.interface.models.sweep Attributes created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. begin_timestamp Time when the sweep began in the station control. end_timestamp Time when the sweep ended in the station control. sweep_status Status of sweep execution. sweep_id Unique identifier of the sweep. dut_label DUT label of the device being used. settings A tree representation of the initial settings to set before the sweep. sweeps Sweeps that define the swept parameters, i.e. a list of parallel sweeps, where the data values of all sweeps in the tuple are interleaved, and updated simultaneously during the sweep. return_parameters Parameters that will be queried from devices and saved for each spot (variable-tuple) of the N-dimensional sweep. Methods sweep_id ( UUID ) – dut_label ( str ) – settings ( SettingNode ) – sweeps ( list [ tuple [ Sweep , ... ] ] ) – return_parameters ( list [ str ] ) – created_timestamp ( datetime ) – modified_timestamp ( datetime ) – begin_timestamp ( datetime | None ) – end_timestamp ( datetime | None ) – sweep_status ( SweepStatus ) – Time when the object was created in the database. Time when the object was last modified in the database. Time when the sweep began in the station control. Time when the sweep ended in the station control. Status of sweep execution. previous SweepBase next SweepDefinition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.task_serializers.serialize_run_task_request","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.task_serializers.serialize_run_task_request.html","description":"Wrap run_definition and queue_name into a protobuf message and serialize into a bitstring. run_definition ( RunDefinition ) – The content of the run. queue_name ( str ) – Name of the destination queue...","content":"Wrap run_definition and queue_name into a protobuf message and serialize into a bitstring. run_definition ( RunDefinition ) – The content of the run. queue_name ( str ) – Name of the destination queue. SweepTaskRequest encoded into a bitstring. bytes previous task_serializers next iqm.station_control.client.serializers.task_serializers.serialize_sweep_task_request © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"observation","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation.html","description":"Observation related station control interface models. Full path: iqm.station_control.interface.models.observation Classes ObservationBase Abstract base class of the observation models. ObservationData...","content":"Observation related station control interface models. Full path: iqm.station_control.interface.models.observation Classes ObservationBase Abstract base class of the observation models. ObservationData The content of the observation stored in the database. ObservationDefinition The content of the observation definition. ObservationLite The lightweight version of the observation data. ObservationUpdate The observation data to be updated in the database. Inheritance previous DutFieldData next ObservationBase © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SequenceMetadataDefinition","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceMetadataDefinition.html","description":"Bases: SequenceMetadataBase The content of the sequence metadata object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pyd...","content":"Bases: SequenceMetadataBase The content of the sequence metadata object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. sequence_id Unique identifier of the sequence. origin_id Unique identifier of the creator. origin_uri Uniform resource identifier (weak reference) for the creator. Methods sequence_id ( UUID ) – origin_id ( str ) – origin_uri ( str ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous SequenceMetadataData next SequenceResultBase © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"list_with_meta","url":"/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.html","description":"Models to extend standard list with metadata. Full path: iqm.station_control.interface.list_with_meta Classes ListWithMeta Standard list extension holding optional metadata as well. Meta Class holding...","content":"Models to extend standard list with metadata. Full path: iqm.station_control.interface.list_with_meta Classes ListWithMeta Standard list extension holding optional metadata as well. Meta Class holding metadata for list return values, like pagination related data. Inheritance previous interface next ListWithMeta © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.channel_property_serializer.serialize_channel_properties","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.serialize_channel_properties.html","description":"Pack the given dictionary of channel properties into a protobuf format for further serialization. channel_properties – channel properties to pack channel_property_dictionary ( dict [ str , ChannelProp...","content":"Pack the given dictionary of channel properties into a protobuf format for further serialization. channel_properties – channel properties to pack channel_property_dictionary ( dict [ str , ChannelProperties ] ) – ChannelPropertyDictionary ChannelPropertyDictionary previous iqm.station_control.client.serializers.channel_property_serializer.deserialize_instructions next iqm.station_control.client.serializers.channel_property_serializer.unpack_channel_properties © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition.html","description":"Convert sweep proto into SweepDefinition. sweep_definition_proto ( SweepRequest ) – SweepDefinition previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data next iqm.st...","content":"Convert sweep proto into SweepDefinition. sweep_definition_proto ( SweepRequest ) – SweepDefinition previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data next iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"dut","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.dut.html","description":"DUT related interface models. Full path: iqm.station_control.interface.models.dut Classes DutData Represents a Device Under Test, or DUT, for short. DutFieldData A DUT field or path and its unit. Inhe...","content":"DUT related interface models. Full path: iqm.station_control.interface.models.dut Classes DutData Represents a Device Under Test, or DUT, for short. DutFieldData A DUT field or path and its unit. Inheritance previous models next DutData © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"struct_serializer","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.struct_serializer.html","description":"Serializers and deserializers for struct related models. We use custom Struct model instead of standard Struct from protobuf,\\nsince standard Struct doesn’t support integers but instead casts them alwa...","content":"Serializers and deserializers for struct related models. We use custom Struct model instead of standard Struct from protobuf,\\nsince standard Struct doesn’t support integers but instead casts them always to floats. Full path: iqm.station_control.client.serializers.struct_serializer Functions deserialize_struct (proto) Deserialize a Struct protobuf representation into a free-form dict. serialize_struct (data) Serialize a free-form dict into a Struct protobuf representation. previous iqm.station_control.client.serializers.setting_node_serializer.deserialize_setting_node next iqm.station_control.client.serializers.struct_serializer.deserialize_struct © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.run_serializers.deserialize_run_data","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.deserialize_run_data.html","description":"Convert a JSON serializable dictionary to RunData object. data ( dict ) – RunData previous run_serializers next iqm.station_control.client.serializers.run_serializers.deserialize_run_definition © Copy...","content":"Convert a JSON serializable dictionary to RunData object. data ( dict ) – RunData previous run_serializers next iqm.station_control.client.serializers.run_serializers.deserialize_run_definition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"RunConfigurationBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunConfigurationBase.html","description":"Bases: object Abstract base class of the run configuration data. Module: iqm.station_control.interface.models.run Attributes additional_run_properties A free-form dictionary of data, used to store inf...","content":"Bases: object Abstract base class of the run configuration data. Module: iqm.station_control.interface.models.run Attributes additional_run_properties A free-form dictionary of data, used to store information that does not fall into other categories. hard_sweeps Maps SweepBase.return_parameters to \\"hardware sweep specification\\" which specifies how the data measured at each spot should be interpreted and shaped. components Components that participate in this run. default_data_parameters The subset of SweepBase.return_parameters that were added by default, not by the user. default_sweep_parameters The subset of SweepBase.sweeps parameters were added by default, not by the user. Methods additional_run_properties ( dict [ str , Any ] | None ) – hard_sweeps ( dict [ str , list [ tuple [ Sweep , ... ] ] ] | None ) – components ( list [ str ] ) – default_data_parameters ( list [ str ] ) – default_sweep_parameters ( list [ str ] ) – A free-form dictionary of data, used to store information that does not fall into other categories. Maps SweepBase.return_parameters to “hardware sweep specification” which specifies\\nhow the data measured at each spot should be interpreted and shaped.\\nThe hard sweep specification is in the same format as SweepBase.sweeps ,\\nwhich means that the returned data can be interpreted as an N-dimensional sweep inside the spot.\\nAn empty list is interpreted such that the return parameter is a scalar.\\nThe hard sweep specification can also be None ,\\nin which case the shape will be whatever the instrument returns. Components that participate in this run. The subset of SweepBase.return_parameters that were added by default, not by the user.\\nUsed to select which data to analyze and plot. The subset of SweepBase.sweeps parameters were added by default, not by the user.\\nUsed to select which data to analyze and plot. previous RunBase next RunData © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.struct_serializer.serialize_struct","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.struct_serializer.serialize_struct.html","description":"Serialize a free-form dict into a Struct protobuf representation. data ( dict ) – Struct previous iqm.station_control.client.serializers.struct_serializer.deserialize_struct next sweep_serializers © C...","content":"Serialize a free-form dict into a Struct protobuf representation. data ( dict ) – Struct previous iqm.station_control.client.serializers.struct_serializer.deserialize_struct next sweep_serializers © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"SequenceMetadataBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceMetadataBase.html","description":"Bases: PydanticBase Abstract base class of the sequence metadata definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydanti...","content":"Bases: PydanticBase Abstract base class of the sequence metadata definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. sequence_id Unique identifier of the sequence. origin_id Unique identifier of the creator. origin_uri Uniform resource identifier (weak reference) for the creator. Methods sequence_id ( UUID ) – origin_id ( str ) – origin_uri ( str ) – Unique identifier of the sequence. Unique identifier of the creator. E.g. notebook researcher username, or calibration service ID. Uniform resource identifier (weak reference) for the creator. E.g. calibration service ID. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous sequence next SequenceMetadataData © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"type_aliases","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.type_aliases.html","description":"Type hint aliases used in the station control interface. Full path: iqm.station_control.interface.models.type_aliases previous SweepStatus next pydantic_base © Copyright Copyright (c) 2019-2023 IQM Fi...","content":"Type hint aliases used in the station control interface. Full path: iqm.station_control.interface.models.type_aliases previous SweepStatus next pydantic_base © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"playlist_serializers","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.playlist_serializers.html","description":"Serializers and deserializers for Playlist Full path: iqm.station_control.client.serializers.playlist_serializers Functions pack_playlist (playlist) Pack the given playlist into a protobuf format for ...","content":"Serializers and deserializers for Playlist Full path: iqm.station_control.client.serializers.playlist_serializers Functions pack_playlist (playlist) Pack the given playlist into a protobuf format for further serialization. unpack_playlist (proto_playlist) Unpack a protobuf representation of a playlist into its runtime representation. previous iqm.station_control.client.serializers.datetime_serializers.serialize_datetime next iqm.station_control.client.serializers.playlist_serializers.pack_playlist © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"client","url":"/iqm-station-control-client/api/iqm.station_control.client.html","description":"Station control client implementation. Full path: iqm.station_control.client Subpackages and modules list_models Station control client type adapters. serializers Module for station control client ser...","content":"Station control client implementation. Full path: iqm.station_control.client Subpackages and modules list_models Station control client type adapters. serializers Module for station control client serialization and deserialization. station_control Station control client implementation. utils Utility functions for IQM Station Control Client. previous API Reference next list_models © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"list_models","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.html","description":"Station control client type adapters. Full path: iqm.station_control.client.list_models Classes DutFieldDataList alias of ListModel[list[DutFieldData]] DutList alias of ListModel[list[DutData]] ListMo...","content":"Station control client type adapters. Full path: iqm.station_control.client.list_models Classes DutFieldDataList alias of ListModel[list[DutFieldData]] DutList alias of ListModel[list[DutData]] ListModel A Pydantic BaseModel for a container model of a list of objects. ListModel[list[DutData]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[DutFieldData]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationData]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationDefinition]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationLite]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationSetData]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationUpdate]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[RunLite]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[SequenceMetadataData]] A Pydantic BaseModel for a container model of a list of objects. ObservationDataList alias of ListModel[list[ObservationData]] ObservationDefinitionList alias of ListModel[list[ObservationDefinition]] ObservationLiteList alias of ListModel[list[ObservationLite]] ObservationSetDataList alias of ListModel[list[ObservationSetData]] ObservationUpdateList alias of ListModel[list[ObservationUpdate]] ResponseWithMeta Class used for query endpoints to return metadata in addition to the returned items. RunLiteList alias of ListModel[list[RunLite]] SequenceMetadataDataList alias of ListModel[list[SequenceMetadataData]] Inheritance previous client next DutFieldDataList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"run","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.run.html","description":"Run related station control interface models. Full path: iqm.station_control.interface.models.run Classes RunBase Abstract base class of run data. RunConfigurationBase Abstract base class of the run c...","content":"Run related station control interface models. Full path: iqm.station_control.interface.models.run Classes RunBase Abstract base class of run data. RunConfigurationBase Abstract base class of the run configuration data. RunData The content of the run and its configuration stored in the database. RunDefinition The content of the run object when creating it. RunLite The data of the run stored in the database, excluding run configuration data. RunWithTimestamps Abstract base class of run data including timestamps. Inheritance previous ObservationSetUpdate next RunBase © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationLiteList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationLiteList.html","description":"alias of ListModel[list[ObservationLite]] previous ObservationDefinitionList next ObservationSetDataList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[ObservationLite]] previous ObservationDefinitionList next ObservationSetDataList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"Meta","url":"/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.Meta.html","description":"Bases: object Class holding metadata for list return values, like pagination related data. Module: iqm.station_control.interface.list_with_meta Attributes count  errors  limit  offset  order_by  Metho...","content":"Bases: object Class holding metadata for list return values, like pagination related data. Module: iqm.station_control.interface.list_with_meta Attributes count  errors  limit  offset  order_by  Methods count ( int | None ) – order_by ( str | None ) – limit ( int | None ) – offset ( int | None ) – errors ( list [ str ] | None ) – previous ListWithMeta next models © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.utils.get_progress_bar_callback","url":"/iqm-station-control-client/api/iqm.station_control.client.utils.get_progress_bar_callback.html","description":"Returns a callback function that creates or updates existing progressbars when called. Callable [[ list [ tuple [ str , int , int ]]], None ] previous utils next interface © Copyright Copyright (c) 20...","content":"Returns a callback function that creates or updates existing progressbars when called. Callable [[ list [ tuple [ str , int , int ]]], None ] previous utils next interface © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"iqm.station_control.client.serializers.run_serializers.serialize_run_data","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.serialize_run_data.html","description":"Convert RunData object to a JSON serializable dictionary. run_data ( RunData ) – dict previous iqm.station_control.client.serializers.run_serializers.deserialize_run_definition next iqm.station_contro...","content":"Convert RunData object to a JSON serializable dictionary. run_data ( RunData ) – dict previous iqm.station_control.client.serializers.run_serializers.deserialize_run_definition next iqm.station_control.client.serializers.run_serializers.serialize_run_definition © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationUpdate","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationUpdate.html","description":"Bases: PydanticBase The observation data to be updated in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.Validat...","content":"Bases: PydanticBase The observation data to be updated in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_id Unique identifier of the observation. invalid Flag indicating if the object is invalid. Methods observation_id ( int ) – invalid ( bool ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Unique identifier of the observation. Flag indicating if the object is invalid. Automated systems must not use invalid objects. previous ObservationLite next observation_set © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"pydantic_base","url":"/iqm-station-control-client/api/iqm.station_control.interface.pydantic_base.html","description":"Pydantic related models and types. Full path: iqm.station_control.interface.pydantic_base Classes PydanticBase Pydantic base model to change the behaviour of pydantic globally. Inheritance previous ty...","content":"Pydantic related models and types. Full path: iqm.station_control.interface.pydantic_base Classes PydanticBase Pydantic base model to change the behaviour of pydantic globally. Inheritance previous type_aliases next PydanticBase © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ResponseWithMeta","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.ResponseWithMeta.html","description":"Bases: PydanticBase , Generic [ T ] Class used for query endpoints to return metadata in addition to the returned items. Create a new model by parsing and validating input data from keyword arguments....","content":"Bases: PydanticBase , Generic [ T ] Class used for query endpoints to return metadata in addition to the returned items. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.client.list_models Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. items  meta  Methods items ( list [ T ] ) – meta ( Meta | None ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ObservationUpdateList next RunLiteList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationDataList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationDataList.html","description":"alias of ListModel[list[ObservationData]] previous ListModel next ObservationDefinitionList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[ObservationData]] previous ListModel next ObservationDefinitionList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"RunWithTimestamps","url":"/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunWithTimestamps.html","description":"Bases: RunBase Abstract base class of run data including timestamps. Module: iqm.station_control.interface.models.run Attributes created_timestamp Time when the object was created in the database. mod...","content":"Bases: RunBase Abstract base class of run data including timestamps. Module: iqm.station_control.interface.models.run Attributes created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. begin_timestamp Time when the run began in the station control. end_timestamp Time when the run ended in the station control. run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. Methods run_id ( UUID ) – username ( str ) – experiment_name ( str ) – experiment_label ( str ) – options ( dict [ str , Any ] | None ) – software_version_set_id ( int | None ) – created_timestamp ( datetime ) – modified_timestamp ( datetime ) – begin_timestamp ( datetime ) – end_timestamp ( datetime | None ) – Time when the object was created in the database. Time when the object was last modified in the database. Time when the run began in the station control. Time when the run ended in the station control. previous RunLite next sequence © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"channel_property_serializer","url":"/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.html","description":"Serializers and deserializers for ChannelProperties Full path: iqm.station_control.client.serializers.channel_property_serializer Functions deserialize_channel_properties (...[, ...]) Convert the give...","content":"Serializers and deserializers for ChannelProperties Full path: iqm.station_control.client.serializers.channel_property_serializer Functions deserialize_channel_properties (...[, ...]) Convert the given protobuf dictionary of channel properties into a dictionary of ChannelProperties . deserialize_instructions (instructions) Convert a repeated scalar container of instruction type strings into a tuple of python types. serialize_channel_properties (...) Pack the given dictionary of channel properties into a protobuf format for further serialization. unpack_channel_properties (payload[, ...]) Parse the Channel Property Dictionary from a string serialised protobuf payload. previous serializers next iqm.station_control.client.serializers.channel_property_serializer.deserialize_channel_properties © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-station-control-client","title":"ObservationSetDataList","url":"/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationSetDataList.html","description":"alias of ListModel[list[ObservationSetData]] previous ObservationLiteList next ObservationUpdateList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30....","content":"alias of ListModel[list[ObservationSetData]] previous ObservationLiteList next ObservationUpdateList © Copyright Copyright (c) 2019-2023 IQM Finland Oy. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"IQM Benchmarks","url":"/iqm-benchmarks/readme.html","description":"IQM Benchmarks is a suite of Quantum Characterization, Verification, and Validation (QCVV) tools for quantum computing. It is designed to be a comprehensive tool for benchmarking quantum hardware. The...","content":"IQM Benchmarks is a suite of Quantum Characterization, Verification, and Validation (QCVV) tools for quantum computing. It is designed to be a comprehensive tool for benchmarking quantum hardware. The suite is designed to be modular, allowing users to easily add new benchmarks and customize existing ones. The suite is designed to be easy to use, with a simple API that allows users to run benchmarks with a single command. Below is a list of the benchmarks currently available in the suite: Gates / Layers: Standard Clifford Randomized Benchmarking [ Phys. Rev. A 85, 042311 (2012)] Interleaved Randomized Benchmarking [ Phys. Rev. Lett. 109, 080505 (2012)] Compressive Gate Set Tomography [ PRX Quantum 4, 010325 (2023)] Mirror Randomized Benchmarking [ Phys. Rev. Lett. 129, 150502 (2022)] Holistic: Quantum Volume [ Phys. Rev. A 100, 032328 (2019)] CLOPS [ arXiv:2110.14108 [quant-ph] (2021)] Entanglement: GHZ State Fidelity [ arXiv:0712.0921 [quant-ph] (2007)] Graph State Bipartite Entanglement [ Adv. Quantum Technol., 2100061 (2021)] Optimization: Q-Score [ IEEE Trans. Quantum Eng., 2 (2021)] The project is split into different benchmarks, all sharing the Benchmark class or the legacy BenchmarkBase class. Each individual benchmark takes as an argument their own BenchmarkConfigurationBase class. All the (legacy) benchmarks executed at once are wrapped by the BenchmarkExperiment class, which handles dependencies among the benchmarks, storing the results, producing the plots… uv is highly recommended for practical Python environment and package management.\\nWith uv installed in your system, start a terminal in your machine and create a new Python environment Note: refer to uv’s documentation if there are problems setting up a Python environment. After the command has run, read the output and make sure to use the prompt to activate the environment.\\nThen, you can install the latest release of the IQM Benchmarks by running: Supplied within the Python package there is an additional requirements.txt file containing locked, security scanned\\ndependencies. The file can be used to constrain installed dependencies either directly from the repo or by\\nextracting it from the PyPI package. Optional dependencies like compressive gate set tomography and jupyter notebooks can be installed as follows: Current optional dependencies are: examples : Jupyter notebooks mgst : Compressive gate set tomography test : Code testing and Linting docs : Documentation building cicd : CICD tools To install in development mode with all required dependencies, you can instead clone the repository and from the project directory run To run the tests, you can use the following command: To build the API documentation as HTML: Update the requirements. This is necessary when you add a new dependency or update an existing one in pyproject.toml .\\nAfter this, any changes in the lockfile requirements.txt have to be committed.\\nThe script upgrades locked dependencies defined in pyproject.toml within the given version ranges. However, transitive\\ndependencies are deliberately not upgraded automatically. The IQM Benchmarks suite is designed to be used with real quantum hardware. To use the suite, you will need to have access to a quantum computer. The suite is designed to work with both IQM Resonance (IQM’s quantum cloud service) and on-prem devices, but can be easily adapted to work with other quantum computing platforms. To use the suite with IQM Resonance, you will need to set up an account and obtain an API token. You can then set the IQM_TOKEN environment variable to your API token. The suite will automatically use this token to authenticate with IQM Resonance. You can easily set up one or more benchmarks by defining a configuration for them. For example, for Randomized, Interleaved and Mirror Benchmarking, or Quantum Volume: In order to execute them, you must specify a backend. for IQM Resonance this can be given as a simple string, such as “garnet” (together with your IQM Token environment variable) and for an on-prem device and IQM Resonance this can be defined using the URL of the quantum computer. Also, you need to reference the benchmark configuration you want to run: Full examples on how to run benchmarks and analyze the results can be found in the examples folder. This repository can be setup to perform a scheduled (weekly, daily…) benchmark from a Gitlab/Github pipeline, executed on a real device. An example configuration is given in the scheduled_experiments folder. previous IQM Benchmarks next Examples By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"IQM Benchmarks","url":"/iqm-benchmarks/index.html","description":"2.29 2025-03-30 iqm-finland/iqm-benchmarks Quantum Characterization, Verification, and Validation (QCVV) tools for quantum computing.\\nDeveloped by IQM . Index Module Index Search Page next IQM Benchma...","content":"2.29 2025-03-30 iqm-finland/iqm-benchmarks Quantum Characterization, Verification, and Validation (QCVV) tools for quantum computing.\\nDeveloped by IQM . Index Module Index Search Page next IQM Benchmarks By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"API Reference","url":"/iqm-benchmarks/API.html","description":"iqm.benchmarks IQM's Python Library Benchmarking Suite QCVV. previous 2-Qubit Clifford Group Decomposition next iqm.benchmarks By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-...","content":"iqm.benchmarks IQM's Python Library Benchmarking Suite QCVV. previous 2-Qubit Clifford Group Decomposition next iqm.benchmarks By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Development","url":"/iqm-benchmarks/development/development.html","description":"This section provides examples and guidance on how to create benchmarks based on the IQM Benchmarks package. previous Benchmarking IQM Star next How to make your own benchmark? By IQM Benchmarks devel...","content":"This section provides examples and guidance on how to create benchmarks based on the IQM Benchmarks package. previous Benchmarking IQM Star next How to make your own benchmark? By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"2-Qubit Clifford Group Decomposition","url":"/iqm-benchmarks/development/generate_2qubit_cliffords.html","description":"Generate the decomposition of the 2-qubit Clifford group according to: https://arxiv.org/abs/1402.4848 Verify the condition \\\\(\\\\displaystyle{\\\\sum_{k,\\\\,k^\\\\prime=1}^K}\\\\left|\\\\mathrm{tr}\\\\left(U_{k^\\\\prime}^...","content":"Generate the decomposition of the 2-qubit Clifford group according to: https://arxiv.org/abs/1402.4848 Verify the condition \\\\(\\\\displaystyle{\\\\sum_{k,\\\\,k^\\\\prime=1}^K}\\\\left|\\\\mathrm{tr}\\\\left(U_{k^\\\\prime}^{\\\\dagger}U_k\\\\right)\\\\right|^4/K^2 = 2\\\\) (Eq. S2) Verify the condition \\\\(\\\\displaystyle{\\\\sum_{k,\\\\,k^\\\\prime=1}^K}\\\\left|\\\\mathrm{tr}\\\\left(U_{k^\\\\prime}^{\\\\dagger}U_k\\\\right)\\\\right|^4/K^2 = 2\\\\) (Eq. S2) WARNING : in total there are \\\\(n=11,520^2 = 132,710,400\\\\) values in the sum ! It suffices to compute the values in a triangular part of the matrix \\\\(U_{k^\\\\prime}^{\\\\dagger}U_k\\\\) — however there are still \\\\(n(n-1)/2\\\\) such terms ! previous How to make your own benchmark? next API Reference By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"How to make your own benchmark?","url":"/iqm-benchmarks/development/how_to_make_your_own_benchmark.html","description":"This notebook shows an example of how to use the benchmark defition to write a new benchmark class. Here we make a simple benchmark that creates two circuits, one that prepares all the qubits in the g...","content":"This notebook shows an example of how to use the benchmark defition to write a new benchmark class. Here we make a simple benchmark that creates two circuits, one that prepares all the qubits in the ground state and another one that prepares them in the excited state. previous Development next 2-Qubit Clifford Group Decomposition By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.circuit_containers.BenchmarkCircuit","url":"/iqm-benchmarks/api/iqm.benchmarks.circuit_containers.BenchmarkCircuit.html","description":"Bases: object A class grouping a list of CircuitGroup into a single purpose. This can typically represent, for example,\\nall of the transpiled circuits that are executed. name ( str ) – circuit_groups ...","content":"Bases: object A class grouping a list of CircuitGroup into a single purpose. This can typically represent, for example,\\nall of the transpiled circuits that are executed. name ( str ) – circuit_groups ( List [ CircuitGroup ] ) – Name of the BenchmarkCircuit . str List of CircuitGroup contained inside List[ iqm.benchmarks.circuit_containers.CircuitGroup ] Attributes group_names Names of all the contained CircuitGroup . groups The circuit groups inside. qubit_indices Set of all the qubits used in all the CircuitGroup , represented as an integer. qubit_layouts Set of all the qubit layouts used, where the qubits are represented as an instance of Qubit . qubit_layouts_by_index Set of all the qubit layouts used, where the qubits are represented as an integer. qubits Set of all the qubits used in all the CircuitGroup , represented as an instance of Qubit . name  circuit_groups  Methods __eq__ (other) Return self==value. __getitem__ (key)  __repr__ () Return repr(self). __setitem__ (key, value)  get_circuit_group_by_name (name) Gets a CircuitGroup by name. Gets a CircuitGroup by name. name ( str ) – name of the group. The desired CircuitGroup , or None if it does not exist. CircuitGroup | None The circuit groups inside. Names of all the contained CircuitGroup . Set of all the qubits used in all the CircuitGroup , represented as an integer. Set of all the qubits used in all the CircuitGroup , represented as an instance of Qubit . Set of all the qubit layouts used, where the qubits are represented as an integer. Set of all the qubit layouts used, where the qubits are represented as an instance of Qubit . previous iqm.benchmarks.circuit_containers next iqm.benchmarks.circuit_containers.CircuitGroup By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.get_measurement_mapping","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.get_measurement_mapping.html","description":"Extracts the final measurement mapping (qubits to bits) of a quantum circuit. circuit ( QuantumCircuit ) – The quantum circuit to extract the measurement mapping from. A dictionary where keys are qubi...","content":"Extracts the final measurement mapping (qubits to bits) of a quantum circuit. circuit ( QuantumCircuit ) – The quantum circuit to extract the measurement mapping from. A dictionary where keys are qubits and values are classical bits. dict previous iqm.benchmarks.utils.get_iqm_backend next iqm.benchmarks.utils.get_neighbors_of_edges By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.readout_mitigation.M3IQM","url":"/iqm-benchmarks/api/iqm.benchmarks.readout_mitigation.M3IQM.html","description":"Bases: M3Mitigation M3 readout mitigation class modified to work with IQM devices. Methods _grab_additional_cals (qubits[, shots, ...]) Grab missing calibration data from backend. cals_from_system ([q...","content":"Bases: M3Mitigation M3 readout mitigation class modified to work with IQM devices. Methods _grab_additional_cals (qubits[, shots, ...]) Grab missing calibration data from backend. cals_from_system ([qubits, shots, method, ...]) Grab calibration data from system. Grab calibration data from system. qubits ( array_like ) – Qubits over which to correct calibration data. Default is all. shots ( int ) – Number of shots per circuit. min(1e4, max_shots). method ( str ) – Type of calibration, ‘balanced’ (default for hardware),\\n‘independent’ (default for simulators), or ‘marginal’. initial_reset ( bool ) – Use resets at beginning of calibration circuits, default=False. rep_delay ( float ) – Delay between circuits on IBM Quantum backends. cals_file ( str ) – Output path to write JSON calibration data to. async_cal ( bool ) – Do calibration async in a separate thread, default is False. M3Error – Called while a calibration currently in progress. previous iqm.benchmarks.readout_mitigation.readout_error_m3 next iqm.benchmarks.utils By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.get_neighbors_of_edges","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.get_neighbors_of_edges.html","description":"Given a Sequence of edges and a graph, return all neighboring nodes of the edges. edges ( Sequence [ Sequence [ int ] ] ) – A sequence of pairs of integers, representing edges of a graph. graph ( Sequ...","content":"Given a Sequence of edges and a graph, return all neighboring nodes of the edges. edges ( Sequence [ Sequence [ int ] ] ) – A sequence of pairs of integers, representing edges of a graph. graph ( Sequence [ Sequence [ int ] ] ) – The input graph specified as a sequence of edges (Sequence[int]). list of all neighboring nodes of the input edges. Sequence[ int ] previous iqm.benchmarks.utils.get_measurement_mapping next iqm.benchmarks.utils.get_tomography_matrix By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.html","description":"Bases: Benchmark The Graph States benchmark estimates the bipartite entangelement negativity of native graph states. Attributes name  Methods add_all_circuits_to_dataset (dataset) Adds all generated c...","content":"Bases: Benchmark The Graph States benchmark estimates the bipartite entangelement negativity of native graph states. Attributes name  Methods add_all_circuits_to_dataset (dataset) Adds all generated circuits during execution to the dataset variable add_all_meta_to_dataset (dataset) Adds all configuration metadata and circuits to the dataset variable analysis_function (run) Analysis function for a Graph State benchmark experiment. execute (backend) Executes the benchmark. generate_all_circuit_info_for_graph_state_benchmark () Generates all circuits and associated information for the Graph State benchmark: backend_arg ( IQMBackendBase ) – configuration ( GraphStateConfiguration ) – Analysis function for a Graph State benchmark experiment. run ( BenchmarkRunResult ) – BenchmarkAnalysisResult Adds all configuration metadata and circuits to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Adds all generated circuits during execution to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Returns: Generates native graph states Identifies all pairs of qubits with disjoint neighbors Generates all projected nodes to cover all pairs of qubits with disjoint neighbors A dictionary containing all circuit information for the Graph State benchmark. Dict[ str , Any] Executes the benchmark. Dataset previous iqm.benchmarks.entanglement.graph_states.update_pauli_expectations next iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.merge_datasets_dac","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.merge_datasets_dac.html","description":"Merges a list of datasets recursively to minimize dataset sizes during merge datasets ( List [ Dataset ] ) – List[xr.Dateset]\\nA list of xarray datasets A list containing a single merged dataset Datase...","content":"Merges a list of datasets recursively to minimize dataset sizes during merge datasets ( List [ Dataset ] ) – List[xr.Dateset]\\nA list of xarray datasets A list containing a single merged dataset Dataset previous iqm.benchmarks.benchmark_definition.default_analysis_function next iqm.benchmarks.benchmark_definition.show_figure By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.perform_backend_transpilation","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.perform_backend_transpilation.html","description":"Transpile a list of circuits to backend specifications. qc_list ( List [ QuantumCircuit ] ) – The original (untranspiled) list of quantum circuits. backend ( IQMBackendBase ) – The backend to execute ...","content":"Transpile a list of circuits to backend specifications. qc_list ( List [ QuantumCircuit ] ) – The original (untranspiled) list of quantum circuits. backend ( IQMBackendBase ) – The backend to execute the benchmark on. qubits ( Sequence [ int ] ) – The qubits to target in the transpilation. coupling_map ( List [ List [ int ] ] ) – The target coupling map to transpile to. basis_gates ( Tuple [ str , ... ] ) – The basis gates. qiskit_optim_level ( int ) – Qiskit “optimization_level” value. optimize_sqg ( bool ) – Whether SQG optimization is performed taking into account virtual Z. drop_final_rz ( bool ) – Whether the SQG optimizer drops a final RZ gate. routing_method ( Optional [ str ] ) – The routing method employed by Qiskit’s transpilation pass. A list of transpiled quantum circuits. List[QuantumCircuit] ValueError – if Star topology and label 0 is in qubit layout. previous iqm.benchmarks.utils.median_with_uncertainty next iqm.benchmarks.utils.reduce_to_active_qubits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.is_successful","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.is_successful.html","description":"Check whether a Q-score benchmark returned approximation ratio above beta*, therefore being successful. This condition checks that the mean approximation ratio is above the beta* = 0.2 threshold. appr...","content":"Check whether a Q-score benchmark returned approximation ratio above beta*, therefore being successful. This condition checks that the mean approximation ratio is above the beta* = 0.2 threshold. approximation_ratio ( float ) – the mean approximation ratio of all problem graphs whether the Q-score benchmark was successful bool previous iqm.benchmarks.optimization.qscore.get_optimal_angles next iqm.benchmarks.optimization.qscore.plot_approximation_ratios By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.fidelity_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.fidelity_analysis.html","description":"Analyze counts and compute the state fidelity run ( BenchmarkRunResult ) – RunResult\\nThe RunResult object containing a dataset with counts and benchmark parameters AnalysisResult An object containing ...","content":"Analyze counts and compute the state fidelity run ( BenchmarkRunResult ) – RunResult\\nThe RunResult object containing a dataset with counts and benchmark parameters AnalysisResult An object containing the dataset, plots, and observations An object containing the dataset, plots, and observations BenchmarkAnalysisResult previous iqm.benchmarks.entanglement.ghz next iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_plots","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_plots.html","description":"Plotting and visualization utility functions Functions plot_layout_fidelity_graph (cal_url[, ...]) Plot a graph showing the quantum chip layout with fidelity information. rx_to_nx_graph (backend_coupl...","content":"Plotting and visualization utility functions Functions plot_layout_fidelity_graph (cal_url[, ...]) Plot a graph showing the quantum chip layout with fidelity information. rx_to_nx_graph (backend_coupling_map) Convert the Rustworkx graph returned by a backend to a Networkx graph. Classes GraphPositions () A class to store and generate graph positions for different chip layouts. Inheritance previous iqm.benchmarks.utils.xrvariable_to_counts next iqm.benchmarks.utils_plots.plot_layout_fidelity_graph By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job.html","description":"Submit fixed-depth parallel MRB jobs for execution in the specified IQMBackend\\n:param backend_arg: the IQM backend to submit the job\\n:type backend_arg: IQMBackendBase\\n:param qubits_array: the qubits t...","content":"Submit fixed-depth parallel MRB jobs for execution in the specified IQMBackend\\n:param backend_arg: the IQM backend to submit the job\\n:type backend_arg: IQMBackendBase\\n:param qubits_array: the qubits to identify the submitted job\\n:type qubits_array: List[int]\\n:param depth: the depth (number of canonical layers) of the circuits to identify the submitted job\\n:type depth: int\\n:param sorted_transpiled_circuit_dicts: A dictionary containing all MRB circuits\\n:type sorted_transpiled_circuit_dicts: Dict[Tuple[int,…], List[QuantumCircuit]]\\n:param shots: the number of shots to submit the job\\n:type shots: int\\n:param calset_id: the calibration identifier\\n:type calset_id: Optional[str]\\n:param max_gates_per_batch: the maximum number of gates per batch to submit the job\\n:type max_gates_per_batch: Optional[str]\\n:param max_circuits_per_batch: the maximum number of circuits per batch to submit the job.\\n:type max_circuits_per_batch: Optional[int] Dict with qubit layout, submitted job objects, type (vanilla/DD) and submission time backend_arg ( IQMBackendBase ) – qubits_array ( List [ List [ int ] ] ) – depth ( int ) – sorted_transpiled_circuit_dicts ( Dict [ Tuple [ int , ... ] , List [ IQMCircuit ] ] ) – shots ( int ) – calset_id ( str | None ) – max_gates_per_batch ( str | None ) – max_circuits_per_batch ( int | None ) – Dict [ str , Any ] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_plots.GraphPositions","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_plots.GraphPositions.html","description":"Bases: object A class to store and generate graph positions for different chip layouts. This class contains predefined node positions for various quantum chip topologies and\\nprovides methods to genera...","content":"Bases: object A class to store and generate graph positions for different chip layouts. This class contains predefined node positions for various quantum chip topologies and\\nprovides methods to generate positions for different layout types. Mapping of node indices to (x,y) positions for Garnet chip. Dict[ int , Tuple[ int , int ]] Mapping of node indices to (x,y) positions for Deneb chip. Dict[ int , Tuple[ int , int ]] Mapping of chip names to their position dictionaries. Dict[ str , Dict[ int , Tuple[ int , int ]]] Attributes deneb_positions  garnet_positions  predefined_stations  Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). create_positions (graph[, topology]) Generate node positions for a given graph and topology. Generate node positions for a given graph and topology. graph ( PyGraph ) – The graph to generate positions for. topology ( Optional [ Literal [ \\"star\\" , \\"crystal\\" ] ] ) – The type of layout to generate. Must be either “star” or “crystal”. A dictionary mapping node indices to (x,y) coordinates. Dict[ int , Tuple[ float , float ]] previous iqm.benchmarks.utils_plots.rx_to_nx_graph next iqm.benchmarks.utils_shadows By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.html","description":"GHZ verifies the generation of Greenberger-Horne-Zeilinger states\\nGraph State estimates the amount of bipartite entanglement of native graph states Subpackages and modules ghz GHZ state benchmark grap...","content":"GHZ verifies the generation of Greenberger-Horne-Zeilinger states\\nGraph State estimates the amount of bipartite entanglement of native graph states Subpackages and modules ghz GHZ state benchmark graph_states Graph states benchmark previous iqm.benchmarks.circuit_containers.Circuits next iqm.benchmarks.entanglement.ghz By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.split_sequence_in_chunks","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.split_sequence_in_chunks.html","description":"Split a given Sequence into chunks of a given split size, return as a List of Sequences. sequence_in ( Sequence [ Any ] ) – The input list. split_size ( int ) – The split size. A List of Sequences. Li...","content":"Split a given Sequence into chunks of a given split size, return as a List of Sequences. sequence_in ( Sequence [ Any ] ) – The input list. split_size ( int ) – The split size. A List of Sequences. List[Sequence[Any]] previous iqm.benchmarks.utils.sort_batches_by_final_layout next iqm.benchmarks.utils.submit_execute By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.html","description":"Bases: object A dataclass storing the results of the analysis. The result consists of a dataset, plots, and observations. Plots are defined as a dictionary\\nthat maps a plot name to a figure. Observati...","content":"Bases: object A dataclass storing the results of the analysis. The result consists of a dataset, plots, and observations. Plots are defined as a dictionary\\nthat maps a plot name to a figure. Observations are key-value pairs of data that contain the\\nmain results of the benchmark. Attributes circuits  dataset  plots  observations  Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). from_run_result (run) Creates a new AnalysisResult from a RunResult . plot (plot_name) Plots the given figure. plot_all () Plots all the figures defined for the analysis. dataset ( Dataset ) – circuits ( Circuits | None ) – plots ( dict [ str , Figure ] ) – observations ( list [ BenchmarkObservation ] ) – Plots the given figure. plot_name ( str ) – Name of the figure to be plotted. Plots all the figures defined for the analysis. Creates a new AnalysisResult from a RunResult . run ( BenchmarkRunResult ) – A run for which analysis result is created. previous iqm.benchmarks.benchmark_definition.Benchmark next iqm.benchmarks.benchmark_definition.BenchmarkObservation By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix.html","description":"Convert a flat list to a matrix of shape (num_circ_samples, num_pauli_samples).\\n:param input_list: the input flat list\\n:type input_list: List[Any]\\n:param num_circ_samples: the number of sets of Pauli-...","content":"Convert a flat list to a matrix of shape (num_circ_samples, num_pauli_samples).\\n:param input_list: the input flat list\\n:type input_list: List[Any]\\n:param num_circ_samples: the number of sets of Pauli-dressed circuit samples\\n:type num_circ_samples: int\\n:param num_pauli_samples: the number of Pauli samples per circuit\\n:type num_pauli_samples: int ValueError – Length of passed list is not (num_circ_samples * num_pauli_samples). the matrix List[List[Any]] input_list ( List [ Any ] ) – num_circ_samples ( int ) – num_pauli_samples ( int ) – previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std.html","description":"Computes the cumulative standard deviation heavy output probabilities of a QV experiment. hops ( List [ float ] ) – The individual heavy output probabilities for each trial. cumulative standard deviat...","content":"Computes the cumulative standard deviation heavy output probabilities of a QV experiment. hops ( List [ float ] ) – The individual heavy output probabilities for each trial. cumulative standard deviation heavy output probabilities for all trials. List[ float ] previous iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop next iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.html","description":"Bases: BenchmarkConfigurationBase Interleaved RB configuration.\\n.. attribute:: benchmark InterleavedRandomizedBenchmarking. Type[Benchmark] benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates...","content":"Bases: BenchmarkConfigurationBase Interleaved RB configuration.\\n.. attribute:: benchmark InterleavedRandomizedBenchmarking. Type[Benchmark] benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – qubits_array ( Sequence [ Sequence [ int ] ] ) – sequence_lengths ( Sequence [ int ] ) – num_circuit_samples ( int ) – parallel_execution ( bool ) – interleaved_gate ( str ) – interleaved_gate_params ( Sequence [ float ] | None ) – simultaneous_fit ( Sequence [ Literal [ 'amplitude' , 'offset' ] ] ) – The array of physical qubit labels with which to execute IRB. Sequence[Sequence[ int ]] The length of each random Clifford sequence. Sequence[ int ] The number of circuit samples to generate. int The number of measurement shots with which to execute each circuit sample. int Whether the benchmark is executed on all qubits in parallel or not.\\n* Default is False. bool The name of the gate to interleave.\\n* Should be specified as a qiskit circuit library gate name, e.g., “YGate” or “CZGate”. str Any optional parameters entering the gate.\\n* Default is None. Optional[Sequence[ float ]] Optional parameters to fit simultaneously.\\n* Default is [“amplitude”, “offset”]. Sequence[Literal[“amplitude”, “offset”]] Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  qubits_array  sequence_lengths  num_circuit_samples  parallel_execution  interleaved_gate  interleaved_gate_params  simultaneous_fit  shots  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis next iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.html","description":"This module implements the base class for defining a benchmark. Functions add_counts_to_dataset (counts, identifier, ...) Adds the counts from a cortex job result to the given dataset. default_analysi...","content":"This module implements the base class for defining a benchmark. Functions add_counts_to_dataset (counts, identifier, ...) Adds the counts from a cortex job result to the given dataset. default_analysis_function (result) The default analysis that only pass the result through. merge_datasets_dac (datasets) Merges a list of datasets recursively to minimize dataset sizes during merge show_figure (fig) Shows a closed figure. Classes Benchmark (backend, configuration, **kwargs) A base class for running cortex-based Benchmark experiments. BenchmarkAnalysisResult (dataset, circuits, ...) A dataclass storing the results of the analysis. BenchmarkObservation (name, value, identifier) Dataclass to store the main results of a single run of a Benchmark BenchmarkObservationIdentifier (qubit_indices) Identifier for observations for ease of use BenchmarkRunResult (dataset, circuits) A dataclass that stores the results of a single run of a Benchmark. Inheritance previous iqm.benchmarks.benchmark.BenchmarkConfigurationBase next iqm.benchmarks.benchmark_definition.add_counts_to_dataset By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities.html","description":"Compute the HOP of all quantum circuits. execution_results ( List [ Dict [ str , int ] ] ) – counts from execution of all quantum circuits. ideal_heavy_outputs ( List [ Dict [ str , float ] ] ) – list...","content":"Compute the HOP of all quantum circuits. execution_results ( List [ Dict [ str , int ] ] ) – counts from execution of all quantum circuits. ideal_heavy_outputs ( List [ Dict [ str , float ] ] ) – list of ideal heavy output dictionaries. the HOP of all quantum circuits. List[ float ] previous iqm.benchmarks.quantum_volume.quantum_volume next iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.html","description":"General utility functions Functions bootstrap_counts (original_counts[, ...]) Returns num_bootstrap_samples resampled copies of the original_counts. count_2q_layers (circuit_list) Calculate the number...","content":"General utility functions Functions bootstrap_counts (original_counts[, ...]) Returns num_bootstrap_samples resampled copies of the original_counts. count_2q_layers (circuit_list) Calculate the number of layers of parallel 2-qubit gates in a list of circuits. count_native_gates (backend_arg, ...) Count the number of IQM native gates of each quantum circuit in a list. extract_fidelities (cal_url) Returns couplings and CZ-fidelities from calibration data URL generate_state_tomography_circuits (qc, ...) Generate all quantum circuits required for a quantum state tomography experiment. get_Pauli_expectation (counts, pauli_label) Gets an estimate of a Pauli expectation value for a given set of counts and a Pauli measurement label. get_active_qubits (qc) Extract active qubits from a quantum circuit. get_iqm_backend (backend_label) Get the IQM backend object from a backend name (str). get_measurement_mapping (circuit) Extracts the final measurement mapping (qubits to bits) of a quantum circuit. get_neighbors_of_edges (edges, graph) Given a Sequence of edges and a graph, return all neighboring nodes of the edges. get_tomography_matrix (pauli_expectations) Reconstructs a density matrix from given Pauli expectations. marginal_distribution (prob_dist_or_counts, ...) Compute the marginal distribution over specified bits (indices). median_with_uncertainty (observations) Computes the median of a Sequence of float observations and returns value and propagated uncertainty. perform_backend_transpilation (qc_list, ...) Transpile a list of circuits to backend specifications. reduce_to_active_qubits (circuit[, ...]) Reduces a quantum circuit to only its active qubits. remove_directed_duplicates_to_list (cp_map) Remove duplicate edges from a coupling map and returns as a list of edges (as a list of pairs of vertices). retrieve_all_counts (iqm_jobs[, identifier]) Retrieve the counts from a list of IQMJob objects. retrieve_all_job_metadata (iqm_jobs) Retrieve the counts from a list of IQMJob objects. set_coupling_map (qubits, backend[, ...]) Set a coupling map according to the specified physical layout. sort_batches_by_final_layout (...) Sort batches of circuits according to the final measurement mapping in their corresponding backend. split_sequence_in_chunks (sequence_in, split_size) Split a given Sequence into chunks of a given split size, return as a List of Sequences. submit_execute (sorted_transpiled_qc_list, ...) Submit function to execute lists of quantum circuits on the specified backend, timeit (f) Calculates the amount of time a function takes to execute xrvariable_to_counts (dataset, identifier, ...) Retrieve counts from xarray dataset. previous iqm.benchmarks.readout_mitigation.M3IQM next iqm.benchmarks.utils.bootstrap_counts By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.edge_grab","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.edge_grab.html","description":"Generate a list of random layers containing single-qubit Cliffords and two-qubit gates,\\nsampled according to the edge-grab algorithm (see arXiv:2204.07568 [quant-ph]). qubit_set ( List [ int ] ) – The...","content":"Generate a list of random layers containing single-qubit Cliffords and two-qubit gates,\\nsampled according to the edge-grab algorithm (see arXiv:2204.07568 [quant-ph]). qubit_set ( List [ int ] ) – The set of qubits of the backend. n_layers ( int ) – The number of layers. backend_arg ( IQMBackendBase | str ) – IQM backend. density_2q_gates ( float ) – The expected density of 2Q gates in a circuit formed by subsequent application of layers two_qubit_gate_ensemble ( Dict [ str , float ] ) – A dictionary with keys being str specifying 2Q gates, and values being corresponding probabilities ValueError – if the probabilities in the gate ensembles do not add up to unity. the list of gate layers, in the form of quantum circuits. List[QuantumCircuit] previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs.html","description":"Submit sequential RB jobs for execution in the specified IQMBackend\\n:param qubits: the qubits to identify the submitted job\\n:type qubits: List[int]\\n:param transpiled_circuits: A dictionary containing ...","content":"Submit sequential RB jobs for execution in the specified IQMBackend\\n:param qubits: the qubits to identify the submitted job\\n:type qubits: List[int]\\n:param transpiled_circuits: A dictionary containing all MRB circuits\\n:type transpiled_circuits: Dict[str, List[QuantumCircuit]]\\n:param shots: the number of shots to submit per job\\n:type shots: int\\n:param backend_arg: the IQM backend to submit the job\\n:type backend_arg: IQMBackendBase\\n:param calset_id: the calibration identifier\\n:type calset_id: Optional[str]\\n:param max_gates_per_batch: the maximum number of gates per batch\\n:type max_gates_per_batch: Optional[int]\\n:param max_circuits_per_batch: the maximum number of circuits per batch\\n:type max_circuits_per_batch: Optional[int]\\n:param circuit_compilation_options: Compilation options passed to submit_execute\\n:type circuit_compilation_options: Optional[CircuitCompilationOptions] Dict with qubit layout, submitted job objects, type (vanilla/DD) and submission time qubits ( List [ int ] ) – transpiled_circuits ( Dict [ int , List [ IQMCircuit ] ] ) – shots ( int ) – backend_arg ( str | IQMBackendBase ) – calset_id ( str | None ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – circuit_compilation_options ( CircuitCompilationOptions | None ) – List [ Dict [ str , Any ]] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs.html","description":"Calculate the heavy output bitrstrings of a list of quantum circuits. qc_list ( List [ QuantumCircuit ] ) – the list of quantum circuits. sorted_qc_list_indices ( Dict [ Tuple , List [ int ] ] ) – dic...","content":"Calculate the heavy output bitrstrings of a list of quantum circuits. qc_list ( List [ QuantumCircuit ] ) – the list of quantum circuits. sorted_qc_list_indices ( Dict [ Tuple , List [ int ] ] ) – dictionary of indices (integers) corresponding to those in the original (untranspiled) list of circuits, with keys being final physical qubit measurements the list of heavy output dictionaries of each of the quantum circuits. List[Dict[ str , float ]] previous iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std next iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors.html","description":"Finds sets of edges with non-overlapping neighboring nodes. graph ( Sequence [ Sequence [ int ] ] ) – The input graph specified as a sequence of edges (Sequence[int]). A list of lists of edges (Tuple[...","content":"Finds sets of edges with non-overlapping neighboring nodes. graph ( Sequence [ Sequence [ int ] ] ) – The input graph specified as a sequence of edges (Sequence[int]). A list of lists of edges (Tuple[int]) from the original graph with non-overlapping neighboring nodes. List[List[Tuple[ int ]]] previous iqm.benchmarks.entanglement.graph_states next iqm.benchmarks.entanglement.graph_states.generate_graph_state By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.update_pauli_expectations","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.update_pauli_expectations.html","description":"Helper function that updates the input Pauli expectations dictionary of dictionaries (projections -> {pauli string: expectation}). pauli_expectations ( Dict [ str , Dict [ str , float ] ] ) – The Paul...","content":"Helper function that updates the input Pauli expectations dictionary of dictionaries (projections -> {pauli string: expectation}). pauli_expectations ( Dict [ str , Dict [ str , float ] ] ) – The Pauli expectations dictionary of dictionaries to update.\\n* Outermost keys are projected bitstrings; innermost are pauli strings and values are expectation values. projected_counts ( Dict [ str , Dict [ str , int ] ] ) – The corresponding projected counts dictionary of dictionaries. nonId_pauli_label ( str ) – The Pauli label to update expectations of, that should not contain identities.\\n* Pauli expectations corresponding to I are inferred and updated from counts corresponding to strings containing Z instead. The updated Pauli expectations dictionary of dictionaries (projections -> {pauli string: expectation}). Dict[ str , Dict[ str , float ]] previous iqm.benchmarks.entanglement.graph_states.state_tomography_analysis next iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis.html","description":"Performs shadow tomography analysis on the given dataset. dataset ( xr.Dataset ) – The dataset containing the experimental data. all_qubit_pairs_per_group ( Dict [ int , List [ Tuple [ int , int ] ] ]...","content":"Performs shadow tomography analysis on the given dataset. dataset ( xr.Dataset ) – The dataset containing the experimental data. all_qubit_pairs_per_group ( Dict [ int , List [ Tuple [ int , int ] ] ] ) – Dictionary mapping group indices to lists of qubit pairs. all_qubit_neighbors_per_group ( Dict [ int , List [ List [ int ] ] ] ) – Dictionary mapping group indices to lists of neighbor qubit groups. all_unprojected_qubits ( Dict [ int , List [ int ] ] ) – Dictionary mapping group indices to lists of unprojected qubits. backend_name ( str ) – The name of the backend used for the experiment. execution_timestamp ( str ) – The timestamp of the experiment execution. A tuple containing: A dictionary of plots. A list of benchmark observations. A dictionary of maximum negativities. The updated dataset. A dictionary of plots. A list of benchmark observations. A dictionary of maximum negativities. The updated dataset. Tuple[Dict[ str , Any], List[ BenchmarkObservation ], Dict[ str , Dict[ str , str | float ]], xr.Dataset] previous iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph next iqm.benchmarks.entanglement.graph_states.state_tomography_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.html","description":"Bases: BenchmarkConfigurationBase Mirror RB configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( s...","content":"Bases: BenchmarkConfigurationBase Mirror RB configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – qubits_array ( Sequence [ Sequence [ int ] ] ) – depths_array ( Sequence [ Sequence [ int ] ] ) – num_circuit_samples ( int ) – num_pauli_samples ( int ) – qiskit_optim_level ( int ) – two_qubit_gate_ensemble ( Dict [ str , float ] ) – density_2q_gates ( float ) – MirrorRandomizedBenchmarking. Type[ Benchmark ] The array of physical qubits in which to execute MRB. Sequence[Sequence[ int ]] The array of physical depths in which to execute MRB for a corresponding qubit list.\\n* If len is the same as that of qubits_array, each Sequence[int] corresponds to the depths for the corresponding layout of qubits.\\n* If len is different from that of qubits_array, assigns the first Sequence[int]. Sequence[Sequence[ int ]] The number of random-layer mirror circuits to generate. int The number of random Pauli layers to interleave per mirror circuit. int The number of measurement shots to execute per circuit. int The Qiskit-level of optimization to use in transpilation.\\n* Default is 1. int The routing method to use in transpilation.\\n* Default is “sabre”. Literal[“basic”, “lookahead”, “stochastic”, “sabre”, “none”] The two-qubit gate ensemble to use in the random mirror circuits.\\n* Keys correspond to str names of qiskit circuit library gates, e.g., “CZGate” or “CXGate”.\\n* Values correspond to the probability for the respective gate to be sampled.\\n* Default is {“CZGate”: 1.0}. Dict[ str , float ] The expected density of 2-qubit gates in the final circuits.\\n* Default is 0.25. float Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  qubits_array  depths_array  num_circuit_samples  num_pauli_samples  qiskit_optim_level  two_qubit_gate_ensemble  density_2q_gates  shots  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.count_native_gates","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.count_native_gates.html","description":"Count the number of IQM native gates of each quantum circuit in a list. backend_arg ( str | IQMBackendBase ) – The backend, either specified as str or as IQMBackendBase. transpiled_qc_list ( List [ IQ...","content":"Count the number of IQM native gates of each quantum circuit in a list. backend_arg ( str | IQMBackendBase ) – The backend, either specified as str or as IQMBackendBase. transpiled_qc_list ( List [ IQMCircuit ] ) – a list of quantum circuits transpiled to [‘r’,’cz’,’barrier’,’measure’] gate set. Dictionary with outermost keys being native operations. values being Dict[str, float] with mean and standard deviation values of native operation counts. outermost keys being native operations. values being Dict[str, float] with mean and standard deviation values of native operation counts. Dict [ str , Dict [ str , float ]] previous iqm.benchmarks.utils.count_2q_layers next iqm.benchmarks.utils.extract_fidelities By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords.html","description":"Import native gate Clifford dictionaries system_size ( str , optional ) – System size to load, either “1q” or “2q”. If None, load both dictionaries. If system_size is specified, returns the dictionary...","content":"Import native gate Clifford dictionaries system_size ( str , optional ) – System size to load, either “1q” or “2q”. If None, load both dictionaries. If system_size is specified, returns the dictionary for that system size.\\nIf system_size is None, returns a tuple of (1q_dict, 2q_dict). ValueError – If system_size is not None, “1q”, or “2q”. Dict [ str , IQMCircuit ] | Tuple [ Dict [ str , IQMCircuit ], Dict [ str , IQMCircuit ]] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney.html","description":"Generates a GHZ state in log-depth according to https://arxiv.org/abs/2101.08946 :param num_qubits: the number of qubits of the GHZ state A quantum circuit generating a GHZ state on a given number of ...","content":"Generates a GHZ state in log-depth according to https://arxiv.org/abs/2101.08946 :param num_qubits: the number of qubits of the GHZ state A quantum circuit generating a GHZ state on a given number of qubits. QuantumCircuit num_qubits ( int ) – previous iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz next iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.get_cx_map","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.get_cx_map.html","description":"Calculate the cx_map based on participating qubits and the 2QB gate fidelities between them. Uses networkx graph algorithms to calculate the minimal spanning tree of the subgraph defined by qubit_layo...","content":"Calculate the cx_map based on participating qubits and the 2QB gate fidelities between them. Uses networkx graph algorithms to calculate the minimal spanning tree of the subgraph defined by qubit_layout.\\nThe weights are -log(CZ fidelity) for each edge. Then, finds the qubit in the most central position\\nby calculating the distances between all qubits. Next, adds CX applications to the list, starting\\nfrom the central qubit, such that the smallest number of layers is executed (most parallel). qubit_layout ( List [ int ] ) – List[int]\\nThe subset of system-qubits used in the protocol, indexed from 0 graph ( Graph ) – networkx.Graph\\nThe connectivity graph with edge weight given by CZ fidelities List[List[int]] A list of CX gates for the GHZ generation circuit, starting from the first gate to be applied A list of CX gates for the GHZ generation circuit, starting from the first gate to be applied cx_map previous iqm.benchmarks.entanglement.ghz.generate_ghz_star next iqm.benchmarks.entanglement.ghz.get_edges By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1.html","description":"Calculates the optimal angles for single layer QAOA MaxCut ansatz. graph ( networkx graph ) – the MaxCut problem graph. optimal angles gamma and beta. List[ float ] previous iqm.benchmarks.optimizatio...","content":"Calculates the optimal angles for single layer QAOA MaxCut ansatz. graph ( networkx graph ) – the MaxCut problem graph. optimal angles gamma and beta. List[ float ] previous iqm.benchmarks.optimization.qscore next iqm.benchmarks.optimization.qscore.compute_expectation_value By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.html","description":"Mirror RB reflects the fidelity of mirror circuits Subpackages and modules mirror_rb Mirror Randomized Benchmarking. previous iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.Inter...","content":"Mirror RB reflects the fidelity of mirror circuits Subpackages and modules mirror_rb Mirror Randomized Benchmarking. previous iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.plot_fidelities","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.plot_fidelities.html","description":"Plots all the fidelities stored in the observations into a single plot of fidelity vs. number of qubits observations ( List [ BenchmarkObservation ] ) – A list of Observations, each assumed to be a fi...","content":"Plots all the fidelities stored in the observations into a single plot of fidelity vs. number of qubits observations ( List [ BenchmarkObservation ] ) – A list of Observations, each assumed to be a fidelity dataset ( xr.Dataset ) – The experiment dataset containing results and metadata qubit_layouts ( List [ List [ int ] ] ) – The list of qubit layouts as given by the user. This is used to name the layouts in order for identification\\nin the plot. fig – The figure object with the fidelity plot. Figure previous iqm.benchmarks.entanglement.ghz.get_edges next iqm.benchmarks.entanglement.ghz.GHZBenchmark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.html","description":"Interleaved Clifford Randomized Benchmarking. Functions interleaved_rb_analysis (run) Analysis function for an Interleaved RB experiment Classes InterleavedRBConfiguration (*, benchmark, ...) Interlea...","content":"Interleaved Clifford Randomized Benchmarking. Functions interleaved_rb_analysis (run) Analysis function for an Interleaved RB experiment Classes InterleavedRBConfiguration (*, benchmark, ...) Interleaved RB configuration. InterleavedRandomizedBenchmarking (...) Interleaved RB estimates the average gate fidelity of a specific Clifford gate Inheritance previous iqm.benchmarks.randomized_benchmarking.interleaved_rb next iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_shadows.get_local_shadow","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_shadows.get_local_shadow.html","description":"Constructs shadows for each individual initialisation. counts ( Dict [ str , int ] ) – a dictionary of bit-string counts. unitary_arg ( np.ndarray | Sequence [ str ] ) – local random unitaries used fo...","content":"Constructs shadows for each individual initialisation. counts ( Dict [ str , int ] ) – a dictionary of bit-string counts. unitary_arg ( np.ndarray | Sequence [ str ] ) – local random unitaries used for a given initialisation, either specified as\\n- a numpy array, or\\n- a Sequence of Clifford labels. subsystem_bit_indices ( Sequence [ int ] ) – Bit indices in the counts of the subsystem to construct the shadow of. clifford_or_haar ( Literal [ \\"clifford\\" , \\"haar\\" ] ) – Whether to use Clifford or Haar random 1Q gates.\\n* Default is “clifford”. cliffords_1q ( Optional [ Dict [ str , QuantumCircuit ] ] ) – dictionary of 1-qubit Cliffords in terms of IQM-native r and CZ gates\\n* Default is None. shadow of considered subsystem. np.ndarray previous iqm.benchmarks.utils_shadows.CUE next iqm.benchmarks.utils_shadows.get_negativity By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.count_2q_layers","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.count_2q_layers.html","description":"Calculate the number of layers of parallel 2-qubit gates in a list of circuits. circuit_list ( List [ QuantumCircuit ] ) – the list of quantum circuits to analyze. the number of layers of parallel 2-q...","content":"Calculate the number of layers of parallel 2-qubit gates in a list of circuits. circuit_list ( List [ QuantumCircuit ] ) – the list of quantum circuits to analyze. the number of layers of parallel 2-qubit gates in the list of circuits. List[ int ] previous iqm.benchmarks.utils.bootstrap_counts next iqm.benchmarks.utils.count_native_gates By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.circuit_containers.Circuits","url":"/iqm-benchmarks/api/iqm.benchmarks.circuit_containers.Circuits.html","description":"Bases: object Container for all the BenchmarkCircuit that are generated in a single benchmark execution. benchmark_circuits ( List [ BenchmarkCircuit ] ) – List of BenchmarkCircuit contained. List[ iq...","content":"Bases: object Container for all the BenchmarkCircuit that are generated in a single benchmark execution. benchmark_circuits ( List [ BenchmarkCircuit ] ) – List of BenchmarkCircuit contained. List[ iqm.benchmarks.circuit_containers.BenchmarkCircuit ] Attributes benchmark_circuits  Methods __eq__ (other) Return self==value. __getitem__ (key)  __repr__ () Return repr(self). __setitem__ (key, value)  get_benchmark_circuits_by_name (name) Returned the BenchmarkCircuit by name. Returned the BenchmarkCircuit by name. name ( str ) – Name of the requested BenchmarkCircuit as a string The requested BenchmarkCircuit if it exists, None otherwise BenchmarkCircuit | None previous iqm.benchmarks.circuit_containers.CircuitGroup next iqm.benchmarks.entanglement By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel.html","description":"Estimates marginalized survival probabilities from a parallel RB execution (at fixed depth)\\n:param qubits_array: List of qubits in which the experiment was performed\\n:type qubits_array: List[int]\\n:par...","content":"Estimates marginalized survival probabilities from a parallel RB execution (at fixed depth)\\n:param qubits_array: List of qubits in which the experiment was performed\\n:type qubits_array: List[int]\\n:param counts: The measurement counts for corresponding bitstrings\\n:type counts: Dict[str, int] The survival probabilities for each qubit Dict[ str , List[ float ]] qubits_array ( List [ List [ int ] ] ) – counts ( List [ Dict [ str , int ] ] ) – previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits.html","description":"Generates a dictionary MRB circuits at fixed depth, indexed by sample number qubits ( List [ int ] ) – A list of integers specifying physical qubit labels circ_samples ( int ) – The number of sets of ...","content":"Generates a dictionary MRB circuits at fixed depth, indexed by sample number qubits ( List [ int ] ) – A list of integers specifying physical qubit labels circ_samples ( int ) – The number of sets of Pauli-dressed circuit samples pauli_samples_per_circ ( int ) – the number of pauli samples per circuit depth ( int ) – the depth (number of canonical layers) of the circuits backend_arg ( IQMBackendBase | str ) – the backend density_2q_gates ( float ) – two_qubit_gate_ensemble ( Optional [ Dict [ str , float ] ] ) – qiskit_optim_level ( int ) – routing_method ( str ) – A dictionary of lists of Pauli-dressed quantum circuits corresponding to the circuit sample index Dict [ int , Dict [ str , List [ IQMCircuit ]]] previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.edge_grab next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer.html","description":"fit_parameters ( Parameters ) – the parameters to fit fit_data ( np.ndarray ) – the data to fit depths ( List [ int ] ) – the depths of the RB experiment func ( Callable ) – the model function for fit...","content":"fit_parameters ( Parameters ) – the parameters to fit fit_data ( np.ndarray ) – the data to fit depths ( List [ int ] ) – the depths of the RB experiment func ( Callable ) – the model function for fitting the result of the minimization MinimizerResult previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb.html","description":"Fit function for interleaved/non-interleaved RB depths ( np.ndarray ) – the depths of the RB experiment depolarization_probability ( float ) – the depolarization value (1-p) of the RB decay offset ( f...","content":"Fit function for interleaved/non-interleaved RB depths ( np.ndarray ) – the depths of the RB experiment depolarization_probability ( float ) – the depolarization value (1-p) of the RB decay offset ( float ) – the offset of the RB decay amplitude ( float ) – the amplitude of the RB decay the exponential fit function np.ndarray previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.logging_config","url":"/iqm-benchmarks/api/iqm.benchmarks.logging_config.html","description":"Module to initialize logger. Should be used in every module to output information/warnings. previous iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration next iqm.benchmarks.optimization B...","content":"Module to initialize logger. Should be used in every module to output information/warnings. previous iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration next iqm.benchmarks.optimization By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.state_tomography_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.state_tomography_analysis.html","description":"Performs state tomography analysis on the given dataset. dataset ( xr.Dataset ) – The dataset containing the experimental data. all_qubit_pairs_per_group ( Dict [ int , List [ Tuple [ int , int ] ] ] ...","content":"Performs state tomography analysis on the given dataset. dataset ( xr.Dataset ) – The dataset containing the experimental data. all_qubit_pairs_per_group ( Dict [ int , List [ Tuple [ int , int ] ] ] ) – Dictionary mapping group indices to lists of qubit pairs. all_qubit_neighbors_per_group ( Dict [ int , List [ List [ int ] ] ] ) – Dictionary mapping group indices to lists of neighbor qubit groups. all_unprojected_qubits ( Dict [ int , List [ int ] ] ) – Dictionary mapping group indices to lists of unprojected qubits. backend_name ( str ) – The name of the backend used for the experiment. execution_timestamp ( str ) – The timestamp of the experiment execution. A tuple containing: A dictionary of plots. A list of benchmark observations. A dictionary of maximum negativities. The updated dataset. A dictionary of plots. A list of benchmark observations. A dictionary of maximum negativities. The updated dataset. Tuple[Dict[ str , Any], List[ BenchmarkObservation ], Dict[ str , Dict[ str , float ]], xr.Dataset] previous iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis next iqm.benchmarks.entanglement.graph_states.update_pauli_expectations By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits.html","description":"where for each circuit, random Pauli layers are interleaved between each layer of the circuit qubits ( List [ int ] ) – the qubits of the backend pauli_samples_per_circ ( int ) – the number of pauli s...","content":"where for each circuit, random Pauli layers are interleaved between each layer of the circuit qubits ( List [ int ] ) – the qubits of the backend pauli_samples_per_circ ( int ) – the number of pauli samples per circuit depth ( int ) – the depth (number of canonical layers) of the circuit backend_arg ( IQMBackendBase | str ) – the backend density_2q_gates ( float ) – the expected density of 2Q gates two_qubit_gate_ensemble ( Optional [ Dict [ str , float ] ] ) – qiskit_optim_level ( int ) – routing_method ( str ) – Dict [ str , List [ IQMCircuit ]] Returns: previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.sort_batches_by_final_layout","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.sort_batches_by_final_layout.html","description":"Sort batches of circuits according to the final measurement mapping in their corresponding backend. transpiled_circuit_list ( List [ QuantumCircuit ] ) – the list of circuits transpiled to a given bac...","content":"Sort batches of circuits according to the final measurement mapping in their corresponding backend. transpiled_circuit_list ( List [ QuantumCircuit ] ) – the list of circuits transpiled to a given backend. dictionary, keys: final measured qubits, values: corresponding circuits.\\nsorted_indices (Dict[Tuple, List[int]]): dictionary, keys: final measured qubits, values: corresponding circuit indices. sorted_circuits (Dict[Tuple, List[QuantumCircuit]]) previous iqm.benchmarks.utils.set_coupling_map next iqm.benchmarks.utils.split_sequence_in_chunks By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.generate_ghz_star","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.generate_ghz_star.html","description":"Generates the circuit for creating a GHZ state by maximizing the number of CZ gates between a pair of MOVE gates.\\n:param num_qubits: the number of qubits of the GHZ state A quantum circuit generating ...","content":"Generates the circuit for creating a GHZ state by maximizing the number of CZ gates between a pair of MOVE gates.\\n:param num_qubits: the number of qubits of the GHZ state A quantum circuit generating a GHZ state on a given number of qubits. QuantumCircuit num_qubits ( int ) – previous iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree next iqm.benchmarks.entanglement.ghz.get_cx_map By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks","url":"/iqm-benchmarks/api/iqm.benchmarks.html","description":"IQM’s Python Library Benchmarking Suite QCVV. Subpackages and modules benchmark Generic Benchmark class benchmark_definition This module implements the base class for defining a benchmark. circuit_con...","content":"IQM’s Python Library Benchmarking Suite QCVV. Subpackages and modules benchmark Generic Benchmark class benchmark_definition This module implements the base class for defining a benchmark. circuit_containers This module contains classes to easily interact with quantum circuits entanglement GHZ verifies the generation of Greenberger-Horne-Zeilinger states Graph State estimates the amount of bipartite entanglement of native graph states logging_config Module to initialize logger. optimization Q-score estimates the size of combinatorial optimization problems a given number of qubits can execute with meaningful results. quantum_volume Quantum Volume reflects the deepest circuit a given number of qubits can execute with meaningful results. randomized_benchmarking Randomized Benchmarking reflects the fidelity of a gate or operation on a number of qubits readout_mitigation M3 modification for readout mitigation at IQM QPU's. utils General utility functions utils_plots Plotting and visualization utility functions utils_shadows Shadow Tomography utility functions previous API Reference next iqm.benchmarks.benchmark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.BenchmarkObservation","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.BenchmarkObservation.html","description":"Bases: object Dataclass to store the main results of a single run of a Benchmark name ( str ) – value ( Any ) – identifier ( BenchmarkObservationIdentifier ) – uncertainty ( Any | None ) – name of the...","content":"Bases: object Dataclass to store the main results of a single run of a Benchmark name ( str ) – value ( Any ) – identifier ( BenchmarkObservationIdentifier ) – uncertainty ( Any | None ) – name of the observation str value of the observation Any identifier, which should be a string of the qubit layout iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier uncertainty of the observation Any | None Attributes uncertainty  name  value  identifier  Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). previous iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult next iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector.html","description":"Project (select) the samples from a given probability distribution onto heavy outputs. probabilities ( Dict [ str , float ] ) – A dictionary of bitstrings and associated probabilities. The dictionary ...","content":"Project (select) the samples from a given probability distribution onto heavy outputs. probabilities ( Dict [ str , float ] ) – A dictionary of bitstrings and associated probabilities. The dictionary of heavy output bitstrings, all with weight 1. Dict[ str , float ] previous iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops next iqm.benchmarks.quantum_volume.quantum_volume.is_successful By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.html","description":"Randomized Benchmarking reflects the fidelity of a gate or operation on a number of qubits Subpackages and modules clifford_rb Clifford RB reflects the fidelity of Clifford gates interleaved_rb Interl...","content":"Randomized Benchmarking reflects the fidelity of a gate or operation on a number of qubits Subpackages and modules clifford_rb Clifford RB reflects the fidelity of Clifford gates interleaved_rb Interleaved RB reflects the fidelity of a given gate mirror_rb Mirror RB reflects the fidelity of mirror circuits multi_lmfit Lmfit for multiple datasets, generalized and extended version of the shown example in the lmfit documentation: https://lmfit.github.io/lmfit-py/examples/example_fit_multi_datasets.html#sphx-glr-examples-example-fit-multi-datasets-py randomized_benchmarking_common Common functions for Randomized Benchmarking-based techniques previous iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration next iqm.benchmarks.randomized_benchmarking.clifford_rb By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.html","description":"Bases: BenchmarkConfigurationBase Clifford RB configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id (...","content":"Bases: BenchmarkConfigurationBase Clifford RB configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – qubits_array ( Sequence [ Sequence [ int ] ] ) – sequence_lengths ( Sequence [ int ] ) – num_circuit_samples ( int ) – parallel_execution ( bool ) – CliffordRandomizedBenchmarking Type[ Benchmark ] The array of qubits on which to execute the benchmark. Sequence[Sequence[ int ]] The length of Cliffords sequences with which to execute benchmark. Sequence[ int ] The number of Cliffords circuits per sequence length. int The number of measurement shots per circuit. int Whether the benchmark is executed on all qubits in parallel or not.\\n* Default is False. bool Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  qubits_array  sequence_lengths  num_circuit_samples  parallel_execution  shots  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis next iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities.html","description":"Compute a result’s probability of being on the ground state. num_qubits ( int ) – the number of qubits counts ( List [ Dict [ str , int ] ] ) – the result of the execution of a list of quantum circuit...","content":"Compute a result’s probability of being on the ground state. num_qubits ( int ) – the number of qubits counts ( List [ Dict [ str , int ] ] ) – the result of the execution of a list of quantum circuits (counts) the ground state probabilities of the RB sequence List[ float ] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.html","description":"Bases: BenchmarkConfigurationBase Graph States Benchmark configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – ...","content":"Bases: BenchmarkConfigurationBase Graph States Benchmark configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – qubits ( Sequence [ int ] ) – tomography ( Literal [ 'state_tomography' , 'shadow_tomography' ] ) – num_bootstraps ( int ) – n_random_unitaries ( int ) – n_median_of_means ( int ) – GraphStateBenchmark Type[ Benchmark ] The physical qubit layout in which to benchmark graph state generation. Sequence[ int ] Whether to use state or shadow tomography.\\n* Default is “state_tomography”. Literal[“state_tomography”, “shadow_tomography”] The amount of bootstrap samples to use with state tomography.\\n* Default is 50. int The number of Haar random single-qubit unitaries to use for (local) shadow tomography.\\n* Default is 100. int The number of mean samples over n_random_unitaries to generate a median of means estimator for shadow tomography.\\n* NB: The total amount of execution calls will be a multiplicative factor of n_random_unitaries x n_median_of_means.\\n* Default is 1 (no median of means). int Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  qubits  tomography  num_bootstraps  n_random_unitaries  n_median_of_means  shots  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark next iqm.benchmarks.logging_config By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.html","description":"Bases: BenchmarkConfigurationBase Quantum Volume configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_i...","content":"Bases: BenchmarkConfigurationBase Quantum Volume configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – num_circuits ( int ) – num_sigmas ( int ) – choose_qubits_routine ( Literal [ 'custom' ] ) – custom_qubits_array ( Sequence [ Sequence [ int ] ] ) – qiskit_optim_level ( int ) – optimize_sqg ( bool ) – rem ( bool ) – mit_shots ( int ) – QuantumVolumeBenchmark Type[ Benchmark ] The number of circuits to use.\\n* Should be at least 100 for a meaningful QV experiment. int The number of sample standard deviations to consider with for the threshold criteria.\\n* Default by consensus is 2 int The routine to select qubit layouts.\\n* Default is “custom”. Literal[“custom”] The physical qubit layouts to perform the benchmark on.\\n* Default is [[0, 2]]. Optional[Sequence[Sequence[ int ]]] The Qiskit transpilation optimization level.\\n* Default is 3. int Whether Single Qubit Gate Optimization is performed upon transpilation.\\n* Default is True. bool The Qiskit transpilation routing method to use.\\n* Default is “sabre”. Literal[“basic”, “lookahead”, “stochastic”, “sabre”, “none”] Whether the coupling map is restricted to qubits in the input layout or not.\\n- “fixed”: Restricts the coupling map to only the specified qubits.\\n- “batching”: Considers the full coupling map of the backend and circuit execution is batched per final layout.\\n* Default is “fixed” Literal[“fixed”, “batching”] Whether Readout Error Mitigation is applied in post-processing. When set to True, both results (readout-unmitigated and -mitigated) are produced.\\n- Default is True. bool The measurement shots to use for readout calibration.\\n* Default is 1_000. int Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  num_circuits  num_sigmas  choose_qubits_routine  custom_qubits_array  qiskit_optim_level  optimize_sqg  rem  mit_shots  shots  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark next iqm.benchmarks.randomized_benchmarking By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.plot_max_negativities","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities.html","description":"Plots the maximum negativity for each corresponding pair of qubits. negativities ( Dict [ str , Dict [ str , str | float ] ] ) – A dictionary (str qubit keys) of dictionaries (keys “value”/”uncertaint...","content":"Plots the maximum negativity for each corresponding pair of qubits. negativities ( Dict [ str , Dict [ str , str | float ] ] ) – A dictionary (str qubit keys) of dictionaries (keys “value”/”uncertainty”) of negativities (float) to plot. backend_name ( str ) – The name of the backend for the corresponding experiment. qubit_names ( Dict [ int , str ] ) – A dictionary of qubit names corresponding to qubit indices. timestamp ( str ) – The timestamp of the corresponding experiment. tomography ( Literal [ \\"shadow_tomography\\" , \\"state_tomography\\" ] ) – The type of tomography that was used. num_shots ( int ) – The number of shots used in the corresponding experiment. num_bootstraps ( Optional [ int ] ) – The number of bootstraps used if tomography corresponds to state tomography.\\n* Defaults to None if the tomography type is “shadow_tomography”. num_RM_samples ( Optional [ int ] ) – The number of randomized measurement samples used if tomography corresponds to shadow tomography.\\n* Defaults to None if the tomography type is “state_tomography”. num_MoMs_samples ( Optional [ int ] ) – The number of Median of Means samples per randomized measurement used if tomography corresponds to shadow tomography.\\n* Defaults to None if the tomography type is “shadow_tomography”. The figure label and the max negativities plot figure. Tuple[ str , Figure] previous iqm.benchmarks.entanglement.graph_states.plot_density_matrix next iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations.html","description":"Estimates the polarization for a list of noisy counts with respect to corresponding ideal counts\\nThe polarization here is a rescaling of the average fidelity, that corrects for few-qubit effects num_q...","content":"Estimates the polarization for a list of noisy counts with respect to corresponding ideal counts\\nThe polarization here is a rescaling of the average fidelity, that corrects for few-qubit effects num_qubits ( int ) – the number of qubits being benchmarked noisy_counts ( List [ Dict [ str , int ] ] ) – the list of counts coming from real execution ideal_counts ( List [ Dict [ str , int ] ] ) – the list of counts coming from simulated, ideal execution num_circ_samples ( int ) – the number circuit of samples used to estimate the polarization num_pauli_samples ( int ) – the number of pauli samples per circuit sample used to estimate the polarization the polarizations for each circuit sample of the given sequence length List[ float ] previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.edge_grab By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.html","description":"Bases: Benchmark Interleaved RB estimates the average gate fidelity of a specific Clifford gate Attributes name  Methods add_all_circuits_to_dataset (dataset) Adds all generated circuits during execut...","content":"Bases: Benchmark Interleaved RB estimates the average gate fidelity of a specific Clifford gate Attributes name  Methods add_all_circuits_to_dataset (dataset) Adds all generated circuits during execution to the dataset variable add_all_meta_to_dataset (dataset) Adds all configuration metadata and circuits to the dataset variable :param dataset: The xarray dataset :type dataset: xr.Dataset analysis_function (run) Analysis function for an Interleaved RB experiment execute (backend) Executes the benchmark backend_arg ( IQMBackendBase | str ) – configuration ( InterleavedRBConfiguration ) – Analysis function for an Interleaved RB experiment run ( RunResult ) – An interleaved RB experiment run for which analysis result is created AnalysisResult corresponding to Interleaved RB BenchmarkAnalysisResult Adds all configuration metadata and circuits to the dataset variable\\n:param dataset: The xarray dataset\\n:type dataset: xr.Dataset dataset ( Dataset ) – Adds all generated circuits during execution to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Returns: Executes the benchmark backend ( IQMBackendBase ) – Dataset previous iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration next iqm.benchmarks.randomized_benchmarking.mirror_rb By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.bootstrap_counts","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.bootstrap_counts.html","description":"Returns num_bootstrap_samples resampled copies of the original_counts. original_counts ( Dict [ str , int ] ) – The original dictionary of counts to bootstrap from. num_bootstrap_samples ( int ) – The...","content":"Returns num_bootstrap_samples resampled copies of the original_counts. original_counts ( Dict [ str , int ] ) – The original dictionary of counts to bootstrap from. num_bootstrap_samples ( int ) – The number of bootstrapping samples to generate.\\n* Default is 100. rgen ( Optional [ Generator ] ) – The random number generator.\\n* Default is None: assigns numpy’s default_rng(). include_original_counts ( bool ) – Whether to include the original counts in the returned bootstrapped count samples.\\n* Default is False. A list of bootstrapped counts. List[Dict[ str , int ]] previous iqm.benchmarks.utils next iqm.benchmarks.utils.count_2q_layers By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.extract_fidelities","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.extract_fidelities.html","description":"Returns couplings and CZ-fidelities from calibration data URL cal_url ( str ) – str\\nThe url under which the calibration data for the backend can be found List[List[int]] A list of pairs, each of which...","content":"Returns couplings and CZ-fidelities from calibration data URL cal_url ( str ) – str\\nThe url under which the calibration data for the backend can be found List[List[int]] A list of pairs, each of which is a qubit coupling for which the calibration\\ndata contains a fidelity. list_fids: List[float] A list of CZ fidelities from the calibration url, ordered in the same way as list_couplings topology: str Name of the chip topology layout, currently either “star” or “crystal” A list of pairs, each of which is a qubit coupling for which the calibration\\ndata contains a fidelity. A list of CZ fidelities from the calibration url, ordered in the same way as list_couplings Name of the chip topology layout, currently either “star” or “crystal” list_couplings previous iqm.benchmarks.utils.count_native_gates next iqm.benchmarks.utils.generate_state_tomography_circuits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits.html","description":"Validate qubit inputs for a Clifford RB experiment\\n:param qubits_array: the array of qubits\\n:type qubits_array: List[List[int]]\\n:param backend_arg: the IQM backend\\n:type backend_arg: IQMBackendBase Va...","content":"Validate qubit inputs for a Clifford RB experiment\\n:param qubits_array: the array of qubits\\n:type qubits_array: List[List[int]]\\n:param backend_arg: the IQM backend\\n:type backend_arg: IQMBackendBase ValueError if specified pairs of qubits are not connected – qubits_array ( List [ List [ int ] ] ) – backend_arg ( str | IQMBackendBase ) – previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate next iqm.benchmarks.readout_mitigation By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis.html","description":"Analysis function for a Quantum Volume experiment run ( RunResult ) – A Quantum Volume experiment run for which analysis result is created AnalysisResult corresponding to Quantum Volume BenchmarkAnaly...","content":"Analysis function for a Quantum Volume experiment run ( RunResult ) – A Quantum Volume experiment run for which analysis result is created AnalysisResult corresponding to Quantum Volume BenchmarkAnalysisResult previous iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold next iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_plots.rx_to_nx_graph","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_plots.rx_to_nx_graph.html","description":"Convert the Rustworkx graph returned by a backend to a Networkx graph. backend_coupling_map ( CouplingMap ) – The coupling map of the backend. The Networkx Graph corresponding to the backend graph. ne...","content":"Convert the Rustworkx graph returned by a backend to a Networkx graph. backend_coupling_map ( CouplingMap ) – The coupling map of the backend. The Networkx Graph corresponding to the backend graph. networkx.Graph previous iqm.benchmarks.utils_plots.plot_layout_fidelity_graph next iqm.benchmarks.utils_plots.GraphPositions By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.html","description":"GHZ state benchmark Functions fidelity_analysis (run) Analyze counts and compute the state fidelity fidelity_ghz_coherences (dataset, ...) Estimates the GHZ state fidelity based on the multiple quantu...","content":"GHZ state benchmark Functions fidelity_analysis (run) Analyze counts and compute the state fidelity fidelity_ghz_coherences (dataset, ...) Estimates the GHZ state fidelity based on the multiple quantum coherences method based on [Mooney, 2021] fidelity_ghz_randomized_measurements (...) Estimates GHZ state fidelity through cross-correlations of RMs. generate_ghz_linear (num_qubits) Generates a GHZ state by applying a Hadamard and a series of CX gates in a linear fashion. generate_ghz_log_cruz (num_qubits) Generates a GHZ state in log-depth according to https://arxiv.org/abs/1807.05572 :param num_qubits: the number of qubits of the GHZ state generate_ghz_log_mooney (num_qubits) Generates a GHZ state in log-depth according to https://arxiv.org/abs/2101.08946 :param num_qubits: the number of qubits of the GHZ state generate_ghz_spanning_tree (graph, qubit_layout) Generates a GHZ state in log-depth by computing a minimal spanning tree for a given coupling map. generate_ghz_star (num_qubits) Generates the circuit for creating a GHZ state by maximizing the number of CZ gates between a pair of MOVE gates. get_cx_map (qubit_layout, graph) Calculate the cx_map based on participating qubits and the 2QB gate fidelities between them. get_edges (coupling_map, qubit_layout[, ...]) Produces a networkx.Graph from coupling map fidelity information, with edges given by couplings plot_fidelities (observations, dataset, ...) Plots all the fidelities stored in the observations into a single plot of fidelity vs. Classes GHZBenchmark (backend, configuration) The GHZ Benchmark estimates the quality of generated Greenberger–Horne–Zeilinger states GHZConfiguration (*, benchmark, shots, ...) GHZ state configuration Inheritance previous iqm.benchmarks.entanglement next iqm.benchmarks.entanglement.ghz.fidelity_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.get_tomography_matrix","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.get_tomography_matrix.html","description":"Reconstructs a density matrix from given Pauli expectations. pauli_expectations ( Dict [ str , float ] ) – A dictionary of Pauli expectations, with keys being Pauli strings. ValueError – If not all 4*...","content":"Reconstructs a density matrix from given Pauli expectations. pauli_expectations ( Dict [ str , float ] ) – A dictionary of Pauli expectations, with keys being Pauli strings. ValueError – If not all 4**n Pauli expectations are specified. A tomographically reconstructed density matrix. np.ndarray previous iqm.benchmarks.utils.get_neighbors_of_edges next iqm.benchmarks.utils.marginal_distribution By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.default_analysis_function","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.default_analysis_function.html","description":"The default analysis that only pass the result through. result ( BenchmarkRunResult ) – BenchmarkAnalysisResult previous iqm.benchmarks.benchmark_definition.add_counts_to_dataset next iqm.benchmarks.b...","content":"The default analysis that only pass the result through. result ( BenchmarkRunResult ) – BenchmarkAnalysisResult previous iqm.benchmarks.benchmark_definition.add_counts_to_dataset next iqm.benchmarks.benchmark_definition.merge_datasets_dac By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.html","description":"Bases: Benchmark Quantum Volume reflects the deepest circuit a given number of qubits can execute with meaningful results. Attributes name  Methods add_all_circuits_to_dataset (dataset) Adds all gener...","content":"Bases: Benchmark Quantum Volume reflects the deepest circuit a given number of qubits can execute with meaningful results. Attributes name  Methods add_all_circuits_to_dataset (dataset) Adds all generated circuits during execution to the dataset variable add_all_meta_to_dataset (dataset) Adds all configuration metadata and circuits to the dataset variable analysis_function (run) Analysis function for a Quantum Volume experiment execute (backend) Executes the benchmark. generate_circuit_list (num_qubits[, depth, ...]) Generate a list of QV quantum circuits, with measurements at the end. generate_single_circuit (num_qubits[, depth, ...]) Generate a single QV quantum circuit, with measurements at the end. get_rem_quasidistro (...) Computes readout-error-mitigated quasiprobabilities. submit_single_qv_job (backend, qubits, ...) Submit a single set of QV jobs for execution in the specified IQMBackend: backend_arg ( IQMBackendBase | str ) – configuration ( QuantumVolumeConfiguration ) – Analysis function for a Quantum Volume experiment run ( RunResult ) – A Quantum Volume experiment run for which analysis result is created AnalysisResult corresponding to Quantum Volume BenchmarkAnalysisResult Adds all configuration metadata and circuits to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Adds all generated circuits during execution to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Returns: Generate a single QV quantum circuit, with measurements at the end. num_qubits ( int ) – number of qubits of the circuit depth ( Optional [ int ] ) – The depth of the QV circuit. Defaults to None, which makes it equal to the number of\\nqubits. classical_permutation ( bool , optional ) – Whether permutations are classical, avoiding swapping layers.\\n* Defaults to True. the QV quantum circuit. QuantumCircuit Generate a list of QV quantum circuits, with measurements at the end. num_qubits ( int ) – the number of qubits of the circuits. depth ( Optional [ int ] ) – The depth of the QV circuit. Defaults to None, which makes it equal to the number of qubits. classical_permutations ( bool , optional ) – Whether permutations are classical, avoiding swapping layers.\\n* Defaults to True. the list of QV quantum circuits. List[QuantumCircuit] Computes readout-error-mitigated quasiprobabilities. sorted_transpiled_qc_list ( Dict [ Tuple , List [ QuantumCircuit ] ] ) – A dictionary of lists of quantum circuits, indexed by qubiy layouts. sorted_qc_list_indices ( Dict [ Tuple , List [ int ] ] ) – dictionary of indices (integers) corresponding to those in the original (untranspiled) list of circuits, with keys being final physical qubit measurements. execution_results ( List [ Dict [ str , int ] ] ) – counts from execution of all quantum circuits. mit_shots ( int ) – The number of measurement shots to estimate the readout calibration errors. A list of lists of quasiprobabilities. List [ List [ QuasiCollection ]] Organizes the results in a dictionary with the qubit layout, the submitted job objects, the type of QV results and submission time. backend ( IQMBackendBase ) – the IQM backend to submit the job. qubits ( List [ int ] ) – the qubits to identify the submitted job. sorted_transpiled_qc_list ( Dict [ Tuple [ int , ... ] | str , List [ QuantumCircuit ] ] ) – A dictionary of Lists of quantum circuits. Dict with qubit layout, submitted job objects, type (vanilla/DD) and submission time. Dict [ str , Any ] Executes the benchmark. backend ( IQMBackendBase ) – Dataset previous iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis next iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.submit_execute","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.submit_execute.html","description":"organized as a dictionary with keys being identifiers of a batch (normally qubits) and values corresponding lists of quantum circuits.\\nThe result is returned as a single list of IQMJob objects. sorted...","content":"organized as a dictionary with keys being identifiers of a batch (normally qubits) and values corresponding lists of quantum circuits.\\nThe result is returned as a single list of IQMJob objects. sorted_transpiled_qc_list ( Dict [ Tuple [ int ] | str , List [ QuantumCircuit ] ] ) – A dictionary of lists of quantum circuits to be executed.\\n* The keys (Tuple[int] | str) should correspond to final measured qubits.\\n* The values (List[QuantumCircuit]) should be the corresponding list (batch) of quantum circuits. backend ( IQMBackendBase ) – the backend to execute the circuits on. shots ( int ) – the number of shots per circuit. calset_id ( Optional [ str ] ) – the calibration set ID.\\n* Default is None: uses the latest calibration ID. max_gates_per_batch ( Optional [ int ] ) – the maximum number of gates per batch sent to the backend, used to make manageable batches.\\n* Default is None. max_circuits_per_batch ( Optional [ int ] ) – the maximum number of circuits per batch sent to the backend, used to make manageable batches.\\n* Default is None. circuit_compilation_options ( CircuitCompilationOptions ) – Ability to pass a compilation options object,\\nenabling execution with dynamical decoupling, among other options - see qiskit-iqm documentation.\\n* Default is None. a list of IQMJob objects corresponding to the submitted circuits. List[IQMJob] previous iqm.benchmarks.utils.split_sequence_in_chunks next iqm.benchmarks.utils.timeit By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.negativity_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.negativity_analysis.html","description":"Analysis function for a Graph State benchmark experiment. run ( BenchmarkRunResult ) – BenchmarkAnalysisResult previous iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers next iqm.b...","content":"Analysis function for a Graph State benchmark experiment. run ( BenchmarkRunResult ) – BenchmarkAnalysisResult previous iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers next iqm.benchmarks.entanglement.graph_states.plot_density_matrix By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.cut_cost_function","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.cut_cost_function.html","description":"Returns the number of cut edges in a graph (with minus sign). x ( str ) – solution bitstring. graph ( networkx graph ) – the MaxCut problem graph. number of cut edges multiplied by -1. obj ( float ) p...","content":"Returns the number of cut edges in a graph (with minus sign). x ( str ) – solution bitstring. graph ( networkx graph ) – the MaxCut problem graph. number of cut edges multiplied by -1. obj ( float ) previous iqm.benchmarks.optimization.qscore.create_objective_function next iqm.benchmarks.optimization.qscore.get_optimal_angles By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.generate_state_tomography_circuits","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.generate_state_tomography_circuits.html","description":"Generate all quantum circuits required for a quantum state tomography experiment. qc ( QuantumCircuit ) – The quantum circuit. active_qubits ( Sequence [ int ] ) – The qubits to perform tomograhy on. ...","content":"Generate all quantum circuits required for a quantum state tomography experiment. qc ( QuantumCircuit ) – The quantum circuit. active_qubits ( Sequence [ int ] ) – The qubits to perform tomograhy on. measure_other ( Optional [ Sequence [ int ] ] ) – Whether to measure other qubits in the qc QuantumCircuit.\\n* Default is None. measure_other_name ( Optional [ str ] ) – Name of the classical register to assign measure_other. native ( bool ) – Whether circuits are prepared using IQM-native gates.\\n* Default is True. A dictionary with keys being Pauli (measurement) strings and values the respective circuit. Pauli strings are ordered for qubit labels in increasing order, e.g., “XY” for active_qubits 4, 1 corresponds to “X” measurement on qubit 1 and “Y” measurement on qubit 4. Pauli strings are ordered for qubit labels in increasing order, e.g., “XY” for active_qubits 4, 1 corresponds to “X” measurement on qubit 1 and “Y” measurement on qubit 4. Dict[ str , QuantumCircuit] previous iqm.benchmarks.utils.extract_fidelities next iqm.benchmarks.utils.get_Pauli_expectation By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.median_with_uncertainty","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.median_with_uncertainty.html","description":"Computes the median of a Sequence of float observations and returns value and propagated uncertainty.\\nReference: https://mathworld.wolfram.com/StatisticalMedian.html observations ( Sequence [ float ] ...","content":"Computes the median of a Sequence of float observations and returns value and propagated uncertainty.\\nReference: https://mathworld.wolfram.com/StatisticalMedian.html observations ( Sequence [ float ] ) – a Sequence of floating-point numbers. a dictionary with keys “value” and “uncertainty” for the median of the input Sequence. Dict[ str , float ] previous iqm.benchmarks.utils.marginal_distribution next iqm.benchmarks.utils.perform_backend_transpilation By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.reduce_to_active_qubits","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.reduce_to_active_qubits.html","description":"Reduces a quantum circuit to only its active qubits. backend_topology ( Optional [ str ] ) – The backend topology to execute the benchmark on. circuit ( QuantumCircuit ) – The original quantum circuit...","content":"Reduces a quantum circuit to only its active qubits. backend_topology ( Optional [ str ] ) – The backend topology to execute the benchmark on. circuit ( QuantumCircuit ) – The original quantum circuit. backend_num_qubits ( int ) – The number of qubits in the backend. A new quantum circuit containing only active qubits. QuantumCircuit previous iqm.benchmarks.utils.perform_backend_transpilation next iqm.benchmarks.utils.remove_directed_duplicates_to_list By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.Benchmark","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.Benchmark.html","description":"Bases: ABC A base class for running cortex-based Benchmark experiments. In order to write a new benchmark, it is recommended to derive a class\\nfrom this baseclass. A new benchmark is defined by derivi...","content":"Bases: ABC A base class for running cortex-based Benchmark experiments. In order to write a new benchmark, it is recommended to derive a class\\nfrom this baseclass. A new benchmark is defined by deriving from this base\\nclass and implementing the execute method. Additionally, a custom analysis\\nfor the benchmark can be implemented by giving the pointer to the analysis\\nmethod in analysis_function field. The given analysis_function should\\naccept AnalysisResult as its input and return the final result. Attributes default_options  options  Methods analysis_function (result) The default analysis that only pass the result through. analyze ([run_index]) The default analysis for the benchmark. execute (backend) Executes the benchmark. name () Return the name of the benchmark. run ([calibration_set_id]) Runs the benchmark using the given backend and calibration_set_id. backend ( str | IQMBackendBase ) – configuration ( BenchmarkConfigurationBase ) – The default analysis that only pass the result through. result ( BenchmarkRunResult ) – BenchmarkAnalysisResult Return the name of the benchmark. Executes the benchmark. This method should be overridden by deriving classes. backend ( IQMBackend | IQMFacadeBackend | str ) – Qiskit backend used to execute benchmarks. An xarray dataset which contains to results of the benchmark execution.\\nThe dataset should contain all the information necessary for analysing\\nthe benchmark results. Dataset Runs the benchmark using the given backend and calibration_set_id. calibration_set_id ( str | UUID | None ) – CalibrationSetId used to initialize the backend or None for the latest calibration set. The result of the benchmark run. RunResult The default analysis for the benchmark. Internally uses the function defined by the attribute analysis_function to perform the analysis. This function makes a shallow copy of the dataset produced by\\nrun. Therefore, it is recommended to not make changes to the data of the dataset but\\njust the structure of the array. run_index – Index for the run to analyze. An analysis result constructed from the run and updated by the analysis method defined by\\nthe analysis_function field. BenchmarkAnalysisResult previous iqm.benchmarks.benchmark_definition.show_figure next iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.retrieve_all_counts","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.retrieve_all_counts.html","description":"Retrieve the counts from a list of IQMJob objects.\\n:param iqm_jobs: The list of IQMJob objects.\\n:type iqm_jobs: List[IQMJob]\\n:param identifier: a string identifying the job.\\n:type identifier: Optional...","content":"Retrieve the counts from a list of IQMJob objects.\\n:param iqm_jobs: The list of IQMJob objects.\\n:type iqm_jobs: List[IQMJob]\\n:param identifier: a string identifying the job.\\n:type identifier: Optional[str] The counts of all the IQMJob objects. List[Dict[ str , int ]] iqm_jobs ( List [ IQMJob ] ) – identifier ( str | None ) – previous iqm.benchmarks.utils.remove_directed_duplicates_to_list next iqm.benchmarks.utils.retrieve_all_job_metadata By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier.html","description":"Bases: object Identifier for observations for ease of use qubit_indices ( list [ int ] ) – list containing the indices of the qubits the observation was executed on. list [ int ] Attributes string_ide...","content":"Bases: object Identifier for observations for ease of use qubit_indices ( list [ int ] ) – list containing the indices of the qubits the observation was executed on. list [ int ] Attributes string_identifier String version of the qubit indices for ease of use qubit_indices  Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). String version of the qubit indices for ease of use A string of the qubit indices previous iqm.benchmarks.benchmark_definition.BenchmarkObservation next iqm.benchmarks.benchmark_definition.BenchmarkRunResult By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.retrieve_all_job_metadata","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.retrieve_all_job_metadata.html","description":"Retrieve the counts from a list of IQMJob objects.\\n:param iqm_jobs List[IQMJob]: The list of IQMJob objects. Relevant metadata of all the IQMJob objects. Dict[ str , Dict[ str , Any]] iqm_jobs ( List ...","content":"Retrieve the counts from a list of IQMJob objects.\\n:param iqm_jobs List[IQMJob]: The list of IQMJob objects. Relevant metadata of all the IQMJob objects. Dict[ str , Dict[ str , Any]] iqm_jobs ( List [ IQMJob ] ) – previous iqm.benchmarks.utils.retrieve_all_counts next iqm.benchmarks.utils.set_coupling_map By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.get_iqm_backend","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.get_iqm_backend.html","description":"Get the IQM backend object from a backend name (str). backend_label ( str ) – The name of the IQM backend. IQMBackendBase. IQMBackendBase previous iqm.benchmarks.utils.get_active_qubits next iqm.bench...","content":"Get the IQM backend object from a backend name (str). backend_label ( str ) – The name of the IQM backend. IQMBackendBase. IQMBackendBase previous iqm.benchmarks.utils.get_active_qubits next iqm.benchmarks.utils.get_measurement_mapping By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.circuit_containers.CircuitGroup","url":"/iqm-benchmarks/api/iqm.benchmarks.circuit_containers.CircuitGroup.html","description":"Bases: object Group of IQMCircuits . It represents a list of circuits with a common purpose, typically executed in a batch. circuits ( List [ IQMCircuit ] ) – name ( str | None ) – List of IQMCircuit ...","content":"Bases: object Group of IQMCircuits . It represents a list of circuits with a common purpose, typically executed in a batch. circuits ( List [ IQMCircuit ] ) – name ( str | None ) – List of IQMCircuit . List[iqm.qiskit_iqm.iqm_circuit.IQMCircuit] Name of the group. str | None Attributes circuit_names Name of all the circuits contained in the group as a string name  qubit_layouts The qubit layouts contained in all the circuits, where the qubits are represented by an instance of Qubit . qubit_layouts_by_index The qubit layouts contained in all the circuits, where the qubits are represented by an integer. qubits The set of active qubits in all of the circuits circuits  Methods __eq__ (other) Return self==value. __getitem__ (key)  __repr__ () Return repr(self). __setitem__ (key, value)  add_circuit (circuit) Adds a circuit to the internal list get_circuits_by_name (name) Returns a list of the internal circuits that share the same name The qubit layouts contained in all the circuits, where the qubits are represented by an integer. All qubit layouts. The qubit layouts contained in all the circuits, where the qubits are represented by an instance of Qubit . All qubit layouts. The set of active qubits in all of the circuits A set of Qubit Adds a circuit to the internal list circuit ( IQMCircuit ) – Circuit to add. Name of all the circuits contained in the group as a string List of strings Returns a list of the internal circuits that share the same name name ( str ) – Name of the circuit to return as a string The circuit with the desired name as a string, or None if they are not found. IQMCircuit | None previous iqm.benchmarks.circuit_containers.BenchmarkCircuit next iqm.benchmarks.circuit_containers.Circuits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.create_objective_function","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.create_objective_function.html","description":"Creates a function that maps the parameters to the parametrized circuit,\\nruns it and computes the expectation value. counts ( Dict [ str , int ] ) – The dictionary of bitstring counts. graph ( network...","content":"Creates a function that maps the parameters to the parametrized circuit,\\nruns it and computes the expectation value. counts ( Dict [ str , int ] ) – The dictionary of bitstring counts. graph ( networkx graph ) – the MaxCut problem graph. qubit_to_node ( Dict [ int , int ] ) – mapping of qubit to nodes of the graph virtual_nodes ( List [ Tuple [ int , int ] ] ) – list of virtual nodes in the graph function that gives expectation value of the cut edges from counts sampled from the ansatz callable previous iqm.benchmarks.optimization.qscore.compute_expectation_value next iqm.benchmarks.optimization.qscore.cut_cost_function By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.GHZConfiguration","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.GHZConfiguration.html","description":"Bases: BenchmarkConfigurationBase GHZ state configuration benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( st...","content":"Bases: BenchmarkConfigurationBase GHZ state configuration benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – state_generation_routine ( str ) – custom_qubits_array ( Sequence [ Sequence [ int ] ] | None ) – qubit_counts ( Sequence [ int ] | None ) – qiskit_optim_level ( int ) – optimize_sqg ( bool ) – fidelity_routine ( str ) – num_RMs ( int | None ) – rem ( bool ) – mit_shots ( int ) – cal_url ( str | None ) – GHZBenchmark Type[ Benchmark ] The routine to construct circuits generating a GHZ state. Possible values:\\n- “tree” (default): Optimized GHZ state generation circuit in log depth that\\ntakes the qubit coupling and CZ fidelities into account. The algorithm creates\\na minimal spanning tree for the qubit layout and chooses an initial qubit\\nthat minimizes largest weighted distance to all other qubits.\\n- “log”: Optimized circuit with parallel application of CX gates such that the\\nnumber of CX gates scales logarithmically in the system size. This\\nimplementation currently does not take connectivity on the backend into account.\\n- “naive”: Applies the naive textbook circuit with #CX gates scaling linearly in\\nthe system size.\\n* If other is specified, assumes “log”. str A sequence (e.g., Tuple or List) of sequences of Optional[Sequence[Sequence[ int ]]] If None, takes all qubits specified in the backend coupling map. CURRENTLY NOT SUPPORTED, A sequence (e.g., Tuple or List) of integers Optional[Sequence[ int ]] The optimization level used for transpilation to backend architecture.\\n* Default: 3 int Whether consecutive single qubit gates are optimized for reduced gate count via bool Default: True The method with which the fidelity is estimated. Possible values:\\n- “coherences”: The multiple quantum coherences method as in [Mooney, 2021]\\n- “randomized_measurements”: Fidelity estimation via randomized measurements outlined in https://arxiv.org/abs/1812.02624 * Default is “coherences” str The number of randomized measurements used if the respective fidelity routine is chosen\\n* Default: 100 Optional[ int ] Boolean flag determining if readout error mitigation is used\\n* Default: True bool Total number of shots for readout error mitigation\\n* Default: 1000 int Optional URL where the calibration data for the selected backend can be retrieved from\\nThe calibration data is used for the “tree” state generation routine to prioritize couplings with high\\nCZ fidelity.\\n* Default: None Optional[ str ] Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  state_generation_routine  custom_qubits_array  qubit_counts  shots  qiskit_optim_level  optimize_sqg  fidelity_routine  num_RMs  rem  mit_shots  cal_url  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.entanglement.ghz.GHZBenchmark next iqm.benchmarks.entanglement.graph_states By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.readout_mitigation","url":"/iqm-benchmarks/api/iqm.benchmarks.readout_mitigation.html","description":"M3 modification for readout mitigation at IQM QPU’s. Functions apply_readout_error_mitigation (backend_arg, ...) param backend_arg : the backend to calibrate an M3 mitigator against. the backend to ca...","content":"M3 modification for readout mitigation at IQM QPU’s. Functions apply_readout_error_mitigation (backend_arg, ...) param backend_arg : the backend to calibrate an M3 mitigator against. the backend to calibrate an M3 mitigator against. readout_error_m3 (counts, mit, qubits) Counts processor using M3IQM for readout error mitigation. Classes M3IQM ([system, iter_threshold]) M3 readout mitigation class modified to work with IQM devices. Inheritance previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits next iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.multi_lmfit","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.html","description":"Lmfit for multiple datasets, generalized and extended version of the shown example in the lmfit documentation: https://lmfit.github.io/lmfit-py/examples/example_fit_multi_datasets.html#sphx-glr-exampl...","content":"Lmfit for multiple datasets, generalized and extended version of the shown example in the lmfit documentation: https://lmfit.github.io/lmfit-py/examples/example_fit_multi_datasets.html#sphx-glr-examples-example-fit-multi-datasets-py Functions create_multi_dataset_params (func, data[, ...]) Generates lmfit Parameter object with parameters for each line to fit eval_func_single_dataset (func, params, i, x) Returns the evaluation of the fit function for a single dataset get_param_names_from_func_signature (func) Gets the function parameter names from its signature multi_dataset_residual (params, x, data, func) Calculate total residual for fits of func to several data sets. previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking next iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_shadows.local_shadow_tomography","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_shadows.local_shadow_tomography.html","description":"Prepares the circuits to perform local Haar or Clifford shadow tomography. qc ( QuantumCircuit ) – The quantum circuit to which random unitaries are appended. Nu ( int ) – Number of local random unita...","content":"Prepares the circuits to perform local Haar or Clifford shadow tomography. qc ( QuantumCircuit ) – The quantum circuit to which random unitaries are appended. Nu ( int ) – Number of local random unitaries used. active_qubits ( Sequence [ int ] ) – The Sequence of active qubits. measure_other ( Optional [ Sequence [ int ] ] ) – Whether to measure other qubits in the qc QuantumCircuit.\\n* Default is None. measure_other_name ( Optional [ str ] ) – Name of the classical register to assign measure_other. clifford_or_haar ( Literal [ \\"clifford\\" , \\"haar\\" ] ) – Whether to use Clifford or Haar random 1Q gates.\\n* Default is “clifford”. cliffords_1q ( Optional [ Dict [ str , QuantumCircuit ] ] ) – Dictionary of 1-qubit Cliffords in terms of IQM-native r and CZ gates.\\n* Default is None. ValueError – If clifford_or_haar is not “clifford” or “haar”. ValueError – If cliffords_1q is None and clifford_or_haar is “clifford”. ndarray | Dict[str, List[str]]: Either: Unitary gate (numpy ndarray), composed of local unitaries for each random initialisation and qubit, if clifford_or_haar == ‘haar’. Dictionary of lists of Clifford labels corresponding to each RM, keys being str(qubit), if clifford_or_haar == ‘clifford’. List[QuantumCircuit]: List of tomography circuits. Unitary gate (numpy ndarray), composed of local unitaries for each random initialisation and qubit, if clifford_or_haar == ‘haar’. Dictionary of lists of Clifford labels corresponding to each RM, keys being str(qubit), if clifford_or_haar == ‘clifford’. List[QuantumCircuit]: List of tomography circuits. Tuple[np.ndarray | Dict[ str , List[ str ]], List[QuantumCircuit]] previous iqm.benchmarks.utils_shadows.get_negativity next License By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.set_coupling_map","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.set_coupling_map.html","description":"Set a coupling map according to the specified physical layout. qubits ( Sequence [ int ] ) – the list of physical qubits to consider. backend ( IQMBackendBase ) – the backend from IQM. physical_layout...","content":"Set a coupling map according to the specified physical layout. qubits ( Sequence [ int ] ) – the list of physical qubits to consider. backend ( IQMBackendBase ) – the backend from IQM. physical_layout ( Literal [ \\"fixed\\" , \\"batching\\" ] ) – the physical layout type to consider.\\n- “fixed” sets a coupling map restricted to the input qubits -> results will be constrained to measure those qubits.\\n- “batching” sets the coupling map of the backend -> results in a benchmark will be “batched” according to final layouts.\\n* Default is “fixed”. ValueError – if the physical layout is not “fixed” or “batching”. ValueError – if Star topology and label 0 is in qubit layout. ValueError – if the physical layout is not “fixed” or “batching”. A coupling map according to the specified physical layout. CouplingMap previous iqm.benchmarks.utils.retrieve_all_job_metadata next iqm.benchmarks.utils.sort_batches_by_final_layout By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop.html","description":"Computes the cumulative average heavy output probabilities of a QV experiment.\\n:param hops: The individual heavy output probabilities for each trial.\\n:type hops: List[float] cumulative average heavy o...","content":"Computes the cumulative average heavy output probabilities of a QV experiment.\\n:param hops: The individual heavy output probabilities for each trial.\\n:type hops: List[float] cumulative average heavy output probabilities for all trials. List[ float ] hops ( List [ float ] ) – previous iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities next iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.get_active_qubits","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.get_active_qubits.html","description":"Extract active qubits from a quantum circuit. qc ( QuantumCircuit ) – The quantum circuit to extract active qubits from. A list of active qubits. List[ int ] previous iqm.benchmarks.utils.get_Pauli_ex...","content":"Extract active qubits from a quantum circuit. qc ( QuantumCircuit ) – The quantum circuit to extract active qubits from. A list of active qubits. List[ int ] previous iqm.benchmarks.utils.get_Pauli_expectation next iqm.benchmarks.utils.get_iqm_backend By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.generate_ghz_linear","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.generate_ghz_linear.html","description":"Generates a GHZ state by applying a Hadamard and a series of CX gates in a linear fashion.\\nThe construction is symmetrized to halve the circuit depth.\\n:param num_qubits: the number of qubits of the GH...","content":"Generates a GHZ state by applying a Hadamard and a series of CX gates in a linear fashion.\\nThe construction is symmetrized to halve the circuit depth.\\n:param num_qubits: the number of qubits of the GHZ state A quantum circuit generating a GHZ state on a given number of qubits. QuantumCircuit num_qubits ( int ) – previous iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements next iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times.html","description":"Retrieve the elapsed times from the CLOPS job metadata job_meta ( Dict [ Dict [ str , Any ] ] ) – A dictionary of CLOPS jobs metadata A dictionary of elapsed times of all CLOPS jobs Dict[ str , float ...","content":"Retrieve the elapsed times from the CLOPS job metadata job_meta ( Dict [ Dict [ str , Any ] ] ) – A dictionary of CLOPS jobs metadata A dictionary of elapsed times of all CLOPS jobs Dict[ str , float ] previous iqm.benchmarks.quantum_volume.clops.plot_times next iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz.html","description":"Generates a GHZ state in log-depth according to https://arxiv.org/abs/1807.05572 :param num_qubits: the number of qubits of the GHZ state A quantum circuit generating a GHZ state on a given number of ...","content":"Generates a GHZ state in log-depth according to https://arxiv.org/abs/1807.05572 :param num_qubits: the number of qubits of the GHZ state A quantum circuit generating a GHZ state on a given number of qubits. QuantumCircuit num_qubits ( int ) – previous iqm.benchmarks.entanglement.ghz.generate_ghz_linear next iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.qscore_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.qscore_analysis.html","description":"Analysis function for a QScore experiment run ( RunResult ) – A QScore experiment run for which analysis result is created AnalysisResult corresponding to QScore BenchmarkAnalysisResult previous iqm.b...","content":"Analysis function for a QScore experiment run ( RunResult ) – A QScore experiment run for which analysis result is created AnalysisResult corresponding to QScore BenchmarkAnalysisResult previous iqm.benchmarks.optimization.qscore.plot_approximation_ratios next iqm.benchmarks.optimization.qscore.run_QAOA By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature.html","description":"Gets the function parameter names from its signature previous iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset next iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_...","content":"Gets the function parameter names from its signature previous iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset next iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero.html","description":"Helper function to relabel a qubits array to an increasingly ordered one starting from zero\\ne.g., [[2,3], [5], [7,8]]  ->  [[0,1], [2], [3,4]]\\nNote: this assumes the input array is sorted in increasin...","content":"Helper function to relabel a qubits array to an increasingly ordered one starting from zero\\ne.g., [[2,3], [5], [7,8]]  ->  [[0,1], [2], [3,4]]\\nNote: this assumes the input array is sorted in increasing order! arr ( List [ List [ int ] ] ) – List [ List [ int ]] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.xrvariable_to_counts","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.xrvariable_to_counts.html","description":"Retrieve counts from xarray dataset. dataset ( xr.Dataset ) – the dataset to extract counts from. identifier ( str ) – the identifier for the dataset counts. counts_range ( int ) – the range of counts...","content":"Retrieve counts from xarray dataset. dataset ( xr.Dataset ) – the dataset to extract counts from. identifier ( str ) – the identifier for the dataset counts. counts_range ( int ) – the range of counts to extract (e.g., the amount of circuits that were executed). A list of counts dictionaries from the dataset. List[Dict[ str , int ]] previous iqm.benchmarks.utils.timeit next iqm.benchmarks.utils_plots By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark.BenchmarkBase","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark.BenchmarkBase.html","description":"Bases: ABC The base implementation of all benchmarks, from which they inherit. Methods check_requirements (all_benchmarks) Check whether the requirements for the benchmark are met, returning a valid b...","content":"Bases: ABC The base implementation of all benchmarks, from which they inherit. Methods check_requirements (all_benchmarks) Check whether the requirements for the benchmark are met, returning a valid benchmark dictionary. execute_full_benchmark () Execute the full benchmark on the given backend. generate_requirements (all_benchmarks) Generate the required attributes for execution. name () Return the name of the benchmark. backend ( IQMBackendBase ) – configuration ( BenchmarkConfigurationBase ) – Return the name of the benchmark. Execute the full benchmark on the given backend. Check whether the requirements for the benchmark are met, returning a valid benchmark dictionary. all_benchmarks ( OrderedDict [ str , BenchmarkBase ] ) – OrderedDict [ str , BenchmarkBase ] Generate the required attributes for execution. all_benchmarks ( OrderedDict [ str , BenchmarkBase ] ) – None previous iqm.benchmarks.benchmark next iqm.benchmarks.benchmark.BenchmarkConfigurationBase By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis.html","description":"Analysis function for a MRB experiment run ( RunResult ) – A MRB experiment run for which analysis result is created AnalysisResult corresponding to MRB BenchmarkAnalysisResult previous iqm.benchmarks...","content":"Analysis function for a MRB experiment run ( RunResult ) – A MRB experiment run for which analysis result is created AnalysisResult corresponding to MRB BenchmarkAnalysisResult previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.clops","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.clops.html","description":"CLOPS benchmark Functions clops_analysis (run) Analysis function for a CLOPS (v or h) experiment plot_times (clops_data, observations) Generate a figure representing the different elapsed times in the...","content":"CLOPS benchmark Functions clops_analysis (run) Analysis function for a CLOPS (v or h) experiment plot_times (clops_data, observations) Generate a figure representing the different elapsed times in the CLOPS experiment. retrieve_clops_elapsed_times (job_meta) Retrieve the elapsed times from the CLOPS job metadata Classes CLOPSBenchmark (backend_arg, configuration) CLOPS reflect the speed of execution of parametrized QV circuits. CLOPSConfiguration (*, benchmark, shots, ...) CLOPS configuration. Inheritance previous iqm.benchmarks.quantum_volume next iqm.benchmarks.quantum_volume.clops.clops_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.plot_density_matrix","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.plot_density_matrix.html","description":"Plots a density matrix for corresponding qubit pairs, neighbor qubit projections, and negativities. matrix ( np.ndarray ) – The matrix to plot. qubit_pair ( Sequence [ int ] ) – The corresponding qubi...","content":"Plots a density matrix for corresponding qubit pairs, neighbor qubit projections, and negativities. matrix ( np.ndarray ) – The matrix to plot. qubit_pair ( Sequence [ int ] ) – The corresponding qubit pair. projection ( str ) – The projection corresponding to the matrix to plot. negativity ( Dict [ str , float ] ) – A dictionary with keys “value” and “uncertainty” and values being respective negativities. backend_name ( str ) – The name of the backend for the corresponding experiment. timestamp ( str ) – The timestamp for the corresponding experiment. tomography ( Literal [ \\"state_tomography\\" , \\"shadow_tomography\\" ] ) – The type of tomography used to gather the data of the matrix to plot. num_RM_samples ( Optional [ int ] = None ) – The number of randomized measurement samples if tomography is shadow_tomography.\\n* Default is None if tomography is state_tomography. num_MoMs_samples ( Optional [ int ] = None ) – The number of Median of Means used per randomized measurement if tomography is shadow_tomography.\\n* Default is None if tomography is state_tomography. The figure label and the density matrix plot figure. Tuple[ str , Figure] previous iqm.benchmarks.entanglement.graph_states.negativity_analysis next iqm.benchmarks.entanglement.graph_states.plot_max_negativities By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.timeit","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.timeit.html","description":"Calculates the amount of time a function takes to execute f – The function to add the timing attribute to The decorated function execution with logger statement of elapsed time in execution previous i...","content":"Calculates the amount of time a function takes to execute f – The function to add the timing attribute to The decorated function execution with logger statement of elapsed time in execution previous iqm.benchmarks.utils.submit_execute next iqm.benchmarks.utils.xrvariable_to_counts By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.html","description":"Bases: Benchmark CLOPS reflect the speed of execution of parametrized QV circuits. Attributes name  Methods add_all_meta_to_dataset (dataset) Adds all configuration metadata and circuits to the datase...","content":"Bases: Benchmark CLOPS reflect the speed of execution of parametrized QV circuits. Attributes name  Methods add_all_meta_to_dataset (dataset) Adds all configuration metadata and circuits to the dataset variable analysis_function (run) Analysis function for a CLOPS (v or h) experiment append_parameterized_unitary (qc, q0, q1, ...) Append a decomposed, parametrized SU(4) gate using CX gates to the given quantum circuit. assign_random_parameters_to_all (...) param dict_parametrized_circs : Dictionary with list of int (qubits) as keys and lists of parametrized quantum circuits as values Dictionary with list of int (qubits) as keys and lists of parametrized quantum circuits as values clops_cycle (backend, ...) Executes a single CLOPS cycle (parameter assignment and execution) for the given update :param backend: the backend to execute the jobs with :type backend: IQMBackendBase :param sorted_transpiled_qc_list: A dictionary of lists of transpiled quantum circuits :type sorted_transpiled_qc_list: Dict[str, List[QuantumCircuit]] :param update: The current cycle update :type update: int execute (backend) Executes the benchmark generate_circuit_list () Generate a list of parametrized QV quantum circuits, with measurements at the end. generate_random_parameters () Generate an array of as many random parameters as needed by the QV template circuits. generate_single_circuit () Generate a single parametrized QV quantum circuit, with measurements at the end. generate_transpiled_clops_templates () Generates CLOPS circuit templates transpiled to the backend's physical layout backend_arg ( IQMBackendBase | str ) – configuration ( CLOPSConfiguration ) – Analysis function for a CLOPS (v or h) experiment run ( RunResult ) – A CLOPS experiment run for which analysis result is created AnalysisResult corresponding to CLOPS BenchmarkAnalysisResult Adds all configuration metadata and circuits to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Append a decomposed, parametrized SU(4) gate using CX gates to the given quantum circuit. qc ( QuantumCircuit ) – the quantum circuit to append the SU(4) gate to q0 ( int ) – the first qubit involved in the gate q1 ( int ) – the second qubit involved in the gate layer ( int ) – the QV layer the gate belongs to pair ( int ) – the pair index corresponding to the gate None Generate a single parametrized QV quantum circuit, with measurements at the end. the QV quantum circuit. QuantumCircuit Generate a list of parametrized QV quantum circuits, with measurements at the end. the list of parametrized QV quantum circuits. List[QuantumCircuit] Generate an array of as many random parameters as needed by the QV template circuits. the array of random parameters np.ndarray[np.float64] dict_parametrized_circs ( Dict [ Tuple , List [ QuantumCircuit ] ] ) – Dictionary with list of int (qubits) as keys and lists of parametrized quantum circuits as values optimize_sqg ( bool ) – Whether single qubit gate optimization is applied lists of list of float parameter values corresponding to param updates dictionary with lists of int (qubits) as keys and lists of quantum circuits as values lists of list of float parameter values corresponding to param updates dictionary with lists of int (qubits) as keys and lists of quantum circuits as values A tuple of dictionaries Executes a single CLOPS cycle (parameter assignment and execution) for the given update\\n:param backend: the backend to execute the jobs with\\n:type backend: IQMBackendBase\\n:param sorted_transpiled_qc_list: A dictionary of lists of transpiled quantum circuits\\n:type sorted_transpiled_qc_list: Dict[str, List[QuantumCircuit]]\\n:param update: The current cycle update\\n:type update: int The elapsed times for parameter assignment, submission and retrieval of jobs Tuple[ float , float , float ] backend ( IQMBackendBase ) – sorted_transpiled_qc_list ( Dict [ Tuple , List [ IQMCircuit ] ] ) – update ( int ) – Generates CLOPS circuit templates transpiled to the backend’s physical layout a dictionary of quantum circuits with keys being str(qubit layout) Dict[ str , QuantumCircuit] Executes the benchmark backend ( IQMBackendBase ) – Dataset previous iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times next iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params.html","description":"Generates lmfit Parameter object with parameters for each line to fit previous iqm.benchmarks.randomized_benchmarking.multi_lmfit next iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_sing...","content":"Generates lmfit Parameter object with parameters for each line to fit previous iqm.benchmarks.randomized_benchmarking.multi_lmfit next iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford.html","description":"Function to compute the inverse Clifford of a circuit\\n:param qc_inv: The Clifford circuit to be inverted\\n:type qc_inv: QuantumCircuit\\n:param clifford_dictionary: A dictionary of Clifford gates labeled...","content":"Function to compute the inverse Clifford of a circuit\\n:param qc_inv: The Clifford circuit to be inverted\\n:type qc_inv: QuantumCircuit\\n:param clifford_dictionary: A dictionary of Clifford gates labeled by (de)stabilizers\\n:type clifford_dictionary: Dict A Clifford circuit Optional[QuantumCircuit] qc_inv ( IQMCircuit ) – clifford_dictionary ( Dict ) – previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_plots.plot_layout_fidelity_graph","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_plots.plot_layout_fidelity_graph.html","description":"Plot a graph showing the quantum chip layout with fidelity information. Creates a visualization of the quantum chip topology where nodes represent qubits\\nand edges represent connections between qubits...","content":"Plot a graph showing the quantum chip layout with fidelity information. Creates a visualization of the quantum chip topology where nodes represent qubits\\nand edges represent connections between qubits. Edge thickness indicates gate errors\\n(thinner edges mean better fidelity) and selected qubits are highlighted in orange. cal_url ( str ) – URL to retrieve calibration data from qubit_layouts ( list [ list [ int ] ] | None ) – List of qubit layouts where each layout is a list of qubit indices station ( str | None ) – Name of the quantum computing station to use predefined positions for.\\nIf None, positions will be generated algorithmically. The generated figure object containing the graph visualization matplotlib.figure.Figure previous iqm.benchmarks.utils_plots next iqm.benchmarks.utils_plots.rx_to_nx_graph By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.get_Pauli_expectation","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.get_Pauli_expectation.html","description":"Gets an estimate of a Pauli expectation value for a given set of counts and a Pauli measurement label. counts ( Dict [ str , int ] ) – A dictionary of counts.\\n* NB: keys are assumed to have a single b...","content":"Gets an estimate of a Pauli expectation value for a given set of counts and a Pauli measurement label. counts ( Dict [ str , int ] ) – A dictionary of counts.\\n* NB: keys are assumed to have a single bitstring, i.e., coming from a single classical register. pauli_label ( str ) – A Pauli measurement label, specified as a string of I, X, Y, Z characters. ValueError – If Pauli labels are not specified in terms of I, X, Y, Z characters. The estimate of the Pauli expectation value. float previous iqm.benchmarks.utils.generate_state_tomography_circuits next iqm.benchmarks.utils.get_active_qubits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.GHZBenchmark","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.GHZBenchmark.html","description":"Bases: Benchmark The GHZ Benchmark estimates the quality of generated Greenberger–Horne–Zeilinger states Attributes name  Methods add_configuration_to_dataset (dataset) Creates a xarray.Dataset and ad...","content":"Bases: Benchmark The GHZ Benchmark estimates the quality of generated Greenberger–Horne–Zeilinger states Attributes name  Methods add_configuration_to_dataset (dataset) Creates a xarray.Dataset and adds the circuits and configuration metadata to it. analysis_function (run) Analyze counts and compute the state fidelity append_rms (num_rms, qubit_layout) Appends 1Q Clifford gates sampled uniformly at random to all qubits in the given circuit. execute (backend) Executes the benchmark. generate_coherence_meas_circuits (...) Takes a given GHZ circuit and outputs circuits needed to measure fidelity via mult. generate_native_ghz (qubit_layout, ...) Generate a circuit preparing a GHZ state, according to a given routine and transpiled to the native gate set and topology. generate_readout_circuit (qubit_layout, ...) A wrapper for the creation of different circuits to estimate the fidelity backend ( IQMBackendBase ) – configuration ( GHZConfiguration ) – Analyze counts and compute the state fidelity run ( BenchmarkRunResult ) – RunResult\\nThe RunResult object containing a dataset with counts and benchmark parameters AnalysisResult An object containing the dataset, plots, and observations An object containing the dataset, plots, and observations BenchmarkAnalysisResult Generate a circuit preparing a GHZ state,\\naccording to a given routine and transpiled to the native gate set and topology. qubit_layout ( List [ int ] ) – List[int]\\nThe subset of system-qubits used in the protocol, indexed from 0 qubit_count ( int ) – int\\nThe number of qubits for which a GHZ state should be created. This values should be smaller or equal to\\nthe number of qubits in qubit_layout routine ( str ) – str\\nThe routine to generate the GHZ circuit QuantumCircuit implementing GHZ native state CircuitGroup Takes a given GHZ circuit and outputs circuits needed to measure fidelity via mult. q. coherences method qubit_layout ( List [ int ] ) – List[int]\\nThe subset of system-qubits used in the protocol, indexed from 0 qubit_count ( int ) – int\\nThe number of qubits for which a GHZ state should be created. This values should be smaller or equal to\\nthe number of qubits in qubit_layout List[QuantumCircuit] A list of transpiled quantum circuits to be measured A list of transpiled quantum circuits to be measured qc_list_transpiled Appends 1Q Clifford gates sampled uniformly at random to all qubits in the given circuit.\\n:param num_rms: How many randomized measurement circuits are generated\\n:type num_rms: int\\n:param qubit_layout List[int]: The subset of system-qubits used in the protocol, indexed from 0 List[QuantumCircuit] of the original circuit with 1Q Clifford gates appended to it num_rms ( int ) – qubit_layout ( List [ int ] ) – List [ IQMCircuit ] A wrapper for the creation of different circuits to estimate the fidelity qubit_layout ( List [ int ] ) – List[int]\\nThe subset of system-qubits used in the protocol, indexed from 0 qubit_count ( int ) – int\\nThe number of qubits for which a GHZ state should be created. This values should be smaller or equal to\\nthe number of qubits in qubit_layout List[QuantumCircuit] A list of transpiled quantum circuits to be measured A list of transpiled quantum circuits to be measured all_circuits_list Creates a xarray.Dataset and adds the circuits and configuration metadata to it. dataset ( xr.Dataset ) – dataset to be used for further data storage xr.Dataset Executes the benchmark. Dataset previous iqm.benchmarks.entanglement.ghz.plot_fidelities next iqm.benchmarks.entanglement.ghz.GHZConfiguration By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.run_QAOA","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.run_QAOA.html","description":"Solves the cut size of MaxCut for a graph using QAOA.\\nThe result is average value sampled from the optimized ansatz. counts ( Dict [ str , int ] ) – key as bitstring, value as counts graph_physical ( ...","content":"Solves the cut size of MaxCut for a graph using QAOA.\\nThe result is average value sampled from the optimized ansatz. counts ( Dict [ str , int ] ) – key as bitstring, value as counts graph_physical ( Graph ) – the graph to be optimized qubit_node ( Dict [ int , int ] ) – the qubit to be optimized use_classical_angles ( bool ) – whether to use classical angles qaoa_layers ( int ) – the number of QAOA layers virtual_nodes ( List [ Tuple [ int , int ] ] ) – the presence of virtual nodes or not the expectation value of the maximum cut size. float previous iqm.benchmarks.optimization.qscore.qscore_analysis next iqm.benchmarks.optimization.qscore.QScoreBenchmark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.remove_directed_duplicates_to_list","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.remove_directed_duplicates_to_list.html","description":"Remove duplicate edges from a coupling map and returns as a list of edges (as a list of pairs of vertices). cp_map ( CouplingMap ) – A list of pairs of integers, representing a coupling map. the edges...","content":"Remove duplicate edges from a coupling map and returns as a list of edges (as a list of pairs of vertices). cp_map ( CouplingMap ) – A list of pairs of integers, representing a coupling map. the edges of the coupling map. List[List[ int ]] previous iqm.benchmarks.utils.reduce_to_active_qubits next iqm.benchmarks.utils.retrieve_all_counts By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils.marginal_distribution","url":"/iqm-benchmarks/api/iqm.benchmarks.utils.marginal_distribution.html","description":"Compute the marginal distribution over specified bits (indices). Params:\\n- prob_dist (Dict[str, float | int]): A dictionary with keys being bitstrings and values are either probabilities or counts\\n- i...","content":"Compute the marginal distribution over specified bits (indices). Params:\\n- prob_dist (Dict[str, float | int]): A dictionary with keys being bitstrings and values are either probabilities or counts\\n- indices (Iterable[int]): List of bit indices to marginalize over Returns:\\n- dict: A dictionary representing the marginal distribution over the specified bits. prob_dist_or_counts ( Dict [ str , float | int ] ) – indices ( Iterable [ int ] ) – Dict [ str , float ] previous iqm.benchmarks.utils.get_tomography_matrix next iqm.benchmarks.utils.median_with_uncertainty By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits.html","description":"Generate random Clifford circuits in native gates for a given sequence length. qubits ( List [ int ] ) – the list of qubits clifford_dict ( Dict [ str , QuantumCircuit ] ) – A dictionary of Clifford g...","content":"Generate random Clifford circuits in native gates for a given sequence length. qubits ( List [ int ] ) – the list of qubits clifford_dict ( Dict [ str , QuantumCircuit ] ) – A dictionary of Clifford gates labeled by (de)stabilizers seq_length ( int ) – the sequence length num_circ_samples ( int ) – the number of samples backend_arg ( str | IQMBackendBase ) – interleaved_gate ( Optional [ QuantumCircuit ] ) – Clifford native gate to be interleaved - None by default the list of self.num_samples random Clifford quantum circuits List[QuantumCircuit] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.generate_graph_state","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.generate_graph_state.html","description":"Generates a circuit with minimal depth preparing a native graph state for a given backend using given qubits. qubits ( Sequence [ int ] ) – A list of integers representing the qubits. backend ( IQMBac...","content":"Generates a circuit with minimal depth preparing a native graph state for a given backend using given qubits. qubits ( Sequence [ int ] ) – A list of integers representing the qubits. backend ( IQMBackendBase ) – The backend to target the graph state generating circuit. The circuit generating a graph state in the target backend. QuantumCircuit previous iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors next iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.clifford_rb","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.clifford_rb.html","description":"Clifford RB reflects the fidelity of Clifford gates Subpackages and modules clifford_rb 'Standard' Clifford Randomized Benchmarking. previous iqm.benchmarks.randomized_benchmarking next iqm.benchmarks...","content":"Clifford RB reflects the fidelity of Clifford gates Subpackages and modules clifford_rb 'Standard' Clifford Randomized Benchmarking. previous iqm.benchmarks.randomized_benchmarking next iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph.html","description":"Plots the maximum negativity for each corresponding pair of qubits in a graph layout of the given backend. negativities ( Dict [ str , Dict [ str , str | float ] ] ) – A dictionary (str qubit keys) of...","content":"Plots the maximum negativity for each corresponding pair of qubits in a graph layout of the given backend. negativities ( Dict [ str , Dict [ str , str | float ] ] ) – A dictionary (str qubit keys) of dictionaries (keys “value”/”uncertainty”) of negativities (float) to plot. backend_coupling_map ( CouplingMap ) – The CouplingMap instance. qubit_names ( Dict [ int , str ] ) – A dictionary of qubit names corresponding to qubit indices. timestamp ( str ) – The timestamp of the corresponding experiment. tomography ( Literal [ \\"shadow_tomography\\" , \\"state_tomography\\" ] ) – The type of tomography that was used. station ( str ) – The name of the station to use for the graph layout. num_shots ( Optional [ int ] ) – The number of shots used in the corresponding experiment.\\n* Defaults to None: won’t be displayed in title. num_bootstraps ( Optional [ int ] ) – The number of bootstraps used if tomography corresponds to state tomography.\\n* Defaults to None if the tomography type is “shadow_tomography”. num_RM_samples ( Optional [ int ] ) – The number of randomized measurement samples used if tomography corresponds to shadow tomography.\\n* Defaults to None if the tomography type is “state_tomography”. num_MoMs_samples ( Optional [ int ] ) – The number of Median of Means samples per randomized measurement used if tomography corresponds to shadow tomography.\\n* Defaults to None if the tomography type is “shadow_tomography”. The figure label and the max negativities plot figure. Tuple[ str , Figure] previous iqm.benchmarks.entanglement.graph_states.plot_max_negativities next iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.html","description":"Quantum Volume reflects the deepest circuit a given number of qubits can execute with meaningful results. (CLOPS_v corresponding to QV circuits, CLOPS_h to square, parallel-gate layered, circuits) Sub...","content":"Quantum Volume reflects the deepest circuit a given number of qubits can execute with meaningful results. (CLOPS_v corresponding to QV circuits, CLOPS_h to square, parallel-gate layered, circuits) Subpackages and modules clops CLOPS benchmark quantum_volume Quantum Volume benchmark previous iqm.benchmarks.optimization.qscore.QScoreConfiguration next iqm.benchmarks.quantum_volume.clops By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.readout_mitigation.readout_error_m3","url":"/iqm-benchmarks/api/iqm.benchmarks.readout_mitigation.readout_error_m3.html","description":"Counts processor using M3IQM for readout error mitigation. The qubits argument can be either a dictionary coming from mthree.utils.final_measurement_mapping or an array like the initial layout coming ...","content":"Counts processor using M3IQM for readout error mitigation. The qubits argument can be either a dictionary coming from mthree.utils.final_measurement_mapping or an array like the initial layout coming from [backend.qubit_name_to_index(name)] returns a dictionary of quasiprobabilties. NOTE: we could also pass a list of input counts and then this would return a list of quasiprobabilities.\\nThis would not work out of the box for us since we need the annotations of either Dict or List (not Union). counts ( Dict [ str , float ] ) – mit ( M3IQM ) – qubits ( Iterable ) – Dict [ str , float ] previous iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation next iqm.benchmarks.readout_mitigation.M3IQM By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits.html","description":"Generates parallel RB circuits, before and after transpilation, at fixed depth qubits_array ( List [ List [ int ] ] ) – the qubits entering the quantum circuits cliffords_1q ( Dict [ str , QuantumCirc...","content":"Generates parallel RB circuits, before and after transpilation, at fixed depth qubits_array ( List [ List [ int ] ] ) – the qubits entering the quantum circuits cliffords_1q ( Dict [ str , QuantumCircuit ] ) – dictionary of 1-qubit Cliffords in terms of IQM-native r and CZ gates cliffords_2q ( Dict [ str , QuantumCircuit ] ) – dictionary of 2-qubit Cliffords in terms of IQM-native r and CZ gates sequence_length ( int ) – the number of random Cliffords in the circuits num_samples ( int ) – the number of circuit samples backend_arg ( IQMBackendBase | str ) – the backend to transpile the circuits to interleaved_gate ( Optional [ QuantumCircuit ] ) – whether the circuits should have interleaved gates A list of QuantumCircuits of given RB sequence length for parallel RB Tuple [ List [ IQMCircuit ], List [ IQMCircuit ]] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities.html","description":"Compute a result’s probability of being on the ground state.\\n:param num_qubits: the number of qubits\\n:type num_qubits: int\\n:param counts: the result of the execution of a list of quantum circuits (cou...","content":"Compute a result’s probability of being on the ground state.\\n:param num_qubits: the number of qubits\\n:type num_qubits: int\\n:param counts: the result of the execution of a list of quantum circuits (counts)\\n:type counts: List[Dict[str, int]] the ground state probabilities of the RB sequence List[ float ] num_qubits ( int ) – counts ( List [ Dict [ str , int ] ] ) – previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.html","description":"Q-score estimates the size of combinatorial optimization problems a given number of qubits can execute with meaningful results. Subpackages and modules qscore Qscore benchmark previous iqm.benchmarks....","content":"Q-score estimates the size of combinatorial optimization problems a given number of qubits can execute with meaningful results. Subpackages and modules qscore Qscore benchmark previous iqm.benchmarks.logging_config next iqm.benchmarks.optimization.qscore By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.html","description":"Graph states benchmark Functions find_edges_with_disjoint_neighbors (graph) Finds sets of edges with non-overlapping neighboring nodes. generate_graph_state (qubits, backend) Generates a circuit with ...","content":"Graph states benchmark Functions find_edges_with_disjoint_neighbors (graph) Finds sets of edges with non-overlapping neighboring nodes. generate_graph_state (qubits, backend) Generates a circuit with minimal depth preparing a native graph state for a given backend using given qubits. generate_minimal_edge_layers (cp_map) Sorts the edges of a coupling map, arranging them in a dictionary with values being subsets of the coupling map with no overlapping nodes. negativity_analysis (run) Analysis function for a Graph State benchmark experiment. plot_density_matrix (matrix, qubit_pair, ...) Plots a density matrix for corresponding qubit pairs, neighbor qubit projections, and negativities. plot_max_negativities (negativities, ...[, ...]) Plots the maximum negativity for each corresponding pair of qubits. plot_max_negativities_graph (negativities, ...) Plots the maximum negativity for each corresponding pair of qubits in a graph layout of the given backend. shadow_tomography_analysis (dataset, ...) Performs shadow tomography analysis on the given dataset. state_tomography_analysis (dataset, ...) Performs state tomography analysis on the given dataset. update_pauli_expectations (...) Helper function that updates the input Pauli expectations dictionary of dictionaries (projections -> {pauli string: expectation}). Classes GraphStateBenchmark (backend_arg, configuration) The Graph States benchmark estimates the bipartite entangelement negativity of native graph states. GraphStateConfiguration (*, benchmark, shots, ...) Graph States Benchmark configuration. Inheritance previous iqm.benchmarks.entanglement.ghz.GHZConfiguration next iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset.html","description":"Returns the evaluation of the fit function for a single dataset previous iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params next iqm.benchmarks.randomized_benchmarking.mult...","content":"Returns the evaluation of the fit function for a single dataset previous iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params next iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_shadows.CUE","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_shadows.CUE.html","description":"Prepares single qubit Haar-random unitary (drawn from Circuilar Unitary Ensemble - CUE). random_gen ( RandomState ) – a random generator. n ( int ) – the size of the matrix. an n x n CUE matrix np.nda...","content":"Prepares single qubit Haar-random unitary (drawn from Circuilar Unitary Ensemble - CUE). random_gen ( RandomState ) – a random generator. n ( int ) – the size of the matrix. an n x n CUE matrix np.ndarray previous iqm.benchmarks.utils_shadows next iqm.benchmarks.utils_shadows.get_local_shadow By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold.html","description":"Generate the figure representing each HOP, the average and the threshold. qubits ( List [ int ] ) – the list of qubit labels. depth ( int ) – the depth of the QV circuit. qv_result ( List [ float ] ) ...","content":"Generate the figure representing each HOP, the average and the threshold. qubits ( List [ int ] ) – the list of qubit labels. depth ( int ) – the depth of the QV circuit. qv_result ( List [ float ] ) – the list of HOP. qv_results_type ( str ) – whether results come from vanilla or DD execution. num_sigmas ( int ) – the number of sigmas to plot. backend_name ( str ) – the name of the backend. timestamp ( str ) – the execution timestamp. in_volumetric ( bool ) – whether the QV benchmark is being executed in the context of a volumetric benchmark.\\nDefaults to False. plot_rem ( bool ) – whether the plot corresponds to REM corrected data. the name of the figure.\\nFigure: the figure. str previous iqm.benchmarks.quantum_volume.quantum_volume.is_successful next iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.html","description":"Quantum Volume benchmark Functions compute_heavy_output_probabilities (...) Compute the HOP of all quantum circuits. cumulative_hop (hops) Computes the cumulative average heavy output probabilities of...","content":"Quantum Volume benchmark Functions compute_heavy_output_probabilities (...) Compute the HOP of all quantum circuits. cumulative_hop (hops) Computes the cumulative average heavy output probabilities of a QV experiment. cumulative_std (hops) Computes the cumulative standard deviation heavy output probabilities of a QV experiment. get_ideal_heavy_outputs (qc_list, ...) Calculate the heavy output bitrstrings of a list of quantum circuits. get_rem_hops (all_rem_quasidistro, ...) Computes readout-error-mitigated heavy output probabilities. heavy_projector (probabilities) Project (select) the samples from a given probability distribution onto heavy outputs. is_successful (heavy_output_probabilities[, ...]) Check whether a QV benchmark returned heavy output results over the threshold, therefore being successful. plot_hop_threshold (qubits, depth, qv_result, ...) Generate the figure representing each HOP, the average and the threshold. qv_analysis (run) Analysis function for a Quantum Volume experiment Classes QuantumVolumeBenchmark (backend_arg, ...) Quantum Volume reflects the deepest circuit a given number of qubits can execute with meaningful results. QuantumVolumeConfiguration (*, benchmark, ...) Quantum Volume configuration. Inheritance previous iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration next iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual.html","description":"Calculate total residual for fits of func to several data sets. previous iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature next iqm.benchmarks.randomized_benchmark...","content":"Calculate total residual for fits of func to several data sets. previous iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_shadows.get_negativity","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_shadows.get_negativity.html","description":"Computes the negativity of a given density matrix.\\nNote that a negativity >0 is only a necessary and sufficient condition for entanglement if NA = NB = 1. For more    qubits per subsystems it is merel...","content":"Computes the negativity of a given density matrix.\\nNote that a negativity >0 is only a necessary and sufficient condition for entanglement if NA = NB = 1. For more    qubits per subsystems it is merely a necessary condition.\\n:param rho: Density matrix.\\n:type rho: np.ndarray\\n:param NA: Number of qubits for subsystem A.\\n:type NA: int\\n:param NB: Number of qubits for subsystem B.\\n:type NB: int the negativity of the input density matrix. float rho ( ndarray ) – NA ( int ) – NB ( int ) – previous iqm.benchmarks.utils_shadows.get_local_shadow next iqm.benchmarks.utils_shadows.local_shadow_tomography By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.QScoreBenchmark","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.QScoreBenchmark.html","description":"Bases: Benchmark Q-score estimates the size of combinatorial optimization problems a given number of qubits can execute with meaningful results. Attributes name  Methods add_all_meta_to_dataset (datas...","content":"Bases: Benchmark Q-score estimates the size of combinatorial optimization problems a given number of qubits can execute with meaningful results. Attributes name  Methods add_all_meta_to_dataset (dataset) Adds all configuration metadata and circuits to the dataset variable analysis_function (run) Analysis function for a QScore experiment choose_qubits_custom (num_qubits) Choose the qubits to execute the circuits on, according to elements in custom_qubits_array matching num_qubits number of qubits choose_qubits_naive (num_qubits) Choose the qubits to execute the circuits on, sequentially starting at qubit 0. execute (backend) Executes the benchmark. generate_maxcut_ansatz (graph, theta) Generate an ansatz circuit for QAOA MaxCut, with measurements at the end. backend_arg ( IQMBackendBase ) – configuration ( QScoreConfiguration ) – Analysis function for a QScore experiment run ( RunResult ) – A QScore experiment run for which analysis result is created AnalysisResult corresponding to QScore BenchmarkAnalysisResult Generate an ansatz circuit for QAOA MaxCut, with measurements at the end. graph ( networkx graph ) – the MaxCut problem graph theta ( list [ float ] ) – the variational parameters for QAOA, first gammas then betas the QAOA ansatz quantum circuit. QuantumCircuit Adds all configuration metadata and circuits to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Choose the qubits to execute the circuits on, sequentially starting at qubit 0. num_qubits ( int ) – the number of qubits to choose. the list of qubits to execute the circuits on. list [ int ] Choose the qubits to execute the circuits on, according to elements in custom_qubits_array matching num_qubits number of qubits num_qubits ( int ) – the number of qubits to choose the list of qubits to execute the circuits on list [ int ] Executes the benchmark. backend ( IQMBackendBase ) – Dataset previous iqm.benchmarks.optimization.qscore.run_QAOA next iqm.benchmarks.optimization.qscore.QScoreConfiguration By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.html","description":"Bases: Benchmark Mirror RB estimates the fidelity of ensembles of n-qubit layers Attributes name  Methods add_all_meta_to_dataset (dataset) Adds all configuration metadata and circuits to the dataset ...","content":"Bases: Benchmark Mirror RB estimates the fidelity of ensembles of n-qubit layers Attributes name  Methods add_all_meta_to_dataset (dataset) Adds all configuration metadata and circuits to the dataset variable analysis_function (run) Analysis function for a MRB experiment execute (backend) Executes the benchmark submit_single_mrb_job (backend_arg, qubits, ...) Submit fixed-depth MRB jobs for execution in the specified IQMBackend backend_arg ( IQMBackendBase | str ) – configuration ( MirrorRBConfiguration ) – Analysis function for a MRB experiment run ( RunResult ) – A MRB experiment run for which analysis result is created AnalysisResult corresponding to MRB BenchmarkAnalysisResult Adds all configuration metadata and circuits to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Submit fixed-depth MRB jobs for execution in the specified IQMBackend backend_arg ( IQMBackendBase ) – the IQM backend to submit the job qubits ( Sequence [ int ] ) – the qubits to identify the submitted job depth ( int ) – the depth (number of canonical layers) of the circuits to identify the submitted job sorted_transpiled_circuit_dicts ( Dict [ str , List [ QuantumCircuit ] ] ) – A dictionary containing all MRB circuits Dict with qubit layout, submitted job objects, type (vanilla/DD) and submission time Dict [ str , Any ] Executes the benchmark backend ( IQMBackendBase ) – Dataset previous iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration next iqm.benchmarks.randomized_benchmarking.multi_lmfit By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.get_edges","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.get_edges.html","description":"and edge weights given by fidelities coupling_map ( CouplingMap ) – The list pairs on which 2-qubit gates are natively supported qubit_layout ( List [ int ] ) – The subset of system-qubits used in the...","content":"and edge weights given by fidelities coupling_map ( CouplingMap ) – The list pairs on which 2-qubit gates are natively supported qubit_layout ( List [ int ] ) – The subset of system-qubits used in the protocol, indexed from 0 edges_cal ( Optional [ List [ List [ int ] ] ] ) – A coupling map of qubit pairs that have CZ fidelities in the calibration data fidelities_cal ( Optional [ List [ float ] ] ) – A list of CZ fidelities ordered in the same way as edges_cal networkx.Graph The final weighted graph for the given calibration or coupling map The final weighted graph for the given calibration or coupling map graph previous iqm.benchmarks.entanglement.ghz.get_cx_map next iqm.benchmarks.entanglement.ghz.plot_fidelities By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.html","description":"Bases: Benchmark Clifford RB estimates the average gate fidelity of the n-qubit Clifford group Attributes name  Methods add_all_circuits_to_dataset (dataset) Adds all generated circuits during executi...","content":"Bases: Benchmark Clifford RB estimates the average gate fidelity of the n-qubit Clifford group Attributes name  Methods add_all_circuits_to_dataset (dataset) Adds all generated circuits during execution to the dataset variable add_all_metadata_to_dataset (dataset) Adds all configuration metadata and circuits to the dataset variable :param dataset: The xarray dataset :type dataset: xr.Dataset analysis_function (run) Analysis function for a Clifford RB experiment execute (backend) Executes the benchmark backend_arg ( IQMBackendBase | str ) – configuration ( CliffordRBConfiguration ) – Analysis function for a Clifford RB experiment run ( RunResult ) – A Clifford RB experiment run for which analysis result is created AnalysisResult corresponding to Clifford RB BenchmarkAnalysisResult Adds all configuration metadata and circuits to the dataset variable\\n:param dataset: The xarray dataset\\n:type dataset: xr.Dataset dataset ( Dataset ) – Adds all generated circuits during execution to the dataset variable dataset ( xr.Dataset ) – The xarray dataset Returns: Executes the benchmark backend ( IQMBackendBase ) – Dataset previous iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration next iqm.benchmarks.randomized_benchmarking.interleaved_rb By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.interleaved_rb","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.html","description":"Interleaved RB reflects the fidelity of a given gate Subpackages and modules interleaved_rb Interleaved Clifford Randomized Benchmarking. previous iqm.benchmarks.randomized_benchmarking.clifford_rb.cl...","content":"Interleaved RB reflects the fidelity of a given gate Subpackages and modules interleaved_rb Interleaved Clifford Randomized Benchmarking. previous iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking next iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.circuit_containers","url":"/iqm-benchmarks/api/iqm.benchmarks.circuit_containers.html","description":"This module contains classes to easily interact with quantum circuits Classes BenchmarkCircuit (name, circuit_groups) A class grouping a list of CircuitGroup into a single purpose. CircuitGroup (circu...","content":"This module contains classes to easily interact with quantum circuits Classes BenchmarkCircuit (name, circuit_groups) A class grouping a list of CircuitGroup into a single purpose. CircuitGroup (circuits, name) Group of IQMCircuits . Circuits (benchmark_circuits) Container for all the BenchmarkCircuit that are generated in a single benchmark execution. Inheritance previous iqm.benchmarks.benchmark_definition.BenchmarkRunResult next iqm.benchmarks.circuit_containers.BenchmarkCircuit By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.show_figure","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.show_figure.html","description":"Shows a closed figure. fig – Figure to show. previous iqm.benchmarks.benchmark_definition.merge_datasets_dac next iqm.benchmarks.benchmark_definition.Benchmark By IQM Benchmarks developers © Copyright...","content":"Shows a closed figure. fig – Figure to show. previous iqm.benchmarks.benchmark_definition.merge_datasets_dac next iqm.benchmarks.benchmark_definition.Benchmark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation","url":"/iqm-benchmarks/api/iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation.html","description":"backend_arg ( str | IQMBackendBase ) – the backend to calibrate an M3 mitigator against. transpiled_circuits ( List [ QuantumCircuit ] ) – the list of transpiled quantum circuits. counts ( List [ Dict...","content":"backend_arg ( str | IQMBackendBase ) – the backend to calibrate an M3 mitigator against. transpiled_circuits ( List [ QuantumCircuit ] ) – the list of transpiled quantum circuits. counts ( List [ Dict [ str , int ] ] ) – the measurement counts corresponding to the circuits. mit_shots ( int ) – number of shots per circuit. a list of dictionaries with REM-corrected quasiprobabilities for each outcome. tuple [Any, Any] | tuple [QuasiCollection, list ] | QuasiCollection previous iqm.benchmarks.readout_mitigation next iqm.benchmarks.readout_mitigation.readout_error_m3 By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.clops.plot_times","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.clops.plot_times.html","description":"Generate a figure representing the different elapsed times in the CLOPS experiment. clops_data ( xr.Dataset ) – The dataset including elapsed time data from the CLOPS experiment observations ( Dict [ ...","content":"Generate a figure representing the different elapsed times in the CLOPS experiment. clops_data ( xr.Dataset ) – The dataset including elapsed time data from the CLOPS experiment observations ( Dict [ int , Dict [ str , Dict [ str , float ] ] ] ) – The observations from the analysis of the CLOPS experiment. the name of the figure.\\nFigure: the figure. str previous iqm.benchmarks.quantum_volume.clops.clops_analysis next iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.html","description":"Mirror Randomized Benchmarking. Functions compute_polarizations (num_qubits, ...) Estimates the polarization for a list of noisy counts with respect to corresponding ideal counts The polarization here...","content":"Mirror Randomized Benchmarking. Functions compute_polarizations (num_qubits, ...) Estimates the polarization for a list of noisy counts with respect to corresponding ideal counts The polarization here is a rescaling of the average fidelity, that corrects for few-qubit effects edge_grab (qubit_set, n_layers, backend_arg) Generate a list of random layers containing single-qubit Cliffords and two-qubit gates, sampled according to the edge-grab algorithm (see arXiv:2204.07568 [quant-ph]). generate_fixed_depth_mrb_circuits (qubits, ...) Generates a dictionary MRB circuits at fixed depth, indexed by sample number generate_pauli_dressed_mrb_circuits (qubits, ...) Samples a mirror circuit and generates samples of \\"Pauli-dressed\\" circuits, list_to_numcircuit_times_numpauli_matrix (...) Convert a flat list to a matrix of shape (num_circ_samples, num_pauli_samples). mrb_analysis (run) Analysis function for a MRB experiment Classes MirrorRBConfiguration (*, benchmark, shots, ...) Mirror RB configuration. MirrorRandomizedBenchmarking (backend_arg, ...) Mirror RB estimates the fidelity of ensembles of n-qubit layers Inheritance previous iqm.benchmarks.randomized_benchmarking.mirror_rb next iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis.html","description":"Analysis function for an Interleaved RB experiment run ( RunResult ) – An interleaved RB experiment run for which analysis result is created AnalysisResult corresponding to Interleaved RB BenchmarkAna...","content":"Analysis function for an Interleaved RB experiment run ( RunResult ) – An interleaved RB experiment run for which analysis result is created AnalysisResult corresponding to Interleaved RB BenchmarkAnalysisResult previous iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb next iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.QScoreConfiguration","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.QScoreConfiguration.html","description":"Bases: BenchmarkConfigurationBase Q-score configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str...","content":"Bases: BenchmarkConfigurationBase Q-score configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – num_instances ( int ) – num_qaoa_layers ( int ) – min_num_nodes ( int ) – max_num_nodes ( int | None ) – use_virtual_node ( bool ) – use_classically_optimized_angles ( bool ) – choose_qubits_routine ( Literal [ 'naive' , 'custom' ] ) – min_num_qubits ( int ) – custom_qubits_array ( Sequence [ Sequence [ int ] ] | None ) – qiskit_optim_level ( int ) – optimize_sqg ( bool ) – seed ( int ) – REM ( bool ) – mit_shots ( int ) – qpu_topology ( str ) – QScoreBenchmark Type[ Benchmark ] Number of random graphs to be chosen. int Depth of the QAOA circuit.\\n* Default is 1. int The min number of nodes to be taken into account, which should be >= 2.\\n* Default is 2. int The max number of nodes to be taken into account, which has to be <= num_qubits + 1.\\n* Default is None int Parameter to increase the potential Qscore by +1.\\n* Default is True. bool Use pre-optimised tuned parameters in the QAOA circuit.\\n* Default is True. bool The routine to select qubit layouts.\\n* Default is “custom”. Literal[“custom”] Minumum number of qubits.\\n* Default is 2 int The physical qubit layouts to perform the benchmark on.\\nIf virtual_node is set to True, then a given graph with n nodes requires n-1 selected qubits.\\nIf virtual_node is set to False, then a given graph with n nodes requires n selected qubits.\\n* Default is None. Optional[Sequence[Sequence[ int ]]] The Qiskit transpilation optimization level.\\n* Default is 3. int Whether Single Qubit Gate Optimization is performed upon transpilation.\\n* Default is True. bool The random seed.\\n* Default is 1. int Use readout error mitigation.\\n* Default is False. bool (int): Number of shots used in readout error mitigation.\\n* Default is 1000. int (str): Topology of the QPU, either “crystal” or “star”.\\n* Default is “crystal”. str Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  num_instances  num_qaoa_layers  min_num_nodes  max_num_nodes  use_virtual_node  use_classically_optimized_angles  choose_qubits_routine  min_num_qubits  custom_qubits_array  qiskit_optim_level  optimize_sqg  seed  REM  mit_shots  qpu_topology  shots  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.optimization.qscore.QScoreBenchmark next iqm.benchmarks.quantum_volume By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.BenchmarkRunResult","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.BenchmarkRunResult.html","description":"Bases: object A dataclass that stores the results of a single run of a Benchmark. RunResult should contain enough information that the Benchmark can be analyzed based on those\\nresults. Attributes data...","content":"Bases: object A dataclass that stores the results of a single run of a Benchmark. RunResult should contain enough information that the Benchmark can be analyzed based on those\\nresults. Attributes dataset  circuits  Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). dataset ( Dataset ) – circuits ( Circuits ) – previous iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier next iqm.benchmarks.circuit_containers By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.clops.clops_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.clops.clops_analysis.html","description":"Analysis function for a CLOPS (v or h) experiment run ( RunResult ) – A CLOPS experiment run for which analysis result is created AnalysisResult corresponding to CLOPS BenchmarkAnalysisResult previous...","content":"Analysis function for a CLOPS (v or h) experiment run ( RunResult ) – A CLOPS experiment run for which analysis result is created AnalysisResult corresponding to CLOPS BenchmarkAnalysisResult previous iqm.benchmarks.quantum_volume.clops next iqm.benchmarks.quantum_volume.clops.plot_times By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements.html","description":"Estimates GHZ state fidelity through cross-correlations of RMs.\\nImplementation of Eq. (34) in https://arxiv.org/abs/1812.02624 dataset ( xr.Dataset ) – qubit_layout – List[int]: The subset of system-q...","content":"Estimates GHZ state fidelity through cross-correlations of RMs.\\nImplementation of Eq. (34) in https://arxiv.org/abs/1812.02624 dataset ( xr.Dataset ) – qubit_layout – List[int]: The subset of system-qubits used in the protocol ideal_probabilities ( List [ Dict [ str , int ] ] ) – num_qubits ( int ) – Number of qubits circuits ( Circuits ) – Instance of Circuits containing transpiled circuits dict[str, Any] The fidelities uncertainties: dict[str, Any] The uncertainties for the fidelities The fidelities The uncertainties for the fidelities values previous iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences next iqm.benchmarks.entanglement.ghz.generate_ghz_linear By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark_definition.add_counts_to_dataset","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark_definition.add_counts_to_dataset.html","description":"Adds the counts from a cortex job result to the given dataset.\\nIf counts with the same identifier are already present in the old dataset, then both counts are added together. counts ( List [ Dict [ st...","content":"Adds the counts from a cortex job result to the given dataset.\\nIf counts with the same identifier are already present in the old dataset, then both counts are added together. counts ( List [ Dict [ str , int ] ] ) – A list of dictionaries with counts of bitstrings. identifier ( str ) – A string to identify the current data, for instance the qubit layout. dataset ( xr.Dataset ) – Dataset to add results to. xarray.Dataset A merged dataset where the new counts are added the input dataset A merged dataset where the new counts are added the input dataset dataset_merged previous iqm.benchmarks.benchmark_definition next iqm.benchmarks.benchmark_definition.default_analysis_function By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.html","description":"‘Standard’ Clifford Randomized Benchmarking. Functions clifford_rb_analysis (run) Analysis function for a Clifford RB experiment Classes CliffordRBConfiguration (*, benchmark, shots, ...) Clifford RB ...","content":"‘Standard’ Clifford Randomized Benchmarking. Functions clifford_rb_analysis (run) Analysis function for a Clifford RB experiment Classes CliffordRBConfiguration (*, benchmark, shots, ...) Clifford RB configuration. CliffordRandomizedBenchmarking (backend_arg, ...) Clifford RB estimates the average gate fidelity of the n-qubit Clifford group Inheritance previous iqm.benchmarks.randomized_benchmarking.clifford_rb next iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.get_optimal_angles","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.get_optimal_angles.html","description":"provides the optimal angles for QAOA MaxCut ansatz given the number of layers num_layers ( int ) – number of layers of the QAOA MaxCut ansatz. optimal angles for QAOA MaxCut ansatz list [ float ] prev...","content":"provides the optimal angles for QAOA MaxCut ansatz given the number of layers num_layers ( int ) – number of layers of the QAOA MaxCut ansatz. optimal angles for QAOA MaxCut ansatz list [ float ] previous iqm.benchmarks.optimization.qscore.cut_cost_function next iqm.benchmarks.optimization.qscore.is_successful By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark.html","description":"Generic Benchmark class Classes BenchmarkBase (backend, configuration) The base implementation of all benchmarks, from which they inherit. BenchmarkConfigurationBase (*, benchmark[, ...]) Benchmark co...","content":"Generic Benchmark class Classes BenchmarkBase (backend, configuration) The base implementation of all benchmarks, from which they inherit. BenchmarkConfigurationBase (*, benchmark[, ...]) Benchmark configuration base. Inheritance previous iqm.benchmarks next iqm.benchmarks.benchmark.BenchmarkBase By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.compute_expectation_value","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.compute_expectation_value.html","description":"Computes expectation value based on measurement results. counts ( Dict [ str , int ] ) – key as bitstring, val as count graph ( networkx ) – the MaxCut problem graph qubit_to_node ( Dict [ int , int ]...","content":"Computes expectation value based on measurement results. counts ( Dict [ str , int ] ) – key as bitstring, val as count graph ( networkx ) – the MaxCut problem graph qubit_to_node ( Dict [ int , int ] ) – mapping of qubit to nodes of the graph virtual_nodes ( List [ Tuple [ int , int ] ] ) – list of virtual nodes in the graph expectation value of the cut edges for number of counts avg ( float ) previous iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1 next iqm.benchmarks.optimization.qscore.create_objective_function By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences.html","description":"Estimates the GHZ state fidelity based on the multiple quantum coherences method based on [Mooney, 2021] dataset ( Dataset ) – xr.Dataset\\nAn xarray dataset containing the measurement data qubit_layout...","content":"Estimates the GHZ state fidelity based on the multiple quantum coherences method based on [Mooney, 2021] dataset ( Dataset ) – xr.Dataset\\nAn xarray dataset containing the measurement data qubit_layout ( List [ int ] ) – List[int]\\nThe subset of system-qubits used in the protocol circuits ( Circuits ) – Circuits\\nInstance of Circuits containing transpiled circuits The ghz fidelity or, if rem=True, fidelity and readout error mitigated fidelity dict [ str , dict [ str , Any]] previous iqm.benchmarks.entanglement.ghz.fidelity_analysis next iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate.html","description":"Validate that an input gate is Clifford and transpiled to IQM’s native basis gate_id ( str ) – the gate identifier as a Qiskit circuit library operator backend_arg ( IQMBackendBase ) – the IQM backend...","content":"Validate that an input gate is Clifford and transpiled to IQM’s native basis gate_id ( str ) – the gate identifier as a Qiskit circuit library operator backend_arg ( IQMBackendBase ) – the IQM backend to verify transpilation gate_params ( Optional [ List [ float ] ] ) – the gate parameters Transpiled circuit IQMCircuit previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops.html","description":"Computes readout-error-mitigated heavy output probabilities. all_rem_quasidistro ( List [ List [ QuasiCollection ] ] ) – The list of lists of quasiprobability distributions. ideal_heavy_outputs ( List...","content":"Computes readout-error-mitigated heavy output probabilities. all_rem_quasidistro ( List [ List [ QuasiCollection ] ] ) – The list of lists of quasiprobability distributions. ideal_heavy_outputs ( List [ Dict [ str , float ] ] ) – A list of the noiseless heavy output probability dictionaries. A list of readout-error-mitigated heavy output probabilities. List[ float ] previous iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs next iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore.plot_approximation_ratios","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.plot_approximation_ratios.html","description":"including standard deviation and the acceptance threshold. nodes ( list [ int ] ) – list nodes for the problem graph sizes. beta_ratio ( list [ float ] ) – Beta ratio calculated for each graph size. b...","content":"including standard deviation and the acceptance threshold. nodes ( list [ int ] ) – list nodes for the problem graph sizes. beta_ratio ( list [ float ] ) – Beta ratio calculated for each graph size. beta_std ( list [ float ] ) – Standard deviation for beta ratio of each graph size. use_virtual_node ( Optional [ bool ] ) – whether to use virtual nodes or not. use_classically_optimized_angles ( Optional [ bool ] ) – whether to use classically optimized angles or not. num_instances ( int ) – the number of instances. backend_name ( str ) – the name of the backend. timestamp ( str ) – the timestamp of the execution of the experiment. the name of the figure.\\nFigure: the figure. str previous iqm.benchmarks.optimization.qscore.is_successful next iqm.benchmarks.optimization.qscore.qscore_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.utils_shadows","url":"/iqm-benchmarks/api/iqm.benchmarks.utils_shadows.html","description":"Shadow Tomography utility functions Functions CUE (random_gen, n) Prepares single qubit Haar-random unitary (drawn from Circuilar Unitary Ensemble - CUE). get_local_shadow (counts, unitary_arg, ...[, ...","content":"Shadow Tomography utility functions Functions CUE (random_gen, n) Prepares single qubit Haar-random unitary (drawn from Circuilar Unitary Ensemble - CUE). get_local_shadow (counts, unitary_arg, ...[, ...]) Constructs shadows for each individual initialisation. get_negativity (rho, NA, NB) Computes the negativity of a given density matrix. local_shadow_tomography (qc, Nu, active_qubits) Prepares the circuits to perform local Haar or Clifford shadow tomography. previous iqm.benchmarks.utils_plots.GraphPositions next iqm.benchmarks.utils_shadows.CUE By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers.html","description":"Sorts the edges of a coupling map, arranging them in a dictionary with values being subsets of the coupling map with no overlapping nodes.\\nEach item will correspond to a layer of pairs of qubits in wh...","content":"Sorts the edges of a coupling map, arranging them in a dictionary with values being subsets of the coupling map with no overlapping nodes.\\nEach item will correspond to a layer of pairs of qubits in which parallel 2Q gates can be applied. cp_map ( CouplingMap ) – A list of lists of pairs of integers, representing a coupling map. A dictionary with values being subsets of the coupling map with no overlapping nodes. Dict[ int , List[List[ int ]]] previous iqm.benchmarks.entanglement.graph_states.generate_graph_state next iqm.benchmarks.entanglement.graph_states.negativity_analysis By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits.html","description":"qubits ( List [ int ] ) – List of qubits sequence_lengths ( List [ int ] ) – List of sequence lengths clifford_dict ( Dict [ str , QuantumCircuit ] ) – the dictionary of Clifford circuits num_circuit_...","content":"qubits ( List [ int ] ) – List of qubits sequence_lengths ( List [ int ] ) – List of sequence lengths clifford_dict ( Dict [ str , QuantumCircuit ] ) – the dictionary of Clifford circuits num_circuit_samples ( int ) – the number of circuits samples backend_arg ( str | IQMBackendBase ) – the backend fir which to generate the circuits. interleaved_gate ( str ) – the name of the interleaved gate Tuple of untranspiled and transpiled circuits for all class-defined sequence lengths Tuple [ Dict [ int , List [ IQMCircuit ]], Dict [ int , List [ IQMCircuit ]]] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.optimization.qscore","url":"/iqm-benchmarks/api/iqm.benchmarks.optimization.qscore.html","description":"Qscore benchmark Functions calculate_optimal_angles_for_QAOA_p1 (graph) Calculates the optimal angles for single layer QAOA MaxCut ansatz. compute_expectation_value (counts, graph, ...) Computes expec...","content":"Qscore benchmark Functions calculate_optimal_angles_for_QAOA_p1 (graph) Calculates the optimal angles for single layer QAOA MaxCut ansatz. compute_expectation_value (counts, graph, ...) Computes expectation value based on measurement results. create_objective_function (counts, graph, ...) Creates a function that maps the parameters to the parametrized circuit, runs it and computes the expectation value. cut_cost_function (x, graph) Returns the number of cut edges in a graph (with minus sign). get_optimal_angles (num_layers) provides the optimal angles for QAOA MaxCut ansatz given the number of layers is_successful (approximation_ratio) Check whether a Q-score benchmark returned approximation ratio above beta*, therefore being successful. plot_approximation_ratios (nodes, beta_ratio, ...) Generate the figure of approximation ratios vs number of nodes, qscore_analysis (run) Analysis function for a QScore experiment run_QAOA (counts, graph_physical, qubit_node, ...) Solves the cut size of MaxCut for a graph using QAOA. Classes QScoreBenchmark (backend_arg, configuration) Q-score estimates the size of combinatorial optimization problems a given number of qubits can execute with meaningful results. QScoreConfiguration (*, benchmark, shots, ...) Q-score configuration. Inheritance previous iqm.benchmarks.optimization next iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1 By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree","url":"/iqm-benchmarks/api/iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree.html","description":"Generates a GHZ state in log-depth by computing a minimal spanning tree for a given coupling map. graph ( Graph ) – networkx.Graph\\nA graph of the backend coupling map qubit_layout ( List [ int ] ) – L...","content":"Generates a GHZ state in log-depth by computing a minimal spanning tree for a given coupling map. graph ( Graph ) – networkx.Graph\\nA graph of the backend coupling map qubit_layout ( List [ int ] ) – List[int]\\nThe subset of system-qubits used in the protocol, indexed from 0 n_state ( int | None ) – int\\nThe number of qubits for which a GHZ state should be created. This values should be smaller or equal to\\nthe number of qubits in qubit_layout QuantumCircuit A quantum circuit generating a GHZ state of n qubits participating_qubits: List[int] The list of qubits on which the GHZ state is defined. This is a subset of qubit_layout with size n_state A quantum circuit generating a GHZ state of n qubits The list of qubits on which the GHZ state is defined. This is a subset of qubit_layout with size n_state qc previous iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney next iqm.benchmarks.entanglement.ghz.generate_ghz_star By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis.html","description":"Analysis function for a Clifford RB experiment run ( RunResult ) – A Clifford RB experiment run for which analysis result is created AnalysisResult corresponding to Clifford RB BenchmarkAnalysisResult...","content":"Analysis function for a Clifford RB experiment run ( RunResult ) – A Clifford RB experiment run for which analysis result is created AnalysisResult corresponding to Clifford RB BenchmarkAnalysisResult previous iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb next iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.html","description":"Bases: BenchmarkConfigurationBase CLOPS configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str |...","content":"Bases: BenchmarkConfigurationBase CLOPS configuration. benchmark ( Type [ Benchmark ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – qubits ( Sequence [ int ] ) – num_circuits ( int ) – num_updates ( int ) – num_shots ( int ) – clops_h_bool ( bool ) – qiskit_optim_level ( int ) – optimize_sqg ( bool ) – CLOPS Benchmark. Type[ Benchmark ] The Sequence (List or Tuple) of physical qubit labels in which to run the benchmark.\\n* The physical qubit layout should correspond to the one used to establish QV. Sequence[ int ] The number of parametrized circuit layouts.\\n* By definition of arXiv:2110.14108 [quant-ph] set to 100. int The number of parameter assignment updates per circuit layout to perform.\\n* By definition of arXiv:2110.14108 [quant-ph] set to 10. int The number of measurement shots per circuit to perform.\\n* By definition of arXiv:2110.14108 [quant-ph] set to 100. int Whether a CLOPS value with layer definition of CLOPS_H is estimated.\\n* Default is False\\n* This will not estimate a rigorous CLOPS_H value (as loosely defined in www.ibm.com/quantum/blog/quantum-metric-layer-fidelity) bool The Qiskit transpilation optimization level.\\n* The optimization level should correspond to the one used to establish QV.\\n* Default is 3. int Whether Single Qubit Gate Optimization is performed upon transpilation.\\n* The optimize_sqg value should correspond to the one used to establish QV.\\n* Default is True bool The Qiskit transpilation routing method to use.\\n* The routing_method value should correspond to the one used to establish QV.\\n* Default is “sabre”. Literal[“basic”, “lookahead”, “stochastic”, “sabre”, “none”] Whether the coupling map is restricted to qubits in the input layout or not.\\n- “fixed”: Restricts the coupling map to only the specified qubits.\\n- “batching”: Considers the full coupling map of the backend and circuit execution is batched per final layout.\\n* Default is “fixed”. Literal[“fixed”, “batching”] Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  qubits  num_circuits  num_updates  num_shots  clops_h_bool  qiskit_optim_level  optimize_sqg  shots  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark next iqm.benchmarks.quantum_volume.quantum_volume By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.html","description":"Common functions for Randomized Benchmarking-based techniques Functions compute_inverse_clifford (qc_inv, ...) Function to compute the inverse Clifford of a circuit :param qc_inv: The Clifford circuit...","content":"Common functions for Randomized Benchmarking-based techniques Functions compute_inverse_clifford (qc_inv, ...) Function to compute the inverse Clifford of a circuit :param qc_inv: The Clifford circuit to be inverted :type qc_inv: QuantumCircuit :param clifford_dictionary: A dictionary of Clifford gates labeled by (de)stabilizers :type clifford_dictionary: Dict estimate_survival_probabilities (num_qubits, ...) Compute a result's probability of being on the ground state. exponential_rb (depths, ...) Fit function for interleaved/non-interleaved RB fit_decay_lmfit (func, qubit_set, data, ...) Perform a fitting routine for 0th-order (Ap^m+B) RB using lmfit generate_all_rb_circuits (qubits, ...) param qubits : List of qubits List of qubits generate_fixed_depth_parallel_rb_circuits (...) Generates parallel RB circuits, before and after transpilation, at fixed depth generate_random_clifford_seq_circuits (...[, ...]) Generate random Clifford circuits in native gates for a given sequence length. get_survival_probabilities (num_qubits, counts) Compute a result's probability of being on the ground state. import_native_gate_cliffords ([system_size]) Import native gate Clifford dictionaries lmfit_minimizer (fit_parameters, fit_data, ...) param fit_parameters : the parameters to fit the parameters to fit plot_rb_decay (identifier, qubits_array, ...) Plot the fidelity decay and the fit to the model. relabel_qubits_array_from_zero (arr) Helper function to relabel a qubits array to an increasingly ordered one starting from zero e.g., [[2,3], [5], [7,8]]  ->  [[0,1], [2], [3,4]] Note: this assumes the input array is sorted in increasing order! submit_parallel_rb_job (backend_arg, ...) Submit fixed-depth parallel MRB jobs for execution in the specified IQMBackend :param backend_arg: the IQM backend to submit the job :type backend_arg: IQMBackendBase :param qubits_array: the qubits to identify the submitted job :type qubits_array: List[int] :param depth: the depth (number of canonical layers) of the circuits to identify the submitted job :type depth: int :param sorted_transpiled_circuit_dicts: A dictionary containing all MRB circuits :type sorted_transpiled_circuit_dicts: Dict[Tuple[int,...], List[QuantumCircuit]] :param shots: the number of shots to submit the job :type shots: int :param calset_id: the calibration identifier :type calset_id: Optional[str] :param max_gates_per_batch: the maximum number of gates per batch to submit the job :type max_gates_per_batch: Optional[str] :param max_circuits_per_batch: the maximum number of circuits per batch to submit the job. submit_sequential_rb_jobs (qubits, ...[, ...]) Submit sequential RB jobs for execution in the specified IQMBackend :param qubits: the qubits to identify the submitted job :type qubits: List[int] :param transpiled_circuits: A dictionary containing all MRB circuits :type transpiled_circuits: Dict[str, List[QuantumCircuit]] :param shots: the number of shots to submit per job :type shots: int :param backend_arg: the IQM backend to submit the job :type backend_arg: IQMBackendBase :param calset_id: the calibration identifier :type calset_id: Optional[str] :param max_gates_per_batch: the maximum number of gates per batch :type max_gates_per_batch: Optional[int] :param max_circuits_per_batch: the maximum number of circuits per batch :type max_circuits_per_batch: Optional[int] :param circuit_compilation_options: Compilation options passed to submit_execute :type circuit_compilation_options: Optional[CircuitCompilationOptions] survival_probabilities_parallel (...) Estimates marginalized survival probabilities from a parallel RB execution (at fixed depth) :param qubits_array: List of qubits in which the experiment was performed :type qubits_array: List[int] :param counts: The measurement counts for corresponding bitstrings :type counts: Dict[str, int] validate_irb_gate (gate_id, backend_arg[, ...]) Validate that an input gate is Clifford and transpiled to IQM's native basis validate_rb_qubits (qubits_array, backend_arg) Validate qubit inputs for a Clifford RB experiment :param qubits_array: the array of qubits :type qubits_array: List[List[int]] :param backend_arg: the IQM backend :type backend_arg: IQMBackendBase previous iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.quantum_volume.quantum_volume.is_successful","url":"/iqm-benchmarks/api/iqm.benchmarks.quantum_volume.quantum_volume.is_successful.html","description":"Check whether a QV benchmark returned heavy output results over the threshold, therefore being successful. This condition checks that the average of HOP is above the 2/3 threshold within the number of...","content":"Check whether a QV benchmark returned heavy output results over the threshold, therefore being successful. This condition checks that the average of HOP is above the 2/3 threshold within the number of sigmas given in\\nthe configuration. heavy_output_probabilities ( List [ float ] ) – the HOP of all quantum circuits. num_sigmas ( int ) – the number of sigmas to check whether the QV benchmark was successful. bool previous iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector next iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay.html","description":"Plot the fidelity decay and the fit to the model. identifier ( str ) – the type of RB experiment qubits_array ( List [ List [ int ] ] ) – Array of sets of qubits for which to plot decays dataset ( xr....","content":"Plot the fidelity decay and the fit to the model. identifier ( str ) – the type of RB experiment qubits_array ( List [ List [ int ] ] ) – Array of sets of qubits for which to plot decays dataset ( xr.dataset ) – the dataset from the experiment observations ( Dict [ str , Dict [ str , Any ] ] ) – the corresponding observations from the experiment bars ( bool , optional ) – Whether error bars are plotted or not. Defaults to False violin ( bool , optional ) – Whether violins are plotted or not. Defaults to True scatter ( bool , optional ) – Whether all individual points are plotted or not. Defaults to True shade_stdev ( bool , optional ) – Whether standard deviations are shaded or not. Defaults to False shade_meanerror ( bool , optional ) – Whether to shade standard deviations. Defaults to False logscale ( bool , optional ) – Whether x-axis uses logscale. Defaults to True interleaved_gate ( Optional [ str ] ) – The label or the interleaved gate. Defaults to None mrb_2q_density ( Optional [ float ] , optional ) – Density of MRB 2Q gates. Defaults to None. mrb_2q_ensemble ( Optional [ Dict [ str , float ] ] , optional ) – MRB ensemble of 2Q gates. Defaults to None. the plot title and the figure Tuple[ str , Figure] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.benchmark.BenchmarkConfigurationBase","url":"/iqm-benchmarks/api/iqm.benchmarks.benchmark.BenchmarkConfigurationBase.html","description":"Bases: BaseModel Benchmark configuration base. benchmark ( Type [ BenchmarkBase ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | Non...","content":"Bases: BaseModel Benchmark configuration base. benchmark ( Type [ BenchmarkBase ] ) – shots ( int ) – max_gates_per_batch ( int | None ) – max_circuits_per_batch ( int | None ) – calset_id ( str | None ) – routing_method ( Literal [ 'basic' , 'lookahead' , 'stochastic' , 'sabre' , 'none' ] ) – physical_layout ( Literal [ 'fixed' , 'batching' ] ) – use_dd ( bool | None ) – dd_strategy ( DDStrategy | None ) – the benchmark configuration. Type[ BenchmarkBase ] the number of shots to use in circuit execution.\\n* Default for all benchmarks is 2**8. int the maximum number of gates per circuit batch.\\n* Default for all benchmarks is None. Optional[ int ] the maximum number of circuits per batch.\\n* Default for all benchmarks is None. Optional[ int ] the calibration ID to use in circuit execution.\\n* Default for all benchmarks is None (uses last available calibration ID). Optional[ str ] the Qiskit routing method to use in transpilation.\\n* Default for all benchmarks is “sabre”. Literal[“basic”, “lookahead”, “stochastic”, “sabre”, “none”] whether physical layout is constrained during transpilation to selected physical qubits.\\n- “fixed”: physical layout is constrained during transpilation to the selected initial physical qubits.\\n- “batching”: physical layout is allowed to use any other physical qubits, and circuits are batched according to final measured qubits.\\n* Default for all benchmarks is “fixed”. Literal[“fixed”, “batching”] Boolean flag determining whether to enable dynamical decoupling during circuit execution.\\n* Default: False bool Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. benchmark  shots  max_gates_per_batch  max_circuits_per_batch  calset_id  routing_method  physical_layout  use_dd  dd_strategy  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.benchmarks.benchmark.BenchmarkBase next iqm.benchmarks.benchmark_definition By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit","url":"/iqm-benchmarks/api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit.html","description":"Perform a fitting routine for 0th-order (Ap^m+B) RB using lmfit func ( Callable ) – the model function for fitting qubit_set ( List [ int ] ) – the qubits entering the model data ( List [ List [ float...","content":"Perform a fitting routine for 0th-order (Ap^m+B) RB using lmfit func ( Callable ) – the model function for fitting qubit_set ( List [ int ] ) – the qubits entering the model data ( List [ List [ float ] ] | List [ List [ List [ float ] ] ] ) – the data to be fitted rb_identifier ( str ) – the RB identifier, either “stdrb”, “irb” or “mrb” simultaneous_fit_vars ( List [ str ] , optional ) – the list of variables used to fit simultaneously interleaved_gate_str ( Optional [ str ] ) – the name of the interleaved gate in IRB A tuple of fitting data (list of lists of average fidelities or polarizations) and MRB fit parameters Tuple [ ndarray , Parameters ] previous iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb next iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Benchmarking IQM Star","url":"/iqm-benchmarks/devices/star.html","description":"This notebook allows you to run some useful benchmarks for the Star system. We can access the Star backend and plot its connectivity graph to check that everything is working properly. We run the cell...","content":"This notebook allows you to run some useful benchmarks for the Star system. We can access the Star backend and plot its connectivity graph to check that everything is working properly. We run the cell below to ignore those warnings that are not critical for the correct run of the benchmarks. The GHZ (Greenberger-Horne-Zeilinger) state is a maximally entangled quantum state that involves three or more qubits, \\\\(n\\\\) . It is an equal superposition of all qubits being in state 0 and all qubits being in state 1, i.e., \\\\(| GHZ \\\\rangle = \\\\frac{1}{\\\\sqrt{2}}(|0\\\\rangle^{\\\\otimes n}+|1\\\\rangle^{\\\\otimes n})\\\\) . The GHZ state fidelity acts as a witness for genuine multi-qubit entanglement if found to be above \\\\(0.5\\\\) . This means that the measurement results cannot be explained without entanglement involving all qubits, so it is a great way to evaluate the “quantumness” of the computer. The state \\\\(\\\\rho_{\\\\text{ideal}}= |GHZ\\\\rangle\\\\langle GHZ|\\\\) is a pure state, so in this case the fidelity can be computed as: where \\\\(\\\\rho_{\\\\text{measured}}\\\\) is the density matrix given by the actual results of the quantum computer. The ideal GHZ state density matrix entries can be written as \\\\(\\\\rho_{i,j}=\\\\langle i| \\\\rho_{\\\\text{ideal}} | j \\\\rangle\\\\) where \\\\(i,j\\\\) are the \\\\(n\\\\) basis states \\\\(\\\\{|00..0\\\\rangle, ..., |11..1\\\\rangle\\\\}\\\\) ; only the corner entries \\\\(\\\\rho_{0,0},\\\\rho_{0,n},\\\\rho_{n,0}\\\\) and \\\\(\\\\rho_{n,n} \\\\) are non-zero. This simplifies the process since we only need to measure these four components. In the fidelity formula, all other entries are effectively nullified by the zero entries in the ideal state matrix. To measure the coherences (off-diagonal entries) we use the method of multiple quantum coherences Mooney, 2021 . Quantum volume is a single-number metric that was introduced in Cross, 2019 . It evaluates the quality of a quantum processor via the largest random square circuit, i.e., with the same number of layers of parallel random 2-qubit unitaries as number of qubits, that it can run successfully. The success of a run is based on the heavy output probability, which corresponds to the probability of observing heavy outputs , i.e. the measurement outputs that occcur with a probability greater than the median of the distribution. The heavy output generation problem asks if the generated distribution of the random circuit we run contains heavy outputs at least 2/3 of the time (on average) with a high confidence level, typically higher than 97.5%. It can be shown that the heavy output probability for an ideal device is at around 0.85 asymptotically.\\nThe quantum volume is then defined as where \\\\(n \\\\leq N\\\\) is a number of qubits and \\\\(d(n)\\\\) is the achievable depth , i.e. the largest depth such that we are confident the probability of observing a heavy output is greater than 2/3. We define a combination of qubits to test quantum volume on. If you want to modify the settings above, please refer to the documentation here . Warning: The following code cell may take few minutes to run since it will compute the benchmark on all the qubit layouts specified above. CLOPS is a metric that estimates the speed at which a quantum computer can execute Quantum Volume (QV) layers of a quantum circuit. That is, the circuits to calculate this benchmark have the same structure as the ones used for QV. Here we follow the definition introduced in ( Wack, 2021 ), but other versions of this benchmark exist. CLOPS is measured by means of a quantum variational-like protocol, where templates of parametrized QV circuits are assigned random parameters, executed, and outcomes are used as a seed to assign new parameters and repeat the process. The ratio of number of templates ( \\\\(M\\\\) ), parameter updates ( \\\\(K\\\\) ), measurement shots ( \\\\(S\\\\) ) and QV layers ( \\\\(\\\\log_2\\\\mathrm{QV}\\\\) ) with the time taken to run all, constitutes the CLOPS value: Notice that the total CLOPS time includes that of assignment of parameters, submission of circuits and retrieval of results. If you want to modify the settings above, please refer to the documentation here . The Q-score measures the maximum number of qubits that can be used\\neffectively to solve the MaxCut combinatorial optimization problem with the Quantum Approximate\\nOptimization Algorithm - Martiel,2021 The graphs chosen for the benchmark are random Erdős-Rényi graphs with 50% edge-probability between nodes.\\nThe obtained cost of the solution, i.e. the average number of cut edges, must be above a certain threshold. Specifically, one has to find the cost of a graph to be above \\\\(\\\\beta\\\\geq 0.2\\\\) on a scale where \\\\(\\\\beta = 0\\\\) corresponds to a random solution and \\\\(\\\\beta = 1\\\\) to an ideal solution. If you want to modify the settings above, please refer to the documentation here . Warning: The following code cell may take several minutes to run. previous Benchmarking IQM Spark next Development By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Benchmarking IQM Spark","url":"/iqm-benchmarks/devices/spark.html","description":"This notebook allows you to run some useful benchmarks for the Spark system. Before starting, make sure you have installed all the necessary packages: We can access the Spark backend and plot its conn...","content":"This notebook allows you to run some useful benchmarks for the Spark system. Before starting, make sure you have installed all the necessary packages: We can access the Spark backend and plot its connectivity graph to check that everything is working properly. We run the cell below to ignore those warnings that are not critical for the correct run of the benchmarks. The GHZ (Greenberger-Horne-Zeilinger) state is a maximally entangled quantum state that involves three or more qubits, \\\\(n\\\\) . It is an equal superposition of all qubits being in state 0 and all qubits being in state 1, i.e., \\\\(| GHZ \\\\rangle = \\\\frac{1}{\\\\sqrt{2}}(|0\\\\rangle^{\\\\otimes n}+|1\\\\rangle^{\\\\otimes n})\\\\) . The GHZ state fidelity acts as a witness for genuine multi-qubit entanglement if found to be above \\\\(0.5\\\\) . This means that the measurement results cannot be explained without entanglement involving all qubits, so it is a great way to evaluate the “quantumness” of the computer. The state \\\\(\\\\rho_{\\\\text{ideal}}= |GHZ\\\\rangle\\\\langle GHZ|\\\\) is a pure state, so in this case the fidelity can be computed as: where \\\\(\\\\rho_{\\\\text{measured}}\\\\) is the density matrix given by the actual results of the quantum computer. The ideal GHZ state density matrix entries can be written as \\\\(\\\\rho_{i,j}=\\\\langle i| \\\\rho_{\\\\text{ideal}} | j \\\\rangle\\\\) where \\\\(i,j\\\\) are the \\\\(n\\\\) basis states \\\\(\\\\{|00..0\\\\rangle, ..., |11..1\\\\rangle\\\\}\\\\) ; only the corner entries \\\\(\\\\rho_{0,0},\\\\rho_{0,n},\\\\rho_{n,0}\\\\) and \\\\(\\\\rho_{n,n} \\\\) are non-zero. This simplifies the process since we only need to measure these four components. In the fidelity formula, all other entries are effectively nullified by the zero entries in the ideal state matrix. To measure the coherences (off-diagonal entries) we use the method of multiple quantum coherences Mooney, 2021 . If you want to modify the settings above, please refer to the documentation here . Before running the benchmark analysis, we can visualize the histogram of counts obtained from measuring a GHZ state on 5 qubits: Quantum volume is a single-number metric that was introduced in Cross, 2019 . It evaluates the quality of a quantum processor via the largest random square circuit, i.e., with the same number of layers of parallel random 2-qubit unitaries as number of qubits, that it can run successfully. The success of a run is based on the heavy output probability, which corresponds to the probability of observing heavy outputs , i.e. the measurement outputs that occcur with a probability greater than the median of the distribution. The heavy output generation problem asks if the generated distribution of the random circuit we run contains heavy outputs at least 2/3 of the time (on average) with a high confidence level, typically higher than 97.5%. It can be shown that the heavy output probability for an ideal device is at around 0.85 asymptotically.\\nThe quantum volume is then defined as where \\\\(n \\\\leq N\\\\) is a number of qubits and \\\\(d(n)\\\\) is the achievable depth , i.e. the largest depth such that we are confident the probability of observing a heavy output is greater than 2/3. We define a combination of qubits to test quantum volume on. Due to the star topology, the combinations must contain at least qubit #2 (see topmost graph). If you want to modify the settings above, please refer to the documentation here . Warning: The following code cell may take few minutes to run since it will compute the benchmark on all the qubit layouts specified above. CLOPS is a metric that estimates the speed at which a quantum computer can execute Quantum Volume (QV) layers of a quantum circuit. That is, the circuits to calculate this benchmark have the same structure as the ones used for QV. Here we follow the definition introduced in ( Wack, 2021 ), but other versions of this benchmark exist. CLOPS is measured by means of a quantum variational-like protocol, where templates of parametrized QV circuits are assigned random parameters, executed, and outcomes are used as a seed to assign new parameters and repeat the process. The ratio of number of templates ( \\\\(M\\\\) ), parameter updates ( \\\\(K\\\\) ), measurement shots ( \\\\(S\\\\) ) and QV layers ( \\\\(\\\\log_2\\\\mathrm{QV}\\\\) ) with the time taken to run all, constitutes the CLOPS value: Notice that the total CLOPS time includes that of assignment of parameters, submission of circuits and retrieval of results. If you want to modify the settings above, please refer to the documentation here . The idea behind Clifford Randomized Benchmarking (CRB) is that under certain (simplified) types of noise, the average survival probability of an initial state \\\\(|0\\\\rangle\\\\) under random sequences of Clifford gates and a final sequence inverse will decay exponentially in the length of the sequences. This can be written as where \\\\(C_1, C_2, \\\\ldots, C_m\\\\) is the random sequences of Clifford gates, \\\\(C_\\\\text{inv}=(C_1C_2\\\\cdots{C}_m)^{-1}\\\\) , \\\\(0\\\\leq{p}\\\\leq{1}\\\\) and \\\\(0\\\\leq{A,B}\\\\leq1\\\\) are constants isolating the effects of state-preparation and measurement (SPAM) errors ( Magesan,2012 ). From such decay, one can in turn infer the average fidelity of the corresponding Clifford group. The main assumption we will make here is that the noise can be modeled as Markovian, time-stationary and gate-independent. The theory of CRB under these approximations, and the fact that the multi-qubit Clifford group is a unitary 2-design (i.e., uniformly averaging with two pairs of \\\\(C\\\\) , \\\\(C^{\\\\dagger}\\\\) Clifford operators gives the same result as using fully random unitaries), ensures that the average fidelity of our gate set is given by CRB is not generally intended to work for \\\\(n>2\\\\) , both because of the scaling of the size of the \\\\(n\\\\) -qubit Clifford group in \\\\(n\\\\) , and because such gates have to eventually be transpiled to a native basis of 1Q and 2Q gates! It is important to mention that the average Clifford fidelity is related to the average fidelity of IQM’s native gate set for single-qubit gates as ( Barends, 2014 ) This is because all the single-qubit Clifford gates can be decomposed using on average 1.875 gates from IQM’s native set. This formula shows that the value of \\\\(\\\\overline{F}_\\\\text{GATE}\\\\) will always be slightly higher than \\\\(\\\\overline{F}_\\\\text{CRB}\\\\) , so one must be careful when comparing with average fidelities reported in the specs of a QPU. If you want to modify the settings above, please refer to the documentation here . Warning: The following code cell may take few minutes to run since it will compute the average fidelities for all the qubits in the QPU (and we set parallel_execution=False ). Differently from the previous protocol, this benchmark aims at estimating the average fidelity of an individual quantum gate. This can be achieved interleaving random Clifford gates between the gate of interest. This method was introduced in Magesan, 2012 , and just as CRB, it is robust with respect to SPAM errors. The protocol runs two sets of sequences, one solely made up of random Clifford gates, as in CRB, and one made up of random Clifford sequences but interleaving the gate of interest among these (and compiling the corresponding sequence inverse). IRB then extracts the corresponding decay parameters (where we expect the decay rate for IRB to be smaller than the CRB one, because the sequence is longer), and the average fidelity of the gate we wish to characterize is then calculated with a simple formula using the two decay parameters. If you want to modify the settings above, please refer to the documentation here . NB: Clifford RB is executed by default when running Interleaved RB! Warning: The following code cells may take several minutes to run. The Q-score measures the maximum number of qubits that can be used\\neffectively to solve the MaxCut combinatorial optimization problem with the Quantum Approximate\\nOptimization Algorithm - Martiel,2021 The graphs chosen for the benchmark are random Erdős-Rényi graphs with 50% edge-probability between nodes.\\nThe obtained cost of the solution, i.e. the average number of cut edges, must be above a certain threshold. Specifically, one has to find the cost of a graph to be above \\\\(\\\\beta\\\\geq 0.2\\\\) on a scale where \\\\(\\\\beta = 0\\\\) corresponds to a random solution and \\\\(\\\\beta = 1\\\\) to an ideal solution. If you want to modify the settings above, please refer to the documentation here . Warning: The following code cell may take several minutes to run. Typical performance for IQM Spark is summarized in the table below and compared to the values obtained with your device. The typical single- and two-qubit gate fidelities reported below refer to the median over the 5 qubits and 4 couplings of the system, respectively. previous Devices next Benchmarking IQM Star By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Devices","url":"/iqm-benchmarks/devices/devices.html","description":"This section provides examples and guidance on how to benchmark specific IQM devices. previous Q-Score next Benchmarking IQM Spark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2...","content":"This section provides examples and guidance on how to benchmark specific IQM devices. previous Q-Score next Benchmarking IQM Spark By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Circuit Layer Operations Per Second (CLOPS)","url":"/iqm-benchmarks/examples/example_clops.html","description":"previous QV on Deneb next Greenberger–Horne–Zeilinger (GHZ) State Fidelity By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30....","content":"previous QV on Deneb next Greenberger–Horne–Zeilinger (GHZ) State Fidelity By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Clifford Randomized Benchmarking (RB)","url":"/iqm-benchmarks/examples/example_clifford_rb.html","description":"NB: Clifford RB is executed by default with Interleaved RB ! previous IQM Benchmarks: Summary Notebook next Interleaved Randomized Benchmarking (IRB) By IQM Benchmarks developers © Copyright 2024, IQM...","content":"NB: Clifford RB is executed by default with Interleaved RB ! previous IQM Benchmarks: Summary Notebook next Interleaved Randomized Benchmarking (IRB) By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Examples","url":"/iqm-benchmarks/examples/examples.html","description":"This section contains a collection of examples that demonstrate how to use the IQM Benchmarks package to perform various benchmarks. The first run all experiments in the package, and the rest are spec...","content":"This section contains a collection of examples that demonstrate how to use the IQM Benchmarks package to perform various benchmarks. The first run all experiments in the package, and the rest are specific examples of different benchmarking protocols. previous IQM Benchmarks next IQM Benchmarks: Summary Notebook By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Greenberger–Horne–Zeilinger (GHZ) State Fidelity","url":"/iqm-benchmarks/examples/example_ghz.html","description":"The aim of this benchmark is to show whether a GHZ state with high enough fidelity can be prepared such that the state is genuinely multipartite entangled. One can show that a fidelity larger than 0.5...","content":"The aim of this benchmark is to show whether a GHZ state with high enough fidelity can be prepared such that the state is genuinely multipartite entangled. One can show that a fidelity larger than 0.5 is a sufficient condition (see Leibfried, D. et al., Creation of a six-atom ‘Schrödinger cat’ state. Nature 438, 639–642 (2005)) The benchmark currently offers two methods to estimate the fidelity: Multiple quantum coherences (G. J. Mooney et al., Generation and verification of 27-qubit Greenberger-Horne-Zeilinger states in a superconducting quantum computer, J. Phys. Commun. 5, 095004 (2021)) Randomized measurements (Elben, A. et al., Statistical correlations between locally randomized measurements: A toolbox for probing entanglement in many-body quantum states, Phys. Rev. A 99, 052323 (2019)) Additionally, for a given set of \\\\(n\\\\) qubits, different circuits can be applied which lead to the same GHZ state. Currently there are the following implementations: “naive”: The textbook ciruit of depth \\\\(n\\\\) , which starts from a Hadamrd gate on one qubit and entangles each additional qubit with a CNOT operation from the first. “log_depth”: A logarithmic depth circuit utilizing parallel CNOT applications. Either the method in Cruz et al. https://arxiv.org/abs/1807.05572 or the method in Mooney et al. https://arxiv.org/abs/2101.08946 is used, depending on which yields the lower depth or the lower number of 2-qubit gates. “tree”: An in-house logarithmic depth circuit utilizing calibration data of the CZ-fidelities and a tree-graph algorithm to find a circuit with minimal depth and high fidelity 2-qubit gates. Note that the first two methods will always give the same circuit for the same qubit layout (and the same coupling map), while the “tree” method relies on the latest calibration fidelities and can give different circuits on different days.\\nThus for consistent comparisons one of the first two methods should be chosen, while for the best results, i.e. the largest possible GME entangled GHZ state, the tree-method is preferable. The important parameters are: custom_qubits_array : A list[list[int]] which includes all qubit layouts on which the benchmark is run. shots : The number of shots for the fidelity measurement fidelity_routine : Either “coherences” or “randomized_measurements” rem : Boolean value that controls whether readout error mitigation is used mit_shots : Whenever rem=True, this parameter controls the total number of shots used to calibrate readout error mitgation num_RMs : The number of randomized measurement settings (only necessary when choosing fidelity_routine=randomized_measurements ) For thinking about which qubit layouts to use, the following visualization of the connectivity and CZ fidelities is helpful. Requirements: Access to the backend, in this example IQM Garnet. An access token environment variable needs to be set via os.environ[\\"IQM_TOKEN\\"] = <your_token> . Use of the plot: If the qubit_layouts argument is provided, the selected qubits are marked in orange. CZ errors are indicated with edge width, thinner is better , where the edge width is given by \\\\(w_{ij} = - \\\\mathrm{log}(\\\\mathcal{F}_{\\\\mathrm{CZ}}^{ij})\\\\) . Each edge is also labeled with the width value. Some graph layouts are predefined to match the layout as shown in IQM-Resonance. If the layout is not predefined, a graph in grid or star layout will be automatically generated, dependeing on the backend. Automatically generated graphs might need to be rerun a few times until a nice node layout is found. To see individual fidelitiy and uncertainty values of a given qubit layout, one can filter the result.observations -list by layout as shown below. The plot allows a comparison of all layout results with and without REM, where the data point description labels “L0”, “L1”, … enumerate the layouts in the order defined in the configuration. previous Circuit Layer Operations Per Second (CLOPS) next Greenberger–Horne–Zeilinger (GHZ) State Fidelity By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Compressive Gate Set Tomography (GST)","url":"/iqm-benchmarks/examples/example_gst.html","description":"This notebook gives an introduction on how to run compressive gate set tomography, what the input parameters mean and how to display different observations and plots. This notebook and the compressive...","content":"This notebook gives an introduction on how to run compressive gate set tomography, what the input parameters mean and how to display different observations and plots. This notebook and the compressive GST functionality requires the optional dependency “mgst” to be installed. For background, see the journal reference at https://journals.aps.org/prxquantum/abstract/10.1103/PRXQuantum.4.010325 The most important parameters are the following: qubits ( List[int] ): The qubits on the backend where the experiment is performed. gate_set ( Union[str, List[Type[QuantumCircuit]]] ): Either one of the currently predefined gate sets \\"1QXYI\\" , \\"2QXYCZ\\" , \\"2QXYCZ_extended\\" , \\"3QXYCZ\\" , or a list of quantum circuits. num_circuits ( int ): The number of circuits for the experiment. Recommended are at least 50 for single qubit GST, at least 300 for two-qubit GST and at least 2000 for 3-qubit GST. shots ( int ): The number of shots per circuit. rank ( int ): The Kraus rank of the reconstruction, i.e. the number of Kraus operators for each gate.\\n$ \\\\( G(\\\\rho) = \\\\sum_{i = 1}^{\\\\text{rank}} K_i \\\\rho K_i^{\\\\dagger}\\\\) $\\nSetting rank=1 will trigger a unitary gate fit, leading to a gate parametrization output in terms Hamiltonian parameters.\\nThe maximum rank is given by the physical dimension squared. For fully rigorous performance computation of metrics such as the average gate fidelity or the diamond distance it is recommended to choose full rank.\\nA low rank has the benefit of needing less circuits and less computing time, while still capturing the dominant error sources. bootstrap_samples ( int ): If bootstrapping error bars are to be generated, this variable sets the number of bootstrap runs. Recommended for trustworthy error bars are 50 samples. The default is 0, since computing bootstrap error bars is very time consuming. Be prepared that the first execution on a new system will take an extra 1-2 minutes to compile the lower level optimization code. For uncertaintites on the observations set bootstrap_samples \\\\(\\\\geq 10\\\\) . The high level results are stored in a list of Observations under restult.observations .\\nTo access only those observations corresponding to a specific qubit layout, one can use the identifier attribute: In addition to the high level observations above, the full process matrices for each gate and the full parametrizations for initial state and measurement are stored. They can be accessed under result.dataset.attrs[f\\"results_layout_{qubit_layout}\\"] as follows. Two gate sets are saved, the raw gate set and the gauge-optimized gate set.\\nIn most instances the gauge-optimized gate set should be used for further processing, since it gives the gate set in the reference frame in which the target gates are defined. The \\"raw_gates\\" and \\"gauge_opt_gates\\" keys in the outcome dictionary contain a 3D numpy array, where i.e. gate #1 is accessed with raw_results[\\"gauge_opt_state\\"][0] , and so on. The plots can be accessed in the notebook via result.plots, a dictionary containing all figure objects. These can then be diplayed as shown below, or saved to disc from the notebook.\\nCurrently all gauge optimized gate superoperators are shown as matrix plots in their Pauli basis representation, while the state preparation and measurement outcomes are shown as matrix plots in standard basis.\\nFor reference, a sinlge qubit superoperator for gate \\\\(G\\\\) in the Pauli-basis has entries \\\\(G_{ij}\\\\) defined via\\n$ \\\\(\\nG(\\\\rho) = \\\\frac{1}{2} \\\\sum_{i,j = 1}^4 G_{ij} P_i Tr(P_j \\\\rho),\\n\\\\) \\\\(\\nwhere \\\\) P_i, P_j$ are Pauli matrices. In addition to gate plots, selections of gate error measures and gate parameters are also stored in figure objects. Stored plot names can be displayed and individually plotted as follows. Alternatively, all plots (of all layouts) can be displayed via result.plot_all() . In this example we define a gate set ourselves as a list of quantum circuits. The example gate set chosen here is the “XYI” gate set with the addition of \\\\(\\\\pi\\\\) -rotations around the X- and Y-axis.\\nNote that we also increased the number of random GST sequences in the GST configuration from 50 to 100 to account for the larger gate set. previous Graph State Benchmark Example next Quantum Volume (QV) By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Greenberger–Horne–Zeilinger (GHZ) State Fidelity","url":"/iqm-benchmarks/examples/example_ghz_deneb.html","description":"The aim of this benchmark is to show whether a GHZ state with high enough fidelity can be prepared such that the state is genuinely multipartite entangled. One can show that a fidelity larger than 0.5...","content":"The aim of this benchmark is to show whether a GHZ state with high enough fidelity can be prepared such that the state is genuinely multipartite entangled. One can show that a fidelity larger than 0.5 is a sufficient condition (see Leibfried, D. et al., Nature 438, 639–642 (2005)) The benchmark currently offers two methods to estimate the fidelity: Multiple quantum coherences (G. J. Mooney et al., J. Phys. Commun. 5, 095004 (2021)) Randomized measurements (Elben, A. et al., Phys. Rev. A 99, 052323 (2019)) Additionally, for a given set of \\\\(n\\\\) qubits, different circuits can be applied which lead to the same GHZ state. Currently there are the following implementations: “naive”: The textbook ciruit of depth \\\\(n\\\\) , which starts from a Hadamard gate on one qubit and entangles each additional qubit with a CNOT operation from the first qubit. “log_depth”: A logarithmic depth circuit utilizing parallel CNOT applications. Either the method in Cruz et al. arXiv:1807.05572 or the method in Mooney et al. arXiv:2101.08946 is used, depending on which yields the lower depth or the lower number of 2-qubit gates. “star”: A linear circuit that creates GHZ states that is tailored for IQM’s novel, effectively all-to-all, connected QPU topology. “tree”: An IQM-developed logarithmic depth circuit utilizing calibration data of the CZ average fidelities and a tree-graph algorithm to find a circuit with minimal depth and high fidelity 2-qubit gates. Note that the first two methods will always give, respectively, the same circuits for the same qubit layouts and same coupling maps, while the tree method relies on the latest calibration data and can give different circuits at different execution times.\\nThus, for consistent comparisons, one of the first two methods should be chosen, while for the best results, i.e., the largest possible Genuine Multipartite Entanglement (GME) - entangled GHZ state, the tree -method is preferable. The important parameters are: custom_qubits_array : A list[list[int]] which includes all qubit layouts on which the benchmark is run. shots : The number of shots for the fidelity measurement fidelity_routine : Either “coherences” or “randomized_measurements” rem : Boolean value that controls whether readout error mitigation is used mit_shots : Whenever rem=True, this parameter controls the total number of shots used to calibrate readout error mitgation num_RMs : The number of randomized measurement settings (only necessary when choosing fidelity_routine=randomized_measurements ) For thinking about which qubit layouts to use, the following visualization of the connectivity and CZ fidelities is helpful. Requirements: Access to the backend, in this example IQM Garnet. An access token environment variable needs to be set via os.environ[\\"IQM_TOKEN\\"] = <your_token> . Use of the plot: If the qubit_layouts argument is provided, the selected qubits are marked in orange. CZ errors are indicated with edge width, thinner is better , where the edge width is given by \\\\(w_{ij} = - \\\\mathrm{log}(\\\\mathcal{F}_{\\\\mathrm{CZ}}^{ij})\\\\) . Each edge is also labeled with the width value. Some graph layouts are predefined to match the layout as shown in IQM-Resonance. If the layout is not predefined, a graph in grid or star layout will be automatically generated, dependeing on the backend. Automatically generated graphs might need to be rerun a few times until a nice node layout is found. To see individual fidelitiy and uncertainty values of a given qubit layout, one can filter the result.observations -list by layout as shown below. The plot allows a comparison of all layout results with and without REM, where the data point description labels “L0”, “L1”, … enumerate the layouts in the order defined in the configuration. previous Greenberger–Horne–Zeilinger (GHZ) State Fidelity next Q-Score By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Quantum Volume (QV)","url":"/iqm-benchmarks/examples/example_quantum_volume.html","description":"One can perform a separate run of the benchmark (also possible with a different configuration) List all the keys in the attributes of the dataset The data for specific experiments is indexed by 0,1,…,...","content":"One can perform a separate run of the benchmark (also possible with a different configuration) List all the keys in the attributes of the dataset The data for specific experiments is indexed by 0,1,…, e.g., for the first experiment: The observation object contains the benchmark results Print a specific output Or print all the plots at once previous Compressive Gate Set Tomography (GST) next QV on Deneb By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Graph State Benchmark Example","url":"/iqm-benchmarks/examples/example_graphstate.html","description":"Set IQM Token if using Resonance. The negativity is shown as a percentage of the ideal maximum value of 0.5 (which would be achieved on a noiseless backend). Plot the lowest and highest negativity res...","content":"Set IQM Token if using Resonance. The negativity is shown as a percentage of the ideal maximum value of 0.5 (which would be achieved on a noiseless backend). Plot the lowest and highest negativity resconstructed density matrices Display max negativities in the backend graph All the qubit pair groups generated during execution previous Mirror Randomized Benchmarking (MRB) next Compressive Gate Set Tomography (GST) By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Mirror Randomized Benchmarking (MRB)","url":"/iqm-benchmarks/examples/example_mirror_rb.html","description":"previous Interleaved Randomized Benchmarking (IRB) next Graph State Benchmark Example By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30....","content":"previous Interleaved Randomized Benchmarking (IRB) next Graph State Benchmark Example By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Interleaved Randomized Benchmarking (IRB)","url":"/iqm-benchmarks/examples/example_interleaved_rb.html","description":"Set IQM Token if using Resonance. previous Clifford Randomized Benchmarking (RB) next Mirror Randomized Benchmarking (MRB) By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-3...","content":"Set IQM Token if using Resonance. previous Clifford Randomized Benchmarking (RB) next Mirror Randomized Benchmarking (MRB) By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"Q-Score","url":"/iqm-benchmarks/examples/example_qscore.html","description":"previous Greenberger–Horne–Zeilinger (GHZ) State Fidelity next Devices By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30....","content":"previous Greenberger–Horne–Zeilinger (GHZ) State Fidelity next Devices By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"QV on Deneb","url":"/iqm-benchmarks/examples/example_quantum_volume_deneb.html","description":"One can perform a separate run of the benchmark (also possible with a different configuration) List all the keys in the attributes of the dataset The data for specific experiments is indexed by 0,1,…,...","content":"One can perform a separate run of the benchmark (also possible with a different configuration) List all the keys in the attributes of the dataset The data for specific experiments is indexed by 0,1,…, e.g., for the first experiment: The observation object contains the benchmark results Print a specific output Or print all the plots at once previous Quantum Volume (QV) next Circuit Layer Operations Per Second (CLOPS) By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"iqm-benchmarks","title":"IQM Benchmarks: Summary Notebook","url":"/iqm-benchmarks/examples/example_experiment_all.html","description":"NB: Clifford RB is executed by default with Interleaved RB ! previous Examples next Clifford Randomized Benchmarking (RB) By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30...","content":"NB: Clifford RB is executed by default with Interleaved RB ! previous Examples next Clifford Randomized Benchmarking (RB) By IQM Benchmarks developers © Copyright 2024, IQM. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"Cirq on IQM","url":"/cirq-iqm/index.html","description":"16.1 2025-03-30 iqm-finland/cirq-on-iqm Google Cirq adapter for IQM’s quantum architectures. Currently Cirq on IQM can take an arbitrary quantum circuit created using Cirq or imported from an OpenQASM...","content":"16.1 2025-03-30 iqm-finland/cirq-on-iqm Google Cirq adapter for IQM’s quantum architectures. Currently Cirq on IQM can take an arbitrary quantum circuit created using Cirq or imported from an OpenQASM 2.0 file map the circuit into an equivalent one compatible with the chosen IQM quantum architecture optimize the circuit by commuting and merging gates simulate the circuit using one of Cirq’s simulators run the circuit on an IQM quantum computer Take a look at our User guide for an introduction on how to install and use Cirq on IQM. Index Module Index Search Page next User guide By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"API Reference","url":"/cirq-iqm/API.html","description":"iqm.cirq_iqm Types for representing and methods for manipulating operations on IQM's quantum computers. previous User guide next iqm.cirq_iqm By Cirq on IQM developers © Copyright 2020–2024, Cirq on I...","content":"iqm.cirq_iqm Types for representing and methods for manipulating operations on IQM's quantum computers. previous User guide next iqm.cirq_iqm By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"User guide","url":"/cirq-iqm/user_guide.html","description":"This guide serves as an introduction to the main features of Cirq on IQM. You are encouraged to run the demonstrated\\ncode snippets and check the output yourself. The recommended way is to install the ...","content":"This guide serves as an introduction to the main features of Cirq on IQM. You are encouraged to run the demonstrated\\ncode snippets and check the output yourself. The recommended way is to install the distribution package cirq-iqm directly from the Python Package Index (PyPI): After installation Cirq on IQM can be imported in your Python code as follows: Cirq on IQM provides descriptions of IQM’s quantum architectures using the IQMDevice class, which is a\\nsubclass of cirq.devices.Device and implements general functionality relevant to all IQM devices. The native\\ngates and connectivity of the architecture are available in the IQMDeviceMetadata object returned by the IQMDevice.metadata property. It is possible to use the IQMDevice class directly, but\\ncertain devices with predefined metadata are also available as subclasses of IQMDevice. As an example, let\\nus import the class Adonis , which describes IQM’s five-qubit architecture, and view some of its\\nproperties contained in its metadata property: IQM devices use cirq.NamedQubit to represent their qubits. The names of the qubits consist of a prefix\\nfollowed by a numeric index, so we have qubit names like QB1 , QB2 , etc. Note that we use 1-based\\nindexing. You can get the list of the qubits in a particular device by accessing the qubits attribute of a\\ncorresponding IQMDevice instance: There are two main ways of constructing cirq.Circuit instances for IQM devices: Create a Circuit instance using arbitrary qubit names and types. Create a Circuit from an OpenQASM 2.0 program. The qubit names are determined by the OpenQASM qreg names,\\nappended with zero-based indices. Below we give an example of each method. Construct a circuit and use arbitrary qubits: This will result in the circuit You can read an OpenQASM 2.0 program from a file (or a string), e.g. and convert it into a cirq.Circuit object using circuit_from_qasm() . circuit_from_qasm() uses the OpenQASM 2.0 parser in cirq.contrib.qasm_import . After a circuit has been constructed, it can be decomposed and routed against a particular IQMDevice . The method IQMDevice.decompose_circuit() accepts a cirq.Circuit object as an argument and\\nreturns the decomposed circuit containing only native operations for the corresponding device: The Hadamard and CNOT gates are not native to Adonis, so they were decomposed to X, Y and CZ gates which are. Routing means transforming a circuit such that it acts on the device qubits, and respects the\\ndevice connectivity.\\nThe method IQMDevice.route_circuit() accepts a cirq.Circuit object as an argument,\\nand returns the circuit routed against the device, acting on the device qubits instead of the\\narbitrary qubits we had originally. Along with the routed circuit route_circuit() returns the initial_mapping and final_mapping .\\nThe initial_mapping is either the mapping from circuit to device qubits as provided by an cirq.AbstractInitialMapper or a mapping that is initialized from the device graph.\\nThe final_mapping is the mapping from physical qubits before inserting SWAP gates to the physical\\nqubits after the routing is complete As mentioned above, you may also provide the initial mapping from the logical qubits in the circuit to the physical qubits on the device yourself, by using the keyword argument initial_mapper .\\nIt serves as the starting point of the routing: Under the hood, route_circuit() leverages the routing provided by cirq.RouteCQC .\\nIt works on single- and two-qubit gates, and measurement operations of arbitrary size.\\nIf you have gates involving more than two qubits you need to decompose them before routing.\\nSince routing may add some SWAP gates to the circuit, you will need to decompose the circuit\\nagain after the routing, unless SWAP is a native gate for the target device. To ensure that the transpiler is restricted to a specific subset of qubits, you can provide a list\\nof qubits in the qubit_subset argument such that ancillary qubits will not be added during\\nrouting. This is particularly useful when running Quantum Volume benchmarks. Devices that have the IQM Star architecture (e.g. IQM Deneb) contain\\ncomputational resonators in addition to qubits, and use qubit-resonator gates instead of two-qubit\\ngates. These include the MOVE gate which moves qubit states to and from the resonators.\\nThere are two main supported workflows for the Star architecture: Construct your circuit as you would for a regular qubits-only device, decompose (and optimize)\\nit to native gates, and then route it using IQMDevice.route_circuit() .\\nThis will attempt to route all the (fictional) two-qubit gates in the circuit through the\\nresonator(s) using the native gates, adding MOVE gates as necessary.\\nUnder the hood, this uses the transpile_insert_moves() function of the iqm_client library. Construct your circuit directly using the device qubits, resonators, and qubit-resonator gates,\\nrouting it manually. Advanced users can use transpile_insert_moves_into_circuit() to transpile circuits that\\nhave some MOVE gates in them in addition to fictional qubit-qubit gates. Yet another important topic is circuit optimization. In addition to the optimizers available in Cirq you can also\\nbenefit from Cirq on IQM’s optimizers module which contains some optimization tools geared towards IQM devices.\\nThe function optimizers.simplify_circuit() is a convenience method encapsulating a particular sequence of\\noptimizations. Let us try it out on our decomposed and routed circuit above: Note The funtion simplify_circuit() is not associated with any IQM device, so its result may contain non-native\\ngates for a particular device. In the example above we don’t have them, however it is generally a good idea to run\\ndecomposition once again after the simplification. Some IQM quantum computers support classically-controlled gates, that is, gates that are executed\\nconditionally depending on the result of a measurement preceding them in the quantum circuit. This\\nsupport currently has several limitations: Only the PhasedXPowGate , XPowGate and YPowGate gates can be classically controlled. The gates can only be conditioned on the measurement result of a single qubit, and the only control available is to\\napply the gate if the result is 1, and apply an identity gate if the result is 0. The availability of the controlled gates depends on the instrumentation of the quantum computer. The classical control can be applied on an operation using with_classical_controls() : After an X gate is applied on Alice , the qubit is measured and the result is stored\\nin the key A . If the result is 1 (which it should always be in this case),\\nanother X gate is subsequently applied on Bob . If it is 0, an identity gate of corresponding\\nduration is applied instead. The final measurement in the above circuit should always return 11 , even though Alice and Bob are never\\nactually entangled. Note Because classically controlled gates can currently only take feedback from one classical bit you must condition\\nthem on a measurement key that only measures a single qubit. Note You can access IQM quantum computers via IQM Resonance or use one of the IQM quantum computers deployed at HPC centers and research institutions around the globe. Cirq contains various simulators which you can use to simulate the circuits constructed above.\\nIn this subsection we demonstrate how to run them on an IQM quantum computer. Cirq on IQM provides IQMSampler , a subclass of cirq.work.Sampler , which is used\\nto execute quantum circuits and decompose/route them for the architecture of the quantum computer.\\nOnce you have access to an IQM server you can create an IQMSampler instance and use its run() method to send a circuit for execution and retrieve the results: Note that the code snippet above assumes that you have set the variable iqm_server_url to the URL\\nof the IQM server. Additionally, you can pass IQM backend specific options to the IQMSampler class.\\nThe below table summarises the currently available options: Name Type Example value Description calibration_set_id uuid.UUID “f7d9642e-b0ca-4f2d-af2a-30195bd7a76d” Indicates the calibration set to use. Defaults to None , which means the IQM server will use the\\ncurrent default calibration set automatically. compiler_options CircuitCompilationOptions see below Contains various options that affect the compilation of the quantum circuit into an\\ninstruction schedule. The CircuitCompilationOptions class contains the following attributes (in addition to some\\nadvanced options described in the API documentation): Name Type Example value Description max_circuit_duration_over_t2 float | None 1.0 Set server-side circuit disqualification threshold. If any circuit in a job is estimated to take longer than the\\nshortest T2 time of any qubit used in the circuit multiplied by this value, the server will reject the job.\\nSetting this value to 0.0 will disable circuit duration check.\\nThe default value None means the server default value will be used. heralding_mode HeraldingMode “zeros” Heralding mode to use during execution. The default value is “none”, “zeros” enables\\nall-zeros heralding where the circuit qubits are measured before the circuit begins, and the\\nserver post-selects and returns only those shots where the heralding measurement yields zeros\\nfor all the qubits. For example if you would like to use a particular calibration set, you can provide it as follows: The sampler will by default use an IQMDevice created based on architecture data obtained\\nfrom the server, which is then available in the IQMSampler.device property. The architecture\\ndata depends on the calibration set used by the sampler, so one should usually use different sampler\\ninstances for different calibration sets. Alternatively, the device can be specified directly with\\nthe device argument, but this is not recommended when running on a real quantum computer. When executing a circuit that uses something other than the device qubits, you need to route it first,\\nas explained in the Routing section above. If you are using IQM Resonance, you have two options to authenticate: Set the IQM_TOKEN environment variable with the API token obtained from the Resonance dashboard. Pass the token parameter to IQMSampler . This will be forwarded to IQMClient . If the IQM server you are connecting to requires authentication, you may use Cortex CLI to retrieve and automatically refresh access tokens,\\nthen set the IQM_TOKENS_FILE environment variable, as instructed, to point to the tokens file.\\nSee Cortex CLI’s documentation for details. Alternatively, you may authenticate yourself using the IQM_AUTH_SERVER , IQM_AUTH_USERNAME and IQM_AUTH_PASSWORD environment variables, or pass them as\\narguments to IQMSampler , but this approach is less secure and\\nconsidered deprecated. Multiple circuits can be submitted to the IQM quantum computer at once using the run_iqm_batch() method of IQMSampler .  This is often faster than\\nexecuting the circuits individually. Circuits submitted in a batch are still executed sequentially. It is possible to inspect the final circuits that would be submitted for execution before actually submitting them,\\nwhich can be useful for debugging purposes. This can be done using IQMSampler.create_run_request() , which returns\\na RunRequest containing the circuits and other data. The method accepts the same\\nparameters as IQMSampler.run() and IQMSampler.run_iqm_batch() , and creates the run request in the same\\nway as those functions. It is also possible to print a run request when it is actually submitted by setting the environment variable IQM_CLIENT_DEBUG=1 . More examples are available in the examples directory of the Cirq on IQM repository. Cirq on IQM is an open source Python project.\\nYou can contribute by creating GitHub issues to report bugs or request new features,\\nor by opening a pull request to submit your own improvements to the codebase. To start developing the project, clone the GitHub repository and install it in editable mode with all the extras: Build and view the docs: Run the tests: After implementing changes to Cirq on IQM one usually wants to release a new version. This means\\nthat after the changes are merged to the main branch - the repository should have an updated CHANGELOG with information about the new changes, the latest commit should be tagged with the new version number, and a release should be created based on that tag. The last two steps are automated, so one needs to worry only about properly updating the CHANGELOG.\\nIt should be done along with the pull request which is introducing the main changes. The new version\\nmust be added on top of all existing versions and the title must be “Version MAJOR.MINOR”, where MAJOR.MINOR\\nrepresents the new version number. Please take a look at already existing versions and format the rest of\\nyour new CHANGELOG section similarly. Once the pull request is merged into main, a new tag and a release will\\nbe created automatically based on the latest version definition in the CHANGELOG. previous Cirq on IQM next API Reference By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"Contributors","url":"/cirq-iqm/authors.html","description":"Olli Ahonen < olli @ meetiqm . com > Ville Bergholm < ville @ meetiqm . com > Johan Guldmyr < johan @ meetiqm . com > Caspar Ockeloen-Korppi < caspar @ meetiqm . com > Maxim Smirnov < dc914337 @ gmail...","content":"Olli Ahonen < olli @ meetiqm . com > Ville Bergholm < ville @ meetiqm . com > Johan Guldmyr < johan @ meetiqm . com > Caspar Ockeloen-Korppi < caspar @ meetiqm . com > Maxim Smirnov < dc914337 @ gmail . com > Maija Nevala < maija @ meetiqm . com > Olli Tyrkkö < otyrkko @ meetiqm . com > Rakhim Davletkaliyev < rakhim . davletkaliyev @ meetiqm . com > Jake Muff < jake . muff @ vtt . fi > Janne Kotilahti < janne @ meetiqm . com > previous License next Changelog By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.optimizers.MergeOneParameterGroupGates","url":"/cirq-iqm/api/iqm.cirq_iqm.optimizers.MergeOneParameterGroupGates.html","description":"Bases: PointOptimizer Merges adjacent gates belonging to the same parametrized gate family. The merged gates have to act on the same sequence of qubits.\\nThis optimizer only works with gate families th...","content":"Bases: PointOptimizer Merges adjacent gates belonging to the same parametrized gate family. The merged gates have to act on the same sequence of qubits.\\nThis optimizer only works with gate families that are known to be one-parameter groups. For now, all the families are assumed to be periodic with a period of 4. Attributes GATE_MERGING_TOLERANCE  ONE_PARAMETER_FAMILIES  PERIOD  Methods _normalize_par (par) Normalizes the given parameter value to (-period/2, period/2]. optimization_at (circuit, index, op) Describes how to change operations near the given location. post_clean_up ( Callable [ [ Sequence [ cirq.Operation ] ] , cirq.OP_TREE ] ) – Describes how to change operations near the given location. circuit ( Circuit ) – The circuit to improve. index ( int ) – The index of the moment with the operation to focus on. op ( Operation ) – The operation to focus improvements upon. A description of the optimization to perform, or else None if no\\nchange should be made. PointOptimizationSummary | None previous iqm.cirq_iqm.optimizers.DropRZBeforeMeasurement next iqm.cirq_iqm.serialize By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices.apollo","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.apollo.html","description":"IQM’s Apollo quantum architecture. Classes Apollo () IQM's twenty-qubit transmon device. Inheritance previous iqm.cirq_iqm.devices.adonis.Adonis next iqm.cirq_iqm.devices.apollo.Apollo By Cirq on IQM ...","content":"IQM’s Apollo quantum architecture. Classes Apollo () IQM's twenty-qubit transmon device. Inheritance previous iqm.cirq_iqm.devices.adonis.Adonis next iqm.cirq_iqm.devices.apollo.Apollo By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.extended_qasm_parser","url":"/cirq-iqm/api/iqm.cirq_iqm.extended_qasm_parser.html","description":"Imports OpenQASM 2.0 programs in a way that preserves gates native to the IQM architectures. Functions circuit_from_qasm (qasm) Parses an OpenQASM 2.0 program to a Cirq circuit. previous iqm.cirq_iqm....","content":"Imports OpenQASM 2.0 programs in a way that preserves gates native to the IQM architectures. Functions circuit_from_qasm (qasm) Parses an OpenQASM 2.0 program to a Cirq circuit. previous iqm.cirq_iqm.devices.iqm_device_metadata.IQMDeviceMetadata next iqm.cirq_iqm.extended_qasm_parser.circuit_from_qasm By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.serialize","url":"/cirq-iqm/api/iqm.cirq_iqm.serialize.html","description":"Helper functions for serializing and deserializing quantum circuits between Cirq and IQM Circuit formats. Functions deserialize_circuit (circuit) Deserializes a quantum circuit from the IQM data trans...","content":"Helper functions for serializing and deserializing quantum circuits between Cirq and IQM Circuit formats. Functions deserialize_circuit (circuit) Deserializes a quantum circuit from the IQM data transfer format to a Cirq Circuit. instruction_to_operation (instr) Convert an IQM instruction to a Cirq Operation. map_operation (operation) Map a Cirq Operation to the IQM data transfer format. serialize_circuit (circuit) Serializes a quantum circuit into the IQM data transfer format. Exceptions OperationNotSupportedError Raised when a given operation is not supported by the IQM server. previous iqm.cirq_iqm.optimizers.MergeOneParameterGroupGates next iqm.cirq_iqm.serialize.deserialize_circuit By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.iqm_gates","url":"/cirq-iqm/api/iqm.cirq_iqm.iqm_gates.html","description":"Implementations for IQM specific quantum gates Classes IQMMoveGate (*[, exponent, global_shift]) The MOVE operation is a unitary population exchange operation between a qubit and a resonator. Inherita...","content":"Implementations for IQM specific quantum gates Classes IQMMoveGate (*[, exponent, global_shift]) The MOVE operation is a unitary population exchange operation between a qubit and a resonator. Inheritance previous iqm.cirq_iqm.extended_qasm_parser.circuit_from_qasm next iqm.cirq_iqm.iqm_gates.IQMMoveGate By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.iqm_sampler.IQMSampler","url":"/cirq-iqm/api/iqm.cirq_iqm.iqm_sampler.IQMSampler.html","description":"Bases: Sampler Circuit sampler for executing quantum circuits on IQM quantum computers. IQMSampler connects to a quantum computer through an IQM server.\\nIf the server requires user authentication, you...","content":"Bases: Sampler Circuit sampler for executing quantum circuits on IQM quantum computers. IQMSampler connects to a quantum computer through an IQM server.\\nIf the server requires user authentication, you can provide it either using environment\\nvariables, or as keyword arguments to IQMSampler. The user authentication kwargs are passed\\nthrough to IQMClient as is, and are documented there. url ( str ) – URL of the IQM server. Has to start with http or https. device ( Optional [ IQMDevice ] ) – Device to execute the circuits on. If None , the device will be created based\\non the calibration-specific dynamic quantum architecture obtained from IQMClient . calibration_set_id ( Optional [ UUID ] ) – ID of the calibration set to use. If None , use the default one. run_sweep_timeout ( Optional [ int ] ) – Timeout for polling sweep results, in seconds. If None , use the client default value. compiler_options ( Optional [ CircuitCompilationOptions ] ) – The compilation options to use for the circuits, as defined by IQM Client. Attributes device Returns the device used by the sampler. Methods _resolve_parameters (program, params)  _send_circuits (circuits[, repetitions]) Sends a batch of circuits to be executed and retrieves the results. close_client () Close IQMClient's session with the user authentication server. create_run_request (programs, *[, params, ...]) Creates a run request without submitting it for execution. run_iqm_batch (programs[, repetitions]) Sends a batch of circuits to be executed. run_sweep (program, params[, repetitions]) Samples from the given Circuit. run_sweep_async (program, params[, repetitions]) Asynchronously samples from the given Circuit. Returns the device used by the sampler. Close IQMClient’s session with the user authentication server. Discard the client. Samples from the given Circuit. This allows for sweeping over different parameter values,\\nunlike the run method.  The params argument will provide a\\nmapping from sympy.Symbol\`s used within the circuit to a set of\\nvalues.  Unlike the \`run method, which specifies a single\\nmapping from symbol to value, this method allows a “sweep” of\\nvalues.  This allows a user to specify execution of a family of\\nrelated circuits efficiently. program ( Circuit ) – The circuit to sample from. params ( ParamResolver | Mapping [ str | Expr , complex | float | Complex | Expr ] | None | Sweep | _Sweepable ) – Parameters to run with the program. repetitions ( int ) – The number of times to sample. Result list for this run; one for each possible parameter resolver. list [ IQMResult ] Sends a batch of circuits to be executed. Running circuits in a batch is more efficient and hence completes quicker than running the circuits\\nindividually. Circuits run in a batch must all measure the same qubits. programs ( list [ Circuit ] ) – quantum circuits to execute repetitions ( int ) – number of times the circuits are sampled results of the execution ValueError – circuits are not valid for execution CircuitExecutionError – something went wrong on the server APITimeoutError – server did not return the results in the allocated time RuntimeError – IQM client session has been closed list [ IQMResult ] Creates a run request without submitting it for execution. This takes the same parameters as run() and run_iqm_batch() , and can be used to check the\\nrun request that would be sent when calling those functions. programs ( Circuit | list [ Circuit ] ) – quantum circuit(s) that would be executed when submitting the run request params ( ParamResolver | Mapping [ str | Expr , complex | float | Complex | Expr ] | None | Sweep | _Sweepable ) – same as params for run() , used only if programs is not a list repetitions ( int ) – number of times the circuits are sampled the created run request RunRequest Asynchronously samples from the given Circuit. By default, this method invokes run_sweep synchronously and simply\\nexposes its result is an awaitable. Child classes that are capable of\\ntrue asynchronous sampling should override it to use other strategies. program ( cirq.AbstractCircuit ) – The circuit to sample from. params ( cirq.Sweepable ) – Parameters to run with the program. repetitions ( int ) – The number of times to sample. Result list for this run; one for each possible parameter resolver. Sequence [cirq.Result] previous iqm.cirq_iqm.iqm_sampler.IQMResult next iqm.cirq_iqm.iqm_sampler.ResultMetadata By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices.iqm_device_metadata.IQMDeviceMetadata","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.iqm_device_metadata.IQMDeviceMetadata.html","description":"Bases: DeviceMetadata Hardware metadata for IQM devices. qubits ( Iterable [ NamedQid ] ) – qubits on the device connectivity ( Iterable [ tuple [ NamedQid , ... ] ] ) – qubit connectivity graph of th...","content":"Bases: DeviceMetadata Hardware metadata for IQM devices. qubits ( Iterable [ NamedQid ] ) – qubits on the device connectivity ( Iterable [ tuple [ NamedQid , ... ] ] ) – qubit connectivity graph of the device operations ( Optional [ dict [ type [ cirq.Gate ] , list [ tuple [ cirq.NamedQid , ... ] ] ] ] ) – Supported quantum operations of the device, mapping op types to their possible loci. gateset ( Optional [ cirq.Gateset ] ) – Native gateset of the device. If None, a default IQM device gateset will be used. resonators ( Iterable [ NamedQid ] ) – computational resonators of the device architecture ( Optional [ DynamicQuantumArchitecture ] ) – architecture from which values of the other arguments were obtained Attributes QUBIT_NAME_PREFIX prefix for qubit names, to be followed by their numerical index RESONATOR_DIMENSION Dimension abstraction for the resonator Qids gateset Returns the cirq.Gateset of supported gates on this device. resonator_set Returns the set of resonators on the device. Methods __eq__ (other) Return self==value. __hash__ () Return hash(self). __ne__ (other) Return self!=value. _value_equality_values_ ()  _value_equality_values_cls_ ()  from_architecture (architecture) Returns device metadata object created based on dynamic quantum architecture from_qubit_indices (qubit_count, ...[, gateset]) Returns device metadata object created based on connectivity specified using qubit indices only. prefix for qubit names, to be followed by their numerical index Dimension abstraction for the resonator Qids Returns the set of resonators on the device. Frozenset of resonators on device. Returns device metadata object created based on dynamic quantum architecture architecture ( DynamicQuantumArchitecture ) – IQMDeviceMetadata Returns device metadata object created based on connectivity specified using qubit indices only. qubit_count ( int ) – connectivity_indices ( Iterable [ set [ int ] ] ) – gateset ( tuple [ type [ Gate ] ] | None ) – IQMDeviceMetadata Returns the cirq.Gateset of supported gates on this device. previous iqm.cirq_iqm.devices.iqm_device_metadata next iqm.cirq_iqm.extended_qasm_parser By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.optimizers.simplify_circuit","url":"/cirq-iqm/api/iqm.cirq_iqm.optimizers.simplify_circuit.html","description":"Simplifies and optimizes the given circuit. Currently it merges any neighboring gates belonging to the same one-parameter family merges all one-qubit rotations into phased X rotations followed by Z ro...","content":"Simplifies and optimizes the given circuit. Currently it merges any neighboring gates belonging to the same one-parameter family merges all one-qubit rotations into phased X rotations followed by Z rotations pushes the Z rotations towards the end of the circuit as far as possible drops any empty Moments This sequence of optimization passes is repeated until the circuit hits a fixed point,\\nor max_iterations is exceeded. Finally, it removes Z rotations that are immediately followed by a Z-basis measurement. circuit ( Circuit ) – circuit to simplify max_iterations ( int ) – maximum number of simplification rounds drop_final_rz ( bool ) – iff True, drop z rotations that have no successor operations simplified circuit Circuit previous iqm.cirq_iqm.optimizers next iqm.cirq_iqm.optimizers.DropRZBeforeMeasurement By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.transpiler.transpile_insert_moves_into_circuit","url":"/cirq-iqm/api/iqm.cirq_iqm.transpiler.transpile_insert_moves_into_circuit.html","description":"Transpile the circuit to insert MOVE gates where needed. cirq_circuit ( Circuit ) – Circuit to transpile. device ( IQMDevice ) – Device to transpile for. existing_moves ( ExistingMoveHandlingOptions )...","content":"Transpile the circuit to insert MOVE gates where needed. cirq_circuit ( Circuit ) – Circuit to transpile. device ( IQMDevice ) – Device to transpile for. existing_moves ( ExistingMoveHandlingOptions ) – How to handle existing MOVE gates, obtained from the IQM client library. qubit_mapping ( Optional [ dict [ str , str ] ] ) – Mapping from qubit names in the circuit to the device. Transpiled circuit. Circuit previous iqm.cirq_iqm.transpiler next License By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.iqm_sampler","url":"/cirq-iqm/api/iqm.cirq_iqm.iqm_sampler.html","description":"Circuit sampler that executes quantum circuits on an IQM quantum computer. Classes IQMResult (*[, params, measurements, records]) Stores the results of a quantum circuit execution on an IQM device. IQ...","content":"Circuit sampler that executes quantum circuits on an IQM quantum computer. Classes IQMResult (*[, params, measurements, records]) Stores the results of a quantum circuit execution on an IQM device. IQMSampler (url, *[, device, ...]) Circuit sampler for executing quantum circuits on IQM quantum computers. ResultMetadata (job_id, calibration_set_id, ...) Metadata for an IQM execution result. Inheritance previous iqm.cirq_iqm.iqm_gates.IQMMoveGate next iqm.cirq_iqm.iqm_sampler.IQMResult By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.serialize.serialize_circuit","url":"/cirq-iqm/api/iqm.cirq_iqm.serialize.serialize_circuit.html","description":"Serializes a quantum circuit into the IQM data transfer format. circuit ( Circuit ) – quantum circuit to serialize data transfer object representing the circuit Circuit previous iqm.cirq_iqm.serialize...","content":"Serializes a quantum circuit into the IQM data transfer format. circuit ( Circuit ) – quantum circuit to serialize data transfer object representing the circuit Circuit previous iqm.cirq_iqm.serialize.map_operation next iqm.cirq_iqm.serialize.OperationNotSupportedError By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.iqm_gates.IQMMoveGate","url":"/cirq-iqm/api/iqm.cirq_iqm.iqm_gates.IQMMoveGate.html","description":"Bases: EigenGate The MOVE operation is a unitary population exchange operation between a qubit and a resonator.\\nIts effect is only defined in the invariant subspace \\\\(S = \\\\text{span}\\\\{|00\\\\rangle, |01\\\\...","content":"Bases: EigenGate The MOVE operation is a unitary population exchange operation between a qubit and a resonator.\\nIts effect is only defined in the invariant subspace \\\\(S = \\\\text{span}\\\\{|00\\\\rangle, |01\\\\rangle, |10\\\\rangle\\\\}\\\\) ,\\nwhere it swaps the populations of the states \\\\(|01\\\\rangle\\\\) and \\\\(|10\\\\rangle\\\\) .\\nIts effect on the orthogonal subspace is undefined. MOVE has the following presentation in the subspace \\\\(S\\\\) : where \\\\(a\\\\) is an undefined complex phase that is canceled when the MOVE gate is applied a second time. To ensure that the state of the qubit and resonator has no overlap with \\\\(|11\\\\rangle\\\\) , it is\\nrecommended that no single qubit gates are applied to the qubit in between a\\npair of MOVE operations. Note: At this point the locus for the move gate must be defined in the order: [qubit, resonator] .\\nAdditionally, the matrix representation of the gate set to be a SWAP gate, even though this is not what physically\\nhappens. Attributes Methods __str__ () Return str(self). _circuit_diagram_info_ (args)  _eigen_components () Describes the eigendecomposition of the gate's matrix. _num_qubits_ () The number of qubits this gate acts on. _qid_shape_ () Returns a Tuple containing the number of quantum levels of each qid the gate acts on. num_qubits () The number of qubits this gate acts on. exponent ( float | Expr ) – global_shift ( float ) – The number of qubits this gate acts on. int previous iqm.cirq_iqm.iqm_gates next iqm.cirq_iqm.iqm_sampler By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices.iqm_device.IQMDevice","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.iqm_device.IQMDevice.html","description":"Bases: Device ABC for the properties of a specific IQM quantum architecture. Adds extra functionality on top of the basic cirq.Device class for decomposing gates,\\noptimizing circuits and mapping qubit...","content":"Bases: Device ABC for the properties of a specific IQM quantum architecture. Adds extra functionality on top of the basic cirq.Device class for decomposing gates,\\noptimizing circuits and mapping qubits. metadata ( IQMDeviceMetadata ) – device metadata which contains the qubits, their connectivity, and the native gateset Attributes metadata Returns metadata for the device. Methods __eq__ (other) Return self==value. check_qubit_connectivity (operation) Raises a ValueError if operation acts on qubits that are not connected. decompose_circuit (circuit) Decomposes the given circuit to the native gate set of the device. decompose_operation (operation) Decompose a single quantum operation into the native operation set. get_qubit (index) The device qubit corresponding to the given numeric index. get_qubit_index (qubit) The numeric index of the given qubit on the device. has_valid_operation_targets (op) Predicate, True iff the given operation is native and its targets are valid. is_native_operation (op) Predicate, True iff the given operation is considered native for the architecture. operation_decomposer (op) Decomposes operations into the native operation set. route_circuit (circuit, *[, initial_mapper, ...]) Routes the given circuit to the device connectivity and qubit names. validate_circuit (circuit) Raises an exception if a circuit is not valid. validate_move (operation) Validates whether the IQMMoveGate is between qubit and resonator registers. validate_moves (circuit) Validates whether the IQMMoveGates are correctly applied in the circuit. validate_operation (operation) Raises an exception if an operation is not valid. Returns metadata for the device. The numeric index of the given qubit on the device. qubit ( NamedQubit ) – int The device qubit corresponding to the given numeric index. index ( int ) – Qid Raises a ValueError if operation acts on qubits that are not connected. operation ( Operation ) – None Predicate, True iff the given operation is considered native for the architecture. op ( Operation ) – bool Predicate, True iff the given operation is native and its targets are valid. op ( Operation ) – bool Decomposes operations into the native operation set. All the decompositions below keep track of global phase (required for decomposing controlled gates). op ( Operation ) – operation to decompose decomposition, or None to pass op to the Cirq native decomposition machinery instead list [ Operation ] | None Decompose a single quantum operation into the native operation set. operation ( Operation ) – Operation | OpTree Routes the given circuit to the device connectivity and qubit names. The routed circuit uses the device qubits, and may have additional SWAP gates inserted to perform the qubit\\nrouting. The transformer cirq.RouterCQC is used for routing.\\nNote that only gates of one or two qubits, and measurement operations of arbitrary size are supported. Adds the attribute iqm_calibration_set_id to the routed circuit, with value taken from self.metadata.architecture.calibration_set_id if available, otherwise None. circuit ( Circuit ) – Circuit to route. initial_mapper ( AbstractInitialMapper | None ) – Initial mapping from circuit qubits to device qubits, to serve as\\nthe starting point of the routing. None means it will be generated automatically. qubit_subset ( Sequence [ Qid ] | None ) – Restrict the routing to this subset of the device qubits. If None ,\\nuse the entire device. routed circuit, initial mapping before inserting SWAP gates (see cirq.RouterCQC.route_circuit() ),\\nfinal mapping from physical qubits to physical qubits (see cirq.RouterCQC.route_circuit() ) ValueError – routing is impossible tuple [ Circuit , dict [ Qid , Qid ], dict [ Qid , Qid ]] Decomposes the given circuit to the native gate set of the device. Adds the attribute iqm_calibration_set_id to the decomposed circuit, with value taken from self.metadata.architecture.calibration_set_id if available, otherwise None. circuit ( Circuit ) – circuit to decompose decomposed circuit Circuit Raises an exception if a circuit is not valid. circuit ( AbstractCircuit ) – The circuit to validate. ValueError – The circuit isn’t valid for this device. None Raises an exception if an operation is not valid. operation ( Operation ) – The operation to validate. ValueError – The operation isn’t valid for this device. None Validates whether the IQMMoveGate is between qubit and resonator registers. operation ( cirq.Operation ) – Operation to check ValueError – In case the the first argument of the IQMMoveGate is not a qubit,\\n    or if the second argument is not a resonator on this device. None when the IQMMoveGate is used correctly. None Validates whether the IQMMoveGates are correctly applied in the circuit. circuit ( cirq.AbstractCircuit ) – The circuit to validate. ValueError – If the IQMMoveGate is applied incorrectly. None if the IQMMoveGates are applied correctly. None previous iqm.cirq_iqm.devices.iqm_device next iqm.cirq_iqm.devices.iqm_device_metadata By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.iqm_sampler.ResultMetadata","url":"/cirq-iqm/api/iqm.cirq_iqm.iqm_sampler.ResultMetadata.html","description":"Bases: object Metadata for an IQM execution result. job_id ( UUID ) – calibration_set_id ( UUID | None ) – request ( RunRequest ) – ID of the computational job. uuid.UUID Calibration set used for this...","content":"Bases: object Metadata for an IQM execution result. job_id ( UUID ) – calibration_set_id ( UUID | None ) – request ( RunRequest ) – ID of the computational job. uuid.UUID Calibration set used for this IQMResult . uuid.UUID | None Request made to run the job. iqm.iqm_client.models.RunRequest Attributes job_id  calibration_set_id  request  Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). previous iqm.cirq_iqm.iqm_sampler.IQMSampler next iqm.cirq_iqm.optimizers By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.extended_qasm_parser.circuit_from_qasm","url":"/cirq-iqm/api/iqm.cirq_iqm.extended_qasm_parser.circuit_from_qasm.html","description":"Parses an OpenQASM 2.0 program to a Cirq circuit. qasm ( str ) – OpenQASM program parsed circuit Circuit previous iqm.cirq_iqm.extended_qasm_parser next iqm.cirq_iqm.iqm_gates By Cirq on IQM developer...","content":"Parses an OpenQASM 2.0 program to a Cirq circuit. qasm ( str ) – OpenQASM program parsed circuit Circuit previous iqm.cirq_iqm.extended_qasm_parser next iqm.cirq_iqm.iqm_gates By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.serialize.map_operation","url":"/cirq-iqm/api/iqm.cirq_iqm.serialize.map_operation.html","description":"Map a Cirq Operation to the IQM data transfer format. Assumes the circuit has been transpiled so that it only contains operations natively supported by the\\ngiven IQM quantum architecture. operation ( ...","content":"Map a Cirq Operation to the IQM data transfer format. Assumes the circuit has been transpiled so that it only contains operations natively supported by the\\ngiven IQM quantum architecture. operation ( Operation ) – a Cirq Operation the converted operation Instruction OperationNotSupportedError When the circuit contains an unsupported operation. – previous iqm.cirq_iqm.serialize.instruction_to_operation next iqm.cirq_iqm.serialize.serialize_circuit By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.iqm_sampler.IQMResult","url":"/cirq-iqm/api/iqm.cirq_iqm.iqm_sampler.IQMResult.html","description":"Bases: ResultDict Stores the results of a quantum circuit execution on an IQM device. params ( Optional [ cirq.ParamResolver ] ) – Parameter resolver used for this circuit, if any. measurements ( Opti...","content":"Bases: ResultDict Stores the results of a quantum circuit execution on an IQM device. params ( Optional [ cirq.ParamResolver ] ) – Parameter resolver used for this circuit, if any. measurements ( Optional [ Mapping [ str , np.ndarray ] ] ) – Maps measurement keys to measurement results, which are 2-D arrays of dtype bool. shape == (repetitions, qubits) . records ( Optional [ Mapping [ str , np.ndarray ] ] ) – Maps measurement keys to measurement results, which are 3D arrays of dtype bool. shape == (repetitions, instances, qubits) . metadata ( ResultMetadata ) – Metadata for the circuit execution results. Attributes Methods previous iqm.cirq_iqm.iqm_sampler next iqm.cirq_iqm.iqm_sampler.IQMSampler By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices.iqm_device_metadata","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.iqm_device_metadata.html","description":"DeviceMetadata subtype for IQM devices. Classes IQMDeviceMetadata (qubits, connectivity, *[, ...]) Hardware metadata for IQM devices. Inheritance previous iqm.cirq_iqm.devices.iqm_device.IQMDevice nex...","content":"DeviceMetadata subtype for IQM devices. Classes IQMDeviceMetadata (qubits, connectivity, *[, ...]) Hardware metadata for IQM devices. Inheritance previous iqm.cirq_iqm.devices.iqm_device.IQMDevice next iqm.cirq_iqm.devices.iqm_device_metadata.IQMDeviceMetadata By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices.iqm_device","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.iqm_device.html","description":"Describes IQM quantum architectures in the Cirq framework. The description includes the qubit connectivity, the native gate set, and the gate decompositions\\nto use with the architecture. Classes IQMDe...","content":"Describes IQM quantum architectures in the Cirq framework. The description includes the qubit connectivity, the native gate set, and the gate decompositions\\nto use with the architecture. Classes IQMDevice (metadata) ABC for the properties of a specific IQM quantum architecture. Inheritance previous iqm.cirq_iqm.devices.apollo.Apollo next iqm.cirq_iqm.devices.iqm_device.IQMDevice By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices.adonis","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.adonis.html","description":"IQM’s Adonis quantum architecture. Classes Adonis () IQM's five-qubit transmon device. Inheritance previous iqm.cirq_iqm.devices next iqm.cirq_iqm.devices.adonis.Adonis By Cirq on IQM developers © Cop...","content":"IQM’s Adonis quantum architecture. Classes Adonis () IQM's five-qubit transmon device. Inheritance previous iqm.cirq_iqm.devices next iqm.cirq_iqm.devices.adonis.Adonis By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm","url":"/cirq-iqm/api/iqm.cirq_iqm.html","description":"Types for representing and methods for manipulating operations on IQM’s quantum computers. Subpackages and modules devices Definitions for various IQM quantum devices for the Cirq framework. extended_...","content":"Types for representing and methods for manipulating operations on IQM’s quantum computers. Subpackages and modules devices Definitions for various IQM quantum devices for the Cirq framework. extended_qasm_parser Imports OpenQASM 2.0 programs in a way that preserves gates native to the IQM architectures. iqm_gates Implementations for IQM specific quantum gates iqm_sampler Circuit sampler that executes quantum circuits on an IQM quantum computer. optimizers Circuit optimization classes. serialize Helper functions for serializing and deserializing quantum circuits between Cirq and IQM Circuit formats. transpiler Helper functions for IQM specific transpilation needs. previous API Reference next iqm.cirq_iqm.devices By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.optimizers.DropRZBeforeMeasurement","url":"/cirq-iqm/api/iqm.cirq_iqm.optimizers.DropRZBeforeMeasurement.html","description":"Bases: PointOptimizer Drops z rotations that happen right before a z-basis measurement. These z rotations do not affect the result of the measurement, so we may ignore them. drop_final ( bool ) – iff ...","content":"Bases: PointOptimizer Drops z rotations that happen right before a z-basis measurement. These z rotations do not affect the result of the measurement, so we may ignore them. drop_final ( bool ) – iff True, drop also any z rotation at the end of the circuit (since it’s not\\nfollowed by a measurement, it cannot affect them) Methods optimization_at (circuit, index, op) Describes how to change operations near the given location. Describes how to change operations near the given location. circuit ( Circuit ) – The circuit to improve. index ( int ) – The index of the moment with the operation to focus on. op ( Operation ) – The operation to focus improvements upon. A description of the optimization to perform, or else None if no\\nchange should be made. PointOptimizationSummary | None previous iqm.cirq_iqm.optimizers.simplify_circuit next iqm.cirq_iqm.optimizers.MergeOneParameterGroupGates By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.serialize.deserialize_circuit","url":"/cirq-iqm/api/iqm.cirq_iqm.serialize.deserialize_circuit.html","description":"Deserializes a quantum circuit from the IQM data transfer format to a Cirq Circuit. circuit ( Circuit ) – data transfer object representing the circuit quantum circuit Circuit previous iqm.cirq_iqm.se...","content":"Deserializes a quantum circuit from the IQM data transfer format to a Cirq Circuit. circuit ( Circuit ) – data transfer object representing the circuit quantum circuit Circuit previous iqm.cirq_iqm.serialize next iqm.cirq_iqm.serialize.instruction_to_operation By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.transpiler","url":"/cirq-iqm/api/iqm.cirq_iqm.transpiler.html","description":"Helper functions for IQM specific transpilation needs. Functions transpile_insert_moves_into_circuit (...[, ...]) Transpile the circuit to insert MOVE gates where needed. previous iqm.cirq_iqm.seriali...","content":"Helper functions for IQM specific transpilation needs. Functions transpile_insert_moves_into_circuit (...[, ...]) Transpile the circuit to insert MOVE gates where needed. previous iqm.cirq_iqm.serialize.OperationNotSupportedError next iqm.cirq_iqm.transpiler.transpile_insert_moves_into_circuit By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.serialize.OperationNotSupportedError","url":"/cirq-iqm/api/iqm.cirq_iqm.serialize.OperationNotSupportedError.html","description":"Raised when a given operation is not supported by the IQM server. previous iqm.cirq_iqm.serialize.serialize_circuit next iqm.cirq_iqm.transpiler By Cirq on IQM developers © Copyright 2020–2024, Cirq o...","content":"Raised when a given operation is not supported by the IQM server. previous iqm.cirq_iqm.serialize.serialize_circuit next iqm.cirq_iqm.transpiler By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.serialize.instruction_to_operation","url":"/cirq-iqm/api/iqm.cirq_iqm.serialize.instruction_to_operation.html","description":"Convert an IQM instruction to a Cirq Operation. instr ( Instruction ) – the IQM instruction the converted operation Operation OperationNotSupportedError When the circuit contains an unsupported operat...","content":"Convert an IQM instruction to a Cirq Operation. instr ( Instruction ) – the IQM instruction the converted operation Operation OperationNotSupportedError When the circuit contains an unsupported operation. – previous iqm.cirq_iqm.serialize.deserialize_circuit next iqm.cirq_iqm.serialize.map_operation By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices.adonis.Adonis","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.adonis.Adonis.html","description":"Bases: IQMDevice IQM’s five-qubit transmon device. The qubits are connected thus: where the lines denote which qubit pairs can be subject to two-qubit gates. Each qubit can be rotated about any axis i...","content":"Bases: IQMDevice IQM’s five-qubit transmon device. The qubits are connected thus: where the lines denote which qubit pairs can be subject to two-qubit gates. Each qubit can be rotated about any axis in the xy plane by an arbitrary angle.\\nAdonis thus has native PhasedXPowGate, XPowGate, and YPowGate gates. The two-qubit gate CZ is\\nnative, as well. The qubits can be measured simultaneously or separately once, at the end of\\nthe circuit. Attributes Methods previous iqm.cirq_iqm.devices.adonis next iqm.cirq_iqm.devices.apollo By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.optimizers","url":"/cirq-iqm/api/iqm.cirq_iqm.optimizers.html","description":"Circuit optimization classes. Functions simplify_circuit (circuit, *[, ...]) Simplifies and optimizes the given circuit. Classes DropRZBeforeMeasurement ([drop_final]) Drops z rotations that happen ri...","content":"Circuit optimization classes. Functions simplify_circuit (circuit, *[, ...]) Simplifies and optimizes the given circuit. Classes DropRZBeforeMeasurement ([drop_final]) Drops z rotations that happen right before a z-basis measurement. MergeOneParameterGroupGates (post_clean_up, ...) Merges adjacent gates belonging to the same parametrized gate family. Inheritance previous iqm.cirq_iqm.iqm_sampler.ResultMetadata next iqm.cirq_iqm.optimizers.simplify_circuit By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.html","description":"Definitions for various IQM quantum devices for the Cirq framework. Subpackages and modules adonis IQM's Adonis quantum architecture. apollo IQM's Apollo quantum architecture. iqm_device Describes IQM...","content":"Definitions for various IQM quantum devices for the Cirq framework. Subpackages and modules adonis IQM's Adonis quantum architecture. apollo IQM's Apollo quantum architecture. iqm_device Describes IQM quantum architectures in the Cirq framework. iqm_device_metadata DeviceMetadata subtype for IQM devices. previous iqm.cirq_iqm next iqm.cirq_iqm.devices.adonis By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"cirq-iqm","title":"iqm.cirq_iqm.devices.apollo.Apollo","url":"/cirq-iqm/api/iqm.cirq_iqm.devices.apollo.Apollo.html","description":"Bases: IQMDevice IQM’s twenty-qubit transmon device. The qubits are connected thus: where the lines denote which qubit pairs can be subject to two-qubit gates. Each qubit can be rotated about any axis...","content":"Bases: IQMDevice IQM’s twenty-qubit transmon device. The qubits are connected thus: where the lines denote which qubit pairs can be subject to two-qubit gates. Each qubit can be rotated about any axis in the xy plane by an arbitrary angle.\\nApollo thus has native PhasedXPowGate, XPowGate, and YPowGate gates. The two-qubit gate CZ is\\nnative, as well. The qubits can be measured simultaneously or separately once, at the end of\\nthe circuit. Attributes Methods previous iqm.cirq_iqm.devices.apollo next iqm.cirq_iqm.devices.iqm_device By Cirq on IQM developers © Copyright 2020–2024, Cirq on IQM developers. Last updated on 2025-03-30."},{"package":"iqm-client","title":"IQM Client","url":"/iqm-client/readme.html","description":"Client-side Python library for connecting to an IQM quantum computer. Includes as an optional feature a Qiskit adapter for IQM’s quantum computers, which allows you to: Transpile arbitrary quantum cir...","content":"Client-side Python library for connecting to an IQM quantum computer. Includes as an optional feature a Qiskit adapter for IQM’s quantum computers, which allows you to: Transpile arbitrary quantum circuits for IQM quantum architectures Simulate execution with an IQM-specific noise model Run quantum circuits on an IQM quantum computer For executing code on an IQM quantum computer, you can use for example Qiskit on IQM , which can be installed as an optional\\nfeature of IQM Client from the Python Package Index (PyPI), e.g.: Note If you have previously installed the (now deprecated) qiskit-iqm package in your Python environment,\\nyou should first uninstall it with $ pip uninstall qiskit-iqm . In this case, you should also include\\nthe --force-reinstall option in the iqm-client installation command. IQM Client by itself is not intended to be used directly by human users. If you want just the base IQM Client library,\\nthough, you can install it with Note uv is highly recommended for practical Python environment and package management. Documentation for the latest version is available online .\\nYou can build documentation for any older version locally by downloading the corresponding package from PyPI,\\nand running the docs builder. For versions 20.12 and later this is done by running ./docbuild in the iqm-client root directory, and for earlier versions by running tox run -e docs . ./docbuild or tox run -e docs will build the documentation at ./build/sphinx/html .\\nThese commands require installing the sphinx and sphinx-book-theme Python packages and graphviz . IQM Client is free software, released under the Apache License, version 2.0. Copyright 2021-2025 IQM Client developers. previous IQM client next API Reference By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"Integration Guide","url":"/iqm-client/integration_guide.html","description":"IQM client is designed to be the Python adapter to IQM’s quantum computers for application-level\\nquantum computing frameworks.  For example integrations maintained by IQM, please refer to the Qiskit a...","content":"IQM client is designed to be the Python adapter to IQM’s quantum computers for application-level\\nquantum computing frameworks.  For example integrations maintained by IQM, please refer to the Qiskit and Cirq packages. IQM client offers the functionality to submit quantum circuits to an IQM quantum computer, query a\\njob or a job status, and retrieve the quantum architecture of the quantum computer. The following sections illustrate how to integrate IQM quantum computers into your quantum computing\\nframework. Initialising the IQM client is simple, and in case you perform authentication as described below,\\nrequires only the URL of the IQM quantum computer. To submit a quantum circuit for execution, it has to be specified using the Circuit class.\\nThe available native instructions are documented in the Instruction class. Then the circuit can be submitted, and its status and result can be queried with the job id. A dict containing arbitrary metadata can be attached to the circuit before submitting it for\\nexecution. The attached metadata should consist only of values of JSON serializable datatypes.\\nA utility function to_json_dict() can be used to convert supported datatypes,\\ne.g. numpy.ndarray , to equivalent JSON serializable types. The progress of the job can be followed with IQMClient.get_run_status() . Once the job is ready,\\nthe results can be read with IQMClient.get_run() . Both of these actions are combined in IQMClient.wait_for_results() which waits until the job is ready and then returns the result. In addition to the actual results, job result contains also metadata of the job execution.\\nThe metadata includes the original request, ID of the calibration set used in the execution, and\\na collection of timestamps describing the duration of the execution. The timestamps returned with job results are stored as an optional dict called timestamps in the metadata of RunResult of the job. Each timestamp is stored in the dict with a key describing the point in job processing where\\nthe timestamp was stored. For example, the timestamp stored at the start of circuit compilation step is stored with\\nkey compile_start . Other timestamps are stored in the same way, with keys containing the step name, compile , submit or execution , and either a _start or _end suffix. In addition, there are\\nalso timestamps for starting and ending the job itself, job_start and job_end . If the job processing is\\nterminated before it is complete the timestamps of steps not processed will not be present in the dict. The first timestamp stored is the job_start timestamp. It is stored when the server receives the job request. The job processing starts with compilation step where the circuits are converted to pulse schedules that can be\\nsent for execution. Compilation step produces timestamps compile_start and compile_end . The pulse schedules are then submitted for execution. This step produces timestamps submit_start and submit_end . After submitting the pulse schedules the server waits for the execution results.\\nThis step produces timestamps execution_start and execution_end . Finally, when job processing is complete, regardless whether the job was successful or not, the timestamp job_end is stored. IQM uses bearer token authentication to manage access to quantum computers.\\nCurrently, there are three mutually exclusive ways of providing an authentication\\ntoken to IQM client: The recommended way is to use Cortex CLI to manage the authentication tokens and store them into a file. IQM client can then read\\nthe token from the file and use it for authentication. The file path can be provided to\\nIQM client in environment variable IQM_TOKENS_FILE .\\nAlternatively, the tokens file path can be provided as argument tokens_file to IQMClient constructor. It is also possible to use plaintext token obtained from a server dashboard. These\\ntokens may have longer lifespan than access tokens generated by Cortex CLI, and thus\\nIQM client won’t attempt to refresh them. The generated token can be provided to IQM\\nclient in environment variable IQM_TOKEN .\\nAlternatively, the token can be provided as argument token to IQMClient constructor. The third way is to provide server URL, username and password for obtaining the\\ntoken from an authentication server. IQM client will maintain a login session with\\nthe authentication server and read and refresh the token as needed. The server URL,\\nusername and password can be provided to IQM client in environment variables IQM_AUTH_SERVER , IQM_AUTH_USERNAME and IQM_AUTH_PASSWORD .\\nAlternatively, the values can be provided as arguments auth_server_url , username and password to IQMClient constructor.\\nNote, that all the values must be provided as either environment variables or\\nas constructor arguments, not mixed. IQM does not provide an open source circuit transpilation library, so this will have to be supplied\\nby the quantum computing framework or a third party library.  To obtain the necessary information\\nfor circuit transpilation, IQMClient.get_dynamic_quantum_architecture() returns the names of the\\nQPU components (qubits and computational resonators), and the native operations available\\nin the given calibration set. This information should enable circuit transpilation for the\\nIQM Crystal quantum architectures. The notable exception is the transpilation for the IQM Star quantum architectures, which have\\ncomputational resonators in addition to qubits. Some specialized transpilation logic involving\\nthe MOVE gates specific to these architectures is provided, in the form of the functions transpile_insert_moves() and transpile_remove_moves() .\\nSee iqm.iqm_client.transpile for the details. A typical Star architecture use case would look something like this: We encourage to transpile circuits to use the physical IQM qubit names before submitting them to IQM\\nquantum computers.  In case the quantum computing framework does not allow for this, providing a\\nqubit mapping can do the translation from the framework qubit names to IQM qubit names.  Note, that\\nqubit mapping is not supposed to be associated with individual circuits, but rather with the entire\\njob request to IQM server.  Typically, you would have some local representation of the QPU and\\ntranspile the circuits against that representation, then use qubit mapping along with the generated\\ncircuits to map from the local representation to the IQM representation of qubit names.  We\\ndiscourage exposing this feature to end users of the quantum computing framework. Before performing circuit execution, IQM server checks how long it would take to run each circuit.\\nIf any circuit in a job would take too long to execute compared to the T2 time of the qubits,\\nthe server will disqualify the job, not execute any circuits, and return a detailed error message.\\nIn some special cases, it makes sense to adjust or disable this check using\\nthe max_circuit_duration_over_t2 attribute of CircuitCompilationOptions ,\\nand then passing the options to IQMClient.submit_circuits() . Set IQM_CLIENT_REQUESTS_TIMEOUT environment variable to override the network requests default\\ntimeout value. The default value is 60 seconds and might not be sufficient when fetching run results\\nof larger circuits via slow network connections. On Linux: On Windows: Once set, this environment variable will control network request timeouts for IQMClient methods abort_job , get_quantum_architecture , get_dynamic_quantum_architecture , get_run , and get_run_status . Set IQM_CLIENT_SECONDS_BETWEEN_CALLS to control the polling frequency when waiting for\\ncompilation and run results with the IQMClient.wait_for_compilation() and IQMClient.wait_for_results() methods. The default value is set to 1 second. Set IQM_CLIENT_DEBUG=1 to print the run request when it is submitted for execution in IQMClient.submit_circuits() or IQMClient.submit_run_request() . To inspect the run request without sending\\nit for execution, use IQMClient.create_run_request() . IQM provides a demo environment to test the integration against a mock quantum computer. If you’d\\nlike to request access to that environment, please contact IQM . previous iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationPlugin next Qiskit on IQM User Guide By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"IQM client","url":"/iqm-client/index.html","description":"22.11 2025-03-30 Client-side library for connecting to an IQM quantum computer. Includes a Qiskit adapter for IQM’s quantum computers.\\nSee the Qiskit on IQM User Guide for an introduction on how to in...","content":"22.11 2025-03-30 Client-side library for connecting to an IQM quantum computer. Includes a Qiskit adapter for IQM’s quantum computers.\\nSee the Qiskit on IQM User Guide for an introduction on how to install and use the Qiskit adapter. Index Module Index Search Page next IQM Client By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"Qiskit on IQM User Guide","url":"/iqm-client/user_guide_qiskit.html","description":"This guide illustrates the main features of Qiskit on IQM, the Qiskit adapter for IQM Client.\\nYou are encouraged to run the demonstrated code snippets and check the output yourself. Note IQM provides ...","content":"This guide illustrates the main features of Qiskit on IQM, the Qiskit adapter for IQM Client.\\nYou are encouraged to run the demonstrated code snippets and check the output yourself. Note IQM provides access to its quantum computers via IQM Resonance – IQM’s quantum cloud service.\\nPlease head over to our website to learn more. Here’s a quick and easy way to run a small computation on an IQM quantum computer to check that\\nthings are set up correctly, either\\nthrough the IQM cloud service Resonance, or using an on-premises quantum computer. Login to IQM Resonance with your credentials. Upon your first visit to IQM Resonance, you can generate your unique, non-recoverable API token\\ndirectly from the Dashboard page by selecting Generate token . It’s important to copy the token\\nimmediately from the window, as you won’t be able to do so once the window is closed. If you lose\\nyour token, you have the option to regenerate it at any time. However, be aware that regenerating\\nyour API token will invalidate any previously generated token. Download one of the demo notebooks from IQM Academy or the resonance_example.py example file (Save Page As…) Install Qiskit on IQM as instructed below. Add your API token to the example (either as the parameter token to the IQMProvider constructor, or by setting the environment variable IQM_TOKEN ) Run the Jupyter notebook (or run python resonance_example.py if you decided to go for the Python script). If you’re connecting to a real quantum computer, the output should show almost half of the\\nmeasurements resulting in ‘00000’ and almost half in ‘11111’ - if this is the case, things are\\nset up correctly! You can find a video guide on how to set things up here .\\nMore ready-to-run examples can also be found at IQM Academy . Download the bell_measure.py example file (Save Page As…). Install Qiskit on IQM as instructed below. Install Cortex CLI and log in as instructed in the documentation Set the environment variable as instructed by Cortex CLI after logging in. Run $ python bell_measure.py --cortex_server_url https://demo.qc.iqm.fi/cocos - replace the example URL with the correct one. If you’re connecting to a real quantum computer, the output should show almost half of the\\nmeasurements resulting in ‘00’ and almost half in ‘11’ - if this is the case, things are set up\\ncorrectly! Note If you have previously installed the (now deprecated) qiskit-iqm package in your Python environment,\\nyou should first uninstall it with $ pip uninstall qiskit-iqm . In this case, you should also include\\nthe --force-reinstall option in the iqm-client installation command.. The recommended way is to install the optional qiskit feature of the iqm-client distribution package directly\\nfrom the Python Package Index (PyPI): After installation, Qiskit on IQM can be imported in your Python code as follows: If you are using IQM Resonance, you have two options to authenticate: Set the IQM_TOKEN environment variable to the API token obtained from the Resonance dashboard. Pass the token parameter to IQMProvider . This will be forwarded to IQMClient . For an example, see the resonance_example.py file If the IQM server you are connecting to requires authentication, you may use Cortex CLI to retrieve and automatically refresh access tokens,\\nthen set the IQM_TOKENS_FILE environment variable, as instructed, to point to the tokens file.\\nSee Cortex CLI’s documentation for details. You may also authenticate yourself using the IQM_AUTH_SERVER , IQM_AUTH_USERNAME and IQM_AUTH_PASSWORD environment variables, or pass them as\\narguments to IQMProvider , however this approach is less secure and considered deprecated. In this section we demonstrate the practicalities of using Qiskit on IQM to execute\\nquantum circuits on an IQM quantum computer. Let’s consider the following quantum circuit which prepares and measures a GHZ state: To run this circuit on an IQM quantum computer you need to initialize an IQMProvider instance with the IQM server URL, use it to retrieve an IQMBackend instance representing\\nthe quantum computer, and use Qiskit’s transpile() function\\nfollowed by IQMBackend.run() as usual. shots denotes the number of times the quantum\\ncircuit(s) are sampled: Note As of qiskit >= 1.0 , Qiskit no longer supports execute() . Instead you should\\nfirst transpile the circuit and then run it, as shown in the code above.\\nSee the Transpilation section to learn how to transpile circuits in various ways. Note If you want to inspect the circuits that are sent to the device, use the circuit_callback keyword argument of IQMBackend.run() . See also Inspecting circuits before submitting them for execution for inspecting the actual run request sent for\\nexecution. Note IQM Client is transitioning from server-side API V1 to a new V2 .\\nYou may see a deprecation warning in the terminal. You can ignore it; when V2 becomes the default,\\nQiskit-on-IQM will transparently start using it. Alternatively, you can set an environment variable IQM_CLIENT_API_VARIANT to value V2 and change the backend URL (normally, this means removing\\nthe /cocos part from the url). The choice of the API version does not affect the use of Qiskit-on-IQM. You can optionally provide IQMBackend specific options as additional keyword arguments to IQMBackend.run() , documented at IQMBackend.create_run_request() .\\nFor example, you can enable heralding measurements using circuit_compilation_options as follows: The calibration data for an IQM quantum computer is stored in a calibration set . An IQMBackend instance\\nalways corresponds to a specific calibration set, so that its transpilation target uses only those QPU components\\n(qubits and computational resonators) and gates which are available in that calibration set. The server default\\ncalibration set will be used by default, but you can also use a different calibration set by specifying the calibration_set_id parameter to IQMProvider.get_backend() or IQMBackend . If the server default\\ncalibration set has changed after you have created the backend, the backend will still use the original default calibration\\nset when submitting circuits for execution. When this happens you will get a warning.\\nYou will need to create a new backend if you want to use the new default calibration set instead. The results of a job that was executed on the IQM quantum computer, represented as a Result instance, can be inspected using the usual Qiskit methods: The result comes with some metadata, such as the RunRequest that\\nproduced it in result.request . The request contains e.g. the qubit mapping and the ID of the\\ncalibration set that were used in the execution: Another piece of useful metadata are the timestamps of the various steps of processing the job. The\\ntimestamps are stored in the dict result.timestamps . The job processing has three steps, compile where the circuits are converted to instruction schedules, submit where the instruction schedules are submitted for execution, and execution where the instruction schedules are executed and the measurement results are returned. The dict contains a timestamp for the start and end of each step.\\nFor example, the timestamp of starting the circuit compilation is stored with key compile_start .\\nIn the same way the other steps have their own timestamps with keys consisting of the step name and a _start or _end suffix. In addition to processing step timestamps, there are also timestamps for the job itself, job_start for when the job request was received by the server and job_end for when the job processing\\nwas finished. If the processing of the job is terminated before it is complete, for example due to an error, the timestamps of\\nprocessing steps that were not taken are not present in the dict. For example: The IQMBackend instance we created above provides all the standard backend functionality that one expects from a\\nbackend in Qiskit. For this example, I am connected to an IQMBackend that features a 5-qubit chip with star-like\\nconnectivity: Let’s examine its basis gates and the coupling map through the backend instance Note that for IQMBackends the identity gate id is not actually a gate that is executed on the device and is simply omitted.\\nAt IQM we identify qubits by their names, e.g. ‘QB1’, ‘QB2’, etc. as demonstrated above. In Qiskit, qubits are\\nidentified by their indices in the quantum register, as you can see from the printed coupling map above. Most of the\\ntime you do not need to deal with IQM-style qubit names when using Qiskit, however when you need, the methods IQMBackendBase.qubit_name_to_index() and IQMBackendBase.index_to_qubit_name() can become handy. Some IQM quantum computers support classically controlled gates, that is, gates that are executed\\nconditionally depending on the result of a measurement preceding them in the quantum circuit. This\\nsupport currently has several limitations: Only the x , y , rx , ry and r gates can be classically controlled. The gates can only be conditioned on one classical bit, and the only control available is to\\napply the gate if the bit is 1, and apply an identity gate if the bit is 0. The availability of the controlled gates depends on the instrumentation of the quantum computer. The classical control can be applied on a circuit instruction using c_if() : The first measurement operation stores its result in the 1-bit classical register c . If the\\nresult is 1, the X gate will be applied. If it is zero, an identity gate of corresponding\\nduration is applied instead. Executing the above circuit should result in the counts being approximately 50/50 split\\nbetween the ‘00 0’ and ‘11 1’ bins of the histogram (even though the state itself is never entangled). Note Because the gates can only take feedback from one classical bit you must place the measurement result\\nin a 1-bit classical register, c in the above example. The qiskit.circuit.Reset operation can be used to reset qubits to the \\\\(|0\\\\rangle\\\\) state.\\nIt is currently implemented as a (projective) measurement followed by a classically controlled X gate conditioned\\non the result, and is only available if the quantum computer supports classically controlled gates. In the above example, the Hadamard gate prepares a uniform superposition of the \\\\(|0\\\\rangle\\\\) and \\\\(|1\\\\rangle\\\\) states, and the reset then collapses it back into the \\\\(|0\\\\rangle\\\\) state.\\nExecuting the circuit should result in (mostly) zeros being measured. It is possible to inspect the final circuits that would be submitted for execution before actually submitting them,\\nwhich can be useful for debugging purposes. This can be done using IQMBackend.create_run_request() , which returns\\na RunRequest containing the circuits and other data. The method accepts the same\\nparameters as IQMBackend.run() . It is also possible to print a run request when it is actually submitted by setting the environment variable IQM_CLIENT_DEBUG=1 . In this section we study how the circuit gets transpiled in more detail. You can use the default Qiskit transpiler on IQM quantum computers with both\\nthe Crystal and the Star architectures.\\nStarting from the GHZ circuit we created above: Under the hood the Qiskit transpiler uses the IQMDefaultSchedulingPlugin plugin that\\nautomatically adapts the transpiled circuit to the IQMBackend. In particular, if optimization_level > 0 , the plugin will use the IQMOptimizeSingleQubitGates pass to optimize single-qubit gates, and for devices that have the IQM Star architecture, the plugin will use the IQMNaiveResonatorMoving pass to automatically insert MoveGate instructions\\nas needed. Alternatively, you can use the transpile_to_IQM() function for more precise control over the\\ntranspilation process as documented below. It is also possible to use one of our other pre-defined transpiler plugins as an argument to transpile() , for example transpile(circuit, backend=backend, scheduling_method=\\"only_move_routing_keep\\") .\\nAdditionally, you can use any of our transpiler passes\\nto define your own qiskit.transpiler.PassManager if you want to assemble custom\\ntranspilation procedures manually. The IQM Star architecture includes computational resonators as additional QPU components,\\nand uses qubit-resonator gates instead of two-qubit gates. These include MoveGate which moves qubit states to and from the resonators. The standard Qiskit transpiler does not know how to compile qubit-resonator gates.\\nThis is why IQMBackend provides the Qiskit transpiler a simplified transpilation target in which\\nthe resonators and MOVE gates have been abstracted away, and replaced with fictional two-qubit gates\\nthat directly connect qubits that can be made to interact via a resonator. It then\\nuses IQMDefaultSchedulingPlugin to re-introduce resonators and add MOVE gates between qubits and resonators as necessary at the scheduling stage. IQMDefaultSchedulingPlugin is executed automatically when you use the Qiskit transpiler.\\nStarting from the GHZ circuit we created above: As an alternative to the native Qiskit transpiler integration, you can use the transpile_to_IQM() function.  It is meant for users who want at least one of the following: more fine grained control over the transpilation process without having to figure out which IQM\\ntranspiler plugin to use, transpile Star architecture circuits that already contain qubit-resonator gates, or force the transpiler to use a strict subset of qubits on the device. For example, if you want to transpile the circuit with optimization_level=0 but also apply the\\nsingle qubit gate optimization pass, you can do one of the following, equivalent things: Similarly, if you want to transpile a native Star architecture circuit that already contains MoveGate instances (that act on a qubit and a computational resonator), you can do the following: And if you want force the compiler to use a strict subset of qubits on the device, you can do the following: Note that if you do this, you do need to provide the IQMBackend.run() method a qubit\\nmapping that matches the restriction: For the native integration of the custom IQM transpiler passes with the Qiskit transpiler, we\\nhave implemented several scheduling plugins for the Qiskit transpiler. These plugins can be used as\\nthe scheduling_method string argument for transpile() .\\nThe mapping between these strings and the classes that implement the plugins is defined in the pyproject.toml file of this package.\\nThe documentation of these plugins in found in the respective plugin classes. If you are unsure which plugin to use, you can use transpile_to_IQM() with the appropriate\\narguments. This function determines which plugin to use based on the backend and the provided\\narguments.  Note that the Qiskit transpiler automatically uses the IQMDefaultSchedulingPlugin when the backend is an IQMBackend. It is possible to submit multiple circuits to be executed, as a batch. In many cases this is more\\ntime efficient than running the circuits one by one. Batch execution has some restrictions: all the\\ncircuits must be executed for the same number of shots. For starters,\\nlet’s construct two circuits preparing and measuring different Bell states: Now, we can run them together in a batch: The batch execution functionality can be used to run a parameterized circuit for various concrete values of parameters: Note that it is important to transpile the parameterized circuit before binding the values to ensure a consistent qubit\\nmeasurements across circuits in the batch. When multiple measurement instructions are present in a circuit, the measurements may be multiplexed, meaning the\\nmeasurement pulses would be simultaneously executed on the quantum hardware, if possible. Multiplexing requires the\\nmeasurement instructions to form a convex subgraph, i.e. not have other instructions between them acting on the same\\nqubits. You don’t have to do anything special to enable multiplexing, it is automatically attempted by the\\ncircuit-to-pulse compiler on the server side. However, you can ensure multiplexing (whenever\\npossible on the hardware level) by putting a barrier instruction before and after a group of\\nmeasurements.  This prevents the transpiler from inserting any other instructions between the\\nmeasurements.  There is no concept of multiplexed or simultaneous measurements in Qiskit, so the\\ncircuit diagram will not indicate any multiplexing: In this section we show how to simulate the execution of quantum circuits on IQM quantum computers. Note Since the simulation happens locally, you do not need access to an actual quantum computer. The execution of circuits can be simulated locally, with a noise model to mimic the real hardware as\\nmuch as possible.  To this end, Qiskit on IQM provides the class IQMFakeBackend that can\\nbe instantiated with properties of a certain QPU, e.g. using functions such as IQMFakeAdonis() , IQMFakeApollo() and IQMFakeAphrodite() that represent specific IQM quantum architectures with pre-defined, representative noise models. Above, we use an IQMFakeAdonis() instance to run a noisy simulation of circuit on a simulated 5-qubit Adonis chip.\\nThe noise model includes relaxation ( \\\\(T_1\\\\) ) and dephasing ( \\\\(T_2\\\\) ), gate infidelities and readout errors.\\nIf you want to customize the noise model instead of using the default one provided by IQMFakeAdonis() , you can create\\na copy of the IQMFakeBackend instance with an updated error profile: Circuits can be executed against a mock environment: an IQM server that has no real quantum computer hardware.\\nResults from such executions are random bits. This may be useful when developing and testing software integrations. Qiskit on IQM contains IQMFacadeBackend , which allows to combine the mock remote execution with a local\\nnoisy quantum circuit simulation. This way you can both validate your integration as well as get an idea of the expected circuit execution results. To run a circuit this way, use the \\"facade_adonis\\" backend retrieved from the provider. Note that the provider must be\\ninitialized with the URL of a quantum computer with the equivalent architecture (i.e. names of qubits, their\\nconnectivity, and the native gateset should match the 5-qubit Adonis architecture). Note When a classical register is added to the circuit, Qiskit fills it with classical bits of value 0 by default. If the\\nregister is not used later, and the circuit is submitted to the IQM server, the results will not contain those\\n0-filled bits. To make sure the facade backend returns results in the same format as a real IQM server, IQMFacadeBackend.run() checks for the presence of unused classical registers, and fails with an error if there\\nare any. previous Integration Guide next License By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"API Reference","url":"/iqm-client/API.html","description":"iqm.iqm_client Client-side library for connecting to and executing quantum circuits on IQM quantum computers. iqm.qiskit_iqm Qiskit adapter for IQM's quantum computers. previous IQM Client next iqm.iq...","content":"iqm.iqm_client Client-side library for connecting to and executing quantum circuits on IQM quantum computers. iqm.qiskit_iqm Qiskit adapter for IQM's quantum computers. previous IQM Client next iqm.iqm_client By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"Contributors","url":"/iqm-client/authors.html","description":"Olli Ahonen < olli @ meetiqm . com > Ville Bergholm < ville @ meetiqm . com > Maija Nevala < maija @ meetiqm . com > Hayk Sargsyan < hayk @ meetiqm . com > Maxim Smirnov < dc914337 @ gmail . com > Oll...","content":"Olli Ahonen < olli @ meetiqm . com > Ville Bergholm < ville @ meetiqm . com > Maija Nevala < maija @ meetiqm . com > Hayk Sargsyan < hayk @ meetiqm . com > Maxim Smirnov < dc914337 @ gmail . com > Olli Tyrkkö < otyrkko @ meetiqm . com > Rakhim Davletkaliyev < rakhim . davletkaliyev @ meetiqm . com > Matthias Beuerle < matthias . beuerle @ meetiqm . com > Janne Kotilahti < janne @ meetiqm . com > Vladimir Kukushkin < vladimir . kukushkin @ meetiqm . com > Ricardas Brazinskas < ricardas . brazinskas @ meetiqm . com > Leon Wubben < leon @ meetiqm . com > Adrian Auer < adrian . auer @ meetiqm . com > Stefan Seegerer < stefan . seegerer @ meetiqm . com > Vicente Pina Canelles < vicente . pina @ meetiqm . com > Jake Muff < jake . muff @ vtt . fi > previous License next Changelog By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm","url":"/iqm-client/api/iqm.qiskit_iqm.html","description":"Qiskit adapter for IQM’s quantum computers. Subpackages and modules examples Example code. fake_backends Fake backends for simulating IQM quantum computers. iqm_backend Qiskit backend for IQM quantum ...","content":"Qiskit adapter for IQM’s quantum computers. Subpackages and modules examples Example code. fake_backends Fake backends for simulating IQM quantum computers. iqm_backend Qiskit backend for IQM quantum computers. iqm_circuit A simple extension of the QuantumCircuit class to allow the MOVE gate to be applied with a .move(qubit, resonator) shortcut. iqm_circuit_validation Helper functions for circuit validation. iqm_job Circuit execution jobs. iqm_move_layout Generate an initial layout for a quantum circuit that is valid on the quantum architecture specification of the given backend. iqm_naive_move_pass Naive transpilation for the IQM Star architecture. iqm_provider Qiskit backend provider for IQM backends. iqm_transpilation Transpilation tool to optimize the decomposition of single-qubit gates tailored to IQM hardware. move_gate MOVE gate to be used on the IQM Star architecture. qiskit_to_iqm Conversion tools from Qiskit to IQM representation. transpiler_plugins Collection of Qiskit transpiler plugins for native use of specialized transpiler passes by our devices. previous iqm.iqm_client.util.IQMJSONEncoder next iqm.qiskit_iqm.examples By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors","url":"/iqm-client/api/iqm.iqm_client.errors.html","description":"This module contains error classes required by IQMClient. Exceptions APITimeoutError Executing a job on the server took too long. CircuitExecutionError Something went wrong on the server. CircuitTrans...","content":"This module contains error classes required by IQMClient. Exceptions APITimeoutError Executing a job on the server took too long. CircuitExecutionError Something went wrong on the server. CircuitTranspilationError Circuit transpilation failed. CircuitValidationError Circuit validation failed. ClientAuthenticationError Something went wrong with user authentication. ClientConfigurationError Wrong configuration provided. EndpointRequestError Retrieving something from a server endpoint failed because we did not understand the response. JobAbortionError Job abortion failed. previous iqm.iqm_client.authentication.TokensFileReader next iqm.iqm_client.errors.APITimeoutError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.NativeOperation","url":"/iqm-client/api/iqm.iqm_client.models.NativeOperation.html","description":"Bases: object Describes a native operation on the quantum computer. Attributes factorizable Iff True, any multi-component instance of this operation can be broken down to single-component instances, a...","content":"Bases: object Describes a native operation on the quantum computer. Attributes factorizable Iff True, any multi-component instance of this operation can be broken down to single-component instances, and calibration data is specific to single-component loci. no_calibration_needed Iff true, the operation is always allowed on all QPU loci regardless of calibration state. renamed_to If nonempty, indicates that this operation name is deprecated, and IQM client will auto-rename it to the new name. symmetric True iff the effect of operation is symmetric in the locus components it acts on. name Name of the operation. arity Number of locus components (usually qubits) the operation acts on. args_required Maps names of required operation parameters to their allowed types. args_not_required Maps names of optional operation parameters to their allowed types. Methods __delattr__ (name) Implement delattr(self, name). __eq__ (other) Return self==value. __hash__ () Return hash(self). __repr__ () Return repr(self). __setattr__ (name, value) Implement setattr(self, name, value). name ( str ) – arity ( int ) – args_required ( dict [ str , tuple [ type , ... ] ] ) – args_not_required ( dict [ str , tuple [ type , ... ] ] ) – symmetric ( bool ) – renamed_to ( str ) – factorizable ( bool ) – no_calibration_needed ( bool ) – Name of the operation. Number of locus components (usually qubits) the operation acts on.\\nZero means the operation can be applied on any number of locus components. Maps names of required operation parameters to their allowed types. Maps names of optional operation parameters to their allowed types. True iff the effect of operation is symmetric in the locus components it acts on.\\nOnly meaningful if arity != 1. If nonempty, indicates that this operation name is deprecated, and IQM client will\\nauto-rename it to the new name. Iff True, any multi-component instance of this operation can be broken down to\\nsingle-component instances, and calibration data is specific to single-component loci. Iff true, the operation is always allowed on all QPU loci regardless of calibration state.\\nTypically a metaoperation like barrier. previous iqm.iqm_client.models.MoveGateValidationMode next iqm.iqm_client.models.QualityMetricSet By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyKeepExistingMovesPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyKeepExistingMovesPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for MoveGate routing without single qubit gate optimization\\nwhere existing moves are kept. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingK...","content":"Bases: MoveGateRoutingPlugin Plugin class for MoveGate routing without single qubit gate optimization\\nwhere existing moves are kept. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingKeepExistingMovesPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors.ClientAuthenticationError","url":"/iqm-client/api/iqm.iqm_client.errors.ClientAuthenticationError.html","description":"Something went wrong with user authentication. previous iqm.iqm_client.errors.CircuitValidationError next iqm.iqm_client.errors.ClientConfigurationError By IQM client developers © Copyright 2021-2025,...","content":"Something went wrong with user authentication. previous iqm.iqm_client.errors.CircuitValidationError next iqm.iqm_client.errors.ClientConfigurationError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationExactPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationExactPlugin.html","description":"Bases: OnlyRZOptimizationPlugin Plugin class for single qubit gate optimization without MOVE gate routing and\\nthe final RZ gates are not dropped. Methods previous iqm.qiskit_iqm.transpiler_plugins.Onl...","content":"Bases: OnlyRZOptimizationPlugin Plugin class for single qubit gate optimization without MOVE gate routing and\\nthe final RZ gates are not dropped. Methods previous iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationExactIgnoreBarriersPlugin next iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationIgnoreBarriersPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_naive_move_pass.transpile_to_IQM","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_naive_move_pass.transpile_to_IQM.html","description":"Customized transpilation to IQM backends. Works with both the Crystal and Star architectures. circuit ( QuantumCircuit ) – The circuit to be transpiled without MOVE gates. backend ( IQMBackendBase ) –...","content":"Customized transpilation to IQM backends. Works with both the Crystal and Star architectures. circuit ( QuantumCircuit ) – The circuit to be transpiled without MOVE gates. backend ( IQMBackendBase ) – The target backend to compile to. Does not require a resonator. target ( IQMTarget | None ) – An alternative target to compile to than the backend, using this option requires intimate knowledge\\nof the transpiler and thus it is not recommended to use. initial_layout ( Layout | dict | list | None ) – The initial layout to use for the transpilation, same as transpile() . perform_move_routing ( bool ) – Whether to perform MOVE gate routing. optimize_single_qubits ( bool ) – Whether to optimize single qubit gates away. ignore_barriers ( bool ) – Whether to ignore barriers when optimizing single qubit gates away. remove_final_rzs ( bool ) – Whether to remove the final z rotations. It is recommended always to set this to true as\\nthe final RZ gates do no change the measurement outcomes of the circuit. existing_moves_handling ( ExistingMoveHandlingOptions | None ) – How to handle existing MOVE gates in the circuit, required if the circuit contains\\nMOVE gates. restrict_to_qubits ( list [ int ] | list [ str ] | None ) – Restrict the transpilation to only use these specific physical qubits. Note that you will\\nhave to pass this information to the backend.run method as well as a dictionary. qiskit_transpiler_kwargs – Arguments to be passed to the Qiskit transpiler. Transpiled circuit ready for running on the backend. QuantumCircuit previous iqm.qiskit_iqm.iqm_naive_move_pass next iqm.qiskit_iqm.iqm_naive_move_pass.IQMNaiveResonatorMoving By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_backend","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_backend.html","description":"Qiskit backend for IQM quantum computers. Classes IQMBackendBase (architecture, **kwargs) Abstract base class for various IQM-specific backends. IQMTarget (architecture, component_to_idx, ...) Transpi...","content":"Qiskit backend for IQM quantum computers. Classes IQMBackendBase (architecture, **kwargs) Abstract base class for various IQM-specific backends. IQMTarget (architecture, component_to_idx, ...) Transpilation target for an IQM architecture. Inheritance previous iqm.qiskit_iqm.fake_backends.iqm_fake_backend.IQMFakeBackend next iqm.qiskit_iqm.iqm_backend.IQMBackendBase By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_circuit_validation.validate_circuit","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_circuit_validation.validate_circuit.html","description":"Validate a circuit against the backend. circuit ( QuantumCircuit ) – backend ( IQMBackendBase ) – validate_moves ( MoveGateValidationMode | None ) – qubit_mapping ( dict [ int , str ] | None ) – previ...","content":"Validate a circuit against the backend. circuit ( QuantumCircuit ) – backend ( IQMBackendBase ) – validate_moves ( MoveGateValidationMode | None ) – qubit_mapping ( dict [ int , str ] | None ) – previous iqm.qiskit_iqm.iqm_circuit_validation next iqm.qiskit_iqm.iqm_job By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_circuit","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_circuit.html","description":"A simple extension of the QuantumCircuit class to allow the MOVE\\ngate to be applied with a .move(qubit, resonator) shortcut. Classes IQMCircuit (*regs[, name, global_phase, ...]) Extends the QuantumCi...","content":"A simple extension of the QuantumCircuit class to allow the MOVE\\ngate to be applied with a .move(qubit, resonator) shortcut. Classes IQMCircuit (*regs[, name, global_phase, ...]) Extends the QuantumCircuit class, adding a shortcut for applying the MOVE gate. Inheritance previous iqm.qiskit_iqm.iqm_backend.IQMTarget next iqm.qiskit_iqm.iqm_circuit.IQMCircuit By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_job","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_job.html","description":"Circuit execution jobs. Classes IQMJob (backend, job_id[, timeout_seconds]) Implementation of Qiskit's job interface to handle circuit execution on an IQM server. Inheritance previous iqm.qiskit_iqm.i...","content":"Circuit execution jobs. Classes IQMJob (backend, job_id[, timeout_seconds]) Implementation of Qiskit's job interface to handle circuit execution on an IQM server. Inheritance previous iqm.qiskit_iqm.iqm_circuit_validation.validate_circuit next iqm.qiskit_iqm.iqm_job.IQMJob By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingKeepExistingMovesPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingKeepExistingMovesPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where existing moves are kept. Methods previous iqm.qiskit_iqm.transpiler_plugins.IQMSchedulingPlugin ...","content":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where existing moves are kept. Methods previous iqm.qiskit_iqm.transpiler_plugins.IQMSchedulingPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyKeepExistingMovesPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.qiskit_to_iqm","url":"/iqm-client/api/iqm.qiskit_iqm.qiskit_to_iqm.html","description":"Conversion tools from Qiskit to IQM representation. Functions deserialize_instructions (instructions, ...) Helper function to turn a list of IQM Instructions into a Qiskit QuantumCircuit. serialize_in...","content":"Conversion tools from Qiskit to IQM representation. Functions deserialize_instructions (instructions, ...) Helper function to turn a list of IQM Instructions into a Qiskit QuantumCircuit. serialize_instructions (circuit, ...[, ...]) Serialize a quantum circuit into the IQM data transfer format. Classes MeasurementKey (creg_name, creg_len, ...) Unique key associated with a measurement instruction. Exceptions InstructionNotSupportedError Raised when a given instruction is not supported by the IQM server. Inheritance previous iqm.qiskit_iqm.move_gate.MoveGate next iqm.qiskit_iqm.qiskit_to_iqm.deserialize_instructions By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.qiskit_to_iqm.InstructionNotSupportedError","url":"/iqm-client/api/iqm.qiskit_iqm.qiskit_to_iqm.InstructionNotSupportedError.html","description":"Raised when a given instruction is not supported by the IQM server. previous iqm.qiskit_iqm.qiskit_to_iqm.MeasurementKey next iqm.qiskit_iqm.transpiler_plugins By IQM client developers © Copyright 202...","content":"Raised when a given instruction is not supported by the IQM server. previous iqm.qiskit_iqm.qiskit_to_iqm.MeasurementKey next iqm.qiskit_iqm.transpiler_plugins By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingWithExactRZPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingWithExactRZPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where\\ntrailing RZ gates are kept in the circuit. Methods previous iqm.qiskit_iqm.transpiler_plugins.Mo...","content":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where\\ntrailing RZ gates are kept in the circuit. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingTrustExistingMovesPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingWithRZOptimizationIgnoreBarriersPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.examples.bell_measure","url":"/iqm-client/api/iqm.qiskit_iqm.examples.bell_measure.html","description":"This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on an IQM quantum\\ncomputer. See the Qiskit on IQM user guide for instructions: https://docs.meetiqm.com/i...","content":"This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on an IQM quantum\\ncomputer. See the Qiskit on IQM user guide for instructions: https://docs.meetiqm.com/iqm-client/user_guide_qiskit.html Functions bell_measure (server_url) Run a circuit that prepares and measures a Bell state. previous iqm.qiskit_iqm.examples next iqm.qiskit_iqm.examples.bell_measure.bell_measure By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyRemoveExistingMovesPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyRemoveExistingMovesPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for MoveGate routing without single qubit gate optimization\\nwhere existing moves are removed. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRouti...","content":"Bases: MoveGateRoutingPlugin Plugin class for MoveGate routing without single qubit gate optimization\\nwhere existing moves are removed. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyTrustExistingMovesPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.JobParameters","url":"/iqm-client/api/iqm.iqm_client.models.JobParameters.html","description":"Bases: BaseModel Job-specific parameters extracted from the original RunRequest. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects...","content":"Bases: BaseModel Job-specific parameters extracted from the original RunRequest. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. shots  max_circuit_duration_over_t2  heralding_mode  move_validation_mode  move_gate_frame_tracking_mode  dd_mode  dd_strategy  Methods shots ( int ) – max_circuit_duration_over_t2 ( float | None ) – heralding_mode ( HeraldingMode ) – move_validation_mode ( MoveGateValidationMode ) – move_gate_frame_tracking_mode ( MoveGateFrameTrackingMode ) – dd_mode ( DDMode ) – dd_strategy ( DDStrategy | None ) – A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.Instruction next iqm.iqm_client.models.Metadata By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.GateInfo","url":"/iqm-client/api/iqm.iqm_client.models.GateInfo.html","description":"Bases: BaseModel Information about a quantum gate/operation. Attributes loci Returns all loci which are available for at least one of the implementations. model_computed_fields A dictionary of compute...","content":"Bases: BaseModel Information about a quantum gate/operation. Attributes loci Returns all loci which are available for at least one of the implementations. model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. implementations mapping of available implementation names to information about the implementations default_implementation default implementation for the gate, used unless overridden by override_default_implementation or unless the user requests a specific implementation for a particular gate in the circuit using Instruction.implementation override_default_implementation mapping of loci to implementation names that override default_implementation for those loci Methods override_default_implementation_validator (value) Converts locus keys to tuples if they are encoded as strings. implementations ( dict [ str , GateImplementationInfo ] ) – default_implementation ( str ) – override_default_implementation ( dict [ tuple [ str , ... ] , str ] ) – mapping of available implementation names to information about the implementations default implementation for the gate, used unless overridden by override_default_implementation or unless the user requests a specific implementation for a particular gate in the circuit using Instruction.implementation mapping of loci to implementation names that override default_implementation for those loci Converts locus keys to tuples if they are encoded as strings. value ( Any ) – dict [ tuple [ str , …], str ] Returns all loci which are available for at least one of the implementations. The loci are sorted first based on the first locus component, then the second, etc.\\nThe sorting of individual locus components is first done alphabetically based on their\\nnon-numeric part, and then components with the same non-numeric part are sorted numerically.\\nAn example of loci sorted this way would be: (‘QB1’, ‘QB2’),\\n(‘QB2’, ‘COMPR1’),\\n(‘QB2’, ‘QB3’),\\n(‘QB3’, ‘COMPR1’),\\n(‘QB3’, ‘COMPR2’),\\n(‘QB3’, ‘QB1’),\\n(‘QB10’, ‘QB2’), A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.GateImplementationInfo next iqm.iqm_client.models.HeraldingMode By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.HeraldingMode","url":"/iqm-client/api/iqm.iqm_client.models.HeraldingMode.html","description":"Bases: str , Enum Heralding mode for circuit execution. Heralding is the practice of generating data about the state of qubits prior to execution of a circuit.\\nThis can be achieved by measuring the qu...","content":"Bases: str , Enum Heralding mode for circuit execution. Heralding is the practice of generating data about the state of qubits prior to execution of a circuit.\\nThis can be achieved by measuring the qubits immediately before executing each shot for a circuit. Attributes NONE Do not do any heralding. ZEROS Perform a heralding measurement after qubit initialization, only retain shots with an all-zeros result. Methods _generate_next_value_ (start, count, last_values) Generate the next value when not given. _new_member_ (**kwargs) Create and return a new object. _value_repr_ () Return repr(self). __format__ (format_spec) Return a formatted version of the string as described by format_spec. __new__ (value)  __repr__ () Return repr(self). __str__ () Return str(self). Do not do any heralding. Perform a heralding measurement after qubit initialization, only retain shots with an all-zeros result. Note: in this mode, the number of shots returned after execution will be less or equal to the requested amount\\ndue to the post-selection based on heralding data. previous iqm.iqm_client.models.GateInfo next iqm.iqm_client.models.Instruction By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingTrustExistingMovesPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingTrustExistingMovesPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where existing moves are not checked. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRouti...","content":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where existing moves are not checked. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingRemoveExistingMovesPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingWithExactRZPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.Counts","url":"/iqm-client/api/iqm.iqm_client.models.Counts.html","description":"Bases: BaseModel Circuit measurement results in histogram representation. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model...","content":"Bases: BaseModel Circuit measurement results in histogram representation. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. measurement_keys Measurement keys in the order they are concatenated to form the state bitstrings in counts . counts mapping from computational basis states, represented as bitstrings, to the number of times they were observed when executing the circuit Methods measurement_keys ( list [ str ] ) – counts ( dict [ str , int ] ) – A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. Measurement keys in the order they are concatenated to form the state bitstrings in counts . For example, if measurement_keys is ['mk_1', 'mk2'] and 'mk_1' measures QB1 and 'mk_2' measures QB3 and QB5 , then counts could contains keys such as '010' representing\\nshots where QB1\`, \`\`QB3 and QB5 were observed to be in the state \\\\(|010\\nangle\\\\) . mapping from computational basis states, represented as bitstrings, to the number of times they were observed\\nwhen executing the circuit previous iqm.iqm_client.models.ClientLibrary next iqm.iqm_client.models.DDMode By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.api.APIEndpoint","url":"/iqm-client/api/iqm.iqm_client.api.APIEndpoint.html","description":"Bases: Enum Supported API endpoints. Attributes CONFIGURATION  SUBMIT_JOB  GET_JOB_REQUEST_PARAMETERS  GET_JOB_RESULT  GET_JOB_STATUS  GET_JOB_CALIBRATION_SET_ID  GET_JOB_CIRCUITS_BATCH  GET_JOB_TIMEL...","content":"Bases: Enum Supported API endpoints. Attributes CONFIGURATION  SUBMIT_JOB  GET_JOB_REQUEST_PARAMETERS  GET_JOB_RESULT  GET_JOB_STATUS  GET_JOB_CALIBRATION_SET_ID  GET_JOB_CIRCUITS_BATCH  GET_JOB_TIMELINE  GET_JOB_ERROR_LOG  GET_JOB_COUNTS  ABORT_JOB  DELETE_JOB  HEALTH  ABOUT  CLIENT_LIBRARIES  CALIBRATION_SERVICE_CONFIGURATION  QUANTUM_ARCHITECTURE  CHANNEL_PROPERTIES  QUALITY_METRICS_LATEST  QUALITY_METRICS  QUALITY_METRICS_MONITORING  CALIBRATED_GATES  START_CALIBRATION_JOB  ABORT_CALIBRATION_JOB  CALIBRATION_SERVICE_JOBS  CALIBRATION  Methods previous iqm.iqm_client.api.APIConfig next iqm.iqm_client.api.APIVariant By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.transpile.transpile_remove_moves","url":"/iqm-client/api/iqm.iqm_client.transpile.transpile_remove_moves.html","description":"Convert a Star architecture circuit involving resonators and MOVE gates into an equivalent\\nsimplified achitecture circuit without them. The method assumes that in circuit a MOVE gate is always used to...","content":"Convert a Star architecture circuit involving resonators and MOVE gates into an equivalent\\nsimplified achitecture circuit without them. The method assumes that in circuit a MOVE gate is always used to move a qubit state into a\\nresonator before any other gates act on the resonator. If this is not the case, this function\\nwill not work as intended. circuit ( Circuit ) – Star architecture circuit from which resonators and MOVE gates should be removed. Equivalent simplified architecture circuit without resonators and MOVEs. Circuit previous iqm.iqm_client.transpile.transpile_insert_moves next iqm.iqm_client.transpile.ExistingMoveHandlingOptions By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.examples.resonance_example.resonance_example","url":"/iqm-client/api/iqm.qiskit_iqm.examples.resonance_example.resonance_example.html","description":"Run a circuit via IQM Resonance. server_url ( str ) – URL of the IQM Resonance QC used for execution api_token ( str | None ) – IQM Resonance API token for authentication a mapping of bitstrings repre...","content":"Run a circuit via IQM Resonance. server_url ( str ) – URL of the IQM Resonance QC used for execution api_token ( str | None ) – IQM Resonance API token for authentication a mapping of bitstrings representing qubit measurement results to counts for each result dict [ str , int ] previous iqm.qiskit_iqm.examples.resonance_example next iqm.qiskit_iqm.examples.transpile_example By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.move_gate","url":"/iqm-client/api/iqm.qiskit_iqm.move_gate.html","description":"MOVE gate to be used on the IQM Star architecture. Module Attributes MOVE_GATE_UNITARY Unitary matrix for simulating the ideal MOVE gate. Classes MoveGate ([label]) The MOVE operation is a unitary pop...","content":"MOVE gate to be used on the IQM Star architecture. Module Attributes MOVE_GATE_UNITARY Unitary matrix for simulating the ideal MOVE gate. Classes MoveGate ([label]) The MOVE operation is a unitary population exchange operation between a qubit and a resonator. Inheritance previous iqm.qiskit_iqm.iqm_transpilation.IQMReplaceGateWithUnitaryPass next iqm.qiskit_iqm.move_gate.MOVE_GATE_UNITARY By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors.CircuitExecutionError","url":"/iqm-client/api/iqm.iqm_client.errors.CircuitExecutionError.html","description":"Something went wrong on the server. previous iqm.iqm_client.errors.APITimeoutError next iqm.iqm_client.errors.CircuitTranspilationError By IQM client developers © Copyright 2021-2025, IQM. Last update...","content":"Something went wrong on the server. previous iqm.iqm_client.errors.APITimeoutError next iqm.iqm_client.errors.CircuitTranspilationError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_move_layout.generate_initial_layout","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_move_layout.generate_initial_layout.html","description":"Generates an initial layout for the given circuit, when run against the given backend. backend ( IQMBackendBase ) – IQM backend to run against. circuit ( QuantumCircuit ) – Star architecture circuit f...","content":"Generates an initial layout for the given circuit, when run against the given backend. backend ( IQMBackendBase ) – IQM backend to run against. circuit ( QuantumCircuit ) – Star architecture circuit for which a layout is to be generated. restrict_to_qubits ( list [ int ] | list [ str ] | None ) – Optional list of qubits to restrict the layout to. Layout that maps the logical qubits of circuit to the physical qubits of backend so that\\nall the gates in circuit are available on those loci. Layout previous iqm.qiskit_iqm.iqm_move_layout next iqm.qiskit_iqm.iqm_move_layout.IQMMoveLayout By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.iqm_fake_backend","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.iqm_fake_backend.html","description":"Error profile and fake backend base class for simulating IQM quantum computers. Classes IQMErrorProfile (t1s, t2s, ...[, name]) Properties of an IQM QPU specimen, used for constructing an error model....","content":"Error profile and fake backend base class for simulating IQM quantum computers. Classes IQMErrorProfile (t1s, t2s, ...[, name]) Properties of an IQM QPU specimen, used for constructing an error model. IQMFakeBackend (architecture, error_profile) Simulated backend that mimics the behaviour of IQM quantum computers. Inheritance previous iqm.qiskit_iqm.fake_backends.fake_garnet.IQMFakeGarnet next iqm.qiskit_iqm.fake_backends.iqm_fake_backend.IQMErrorProfile By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_deneb.IQMFakeDeneb","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_deneb.IQMFakeDeneb.html","description":"Return IQMFakeBackend instance representing IQM’s Deneb architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_deneb next iqm.qiskit_iqm.fake_backends.fake_garnet By IQM client develo...","content":"Return IQMFakeBackend instance representing IQM’s Deneb architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_deneb next iqm.qiskit_iqm.fake_backends.fake_garnet By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.RunRequest","url":"/iqm-client/api/iqm.iqm_client.models.RunRequest.html","description":"Bases: BaseModel Request for an IQM quantum computer to run a job that executes a batch of quantum circuits. Note: all circuits in a batch must measure the same qubits otherwise batch execution fails....","content":"Bases: BaseModel Request for an IQM quantum computer to run a job that executes a batch of quantum circuits. Note: all circuits in a batch must measure the same qubits otherwise batch execution fails. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. circuits batch of quantum circuit(s) to execute custom_settings Custom settings to override default IQM hardware settings and calibration data. calibration_set_id ID of the calibration set to use, or None to use the latest calibration set qubit_mapping mapping of logical qubit names to physical qubit names, or None if using physical qubit names shots how many times to execute each circuit in the batch, must be greater than zero max_circuit_duration_over_t2 Circuits are disqualified on the server if they are longer than this ratio of the T2 time of the qubits. heralding_mode which heralding mode to use during the execution of circuits in this request. move_validation_mode Which method of MOVE gate validation to use for circuit compilation. move_gate_frame_tracking_mode Which method of MOVE gate frame tracking to use for circuit compilation. active_reset_cycles Number of active reset operations inserted at the beginning of each circuit for each active qubit. dd_mode Control whether dynamical decoupling should be enabled or disabled during the execution. dd_strategy A particular dynamical decoupling strategy to be used during the execution. Methods circuits ( list [ Circuit ] ) – custom_settings ( dict [ str , Any ] | None ) – calibration_set_id ( UUID | None ) – qubit_mapping ( list [ SingleQubitMapping ] | None ) – shots ( int ) – max_circuit_duration_over_t2 ( float | None ) – heralding_mode ( HeraldingMode ) – move_validation_mode ( MoveGateValidationMode ) – move_gate_frame_tracking_mode ( MoveGateFrameTrackingMode ) – active_reset_cycles ( int | None ) – dd_mode ( DDMode ) – dd_strategy ( DDStrategy | None ) – A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. batch of quantum circuit(s) to execute Custom settings to override default IQM hardware settings and calibration data.\\nNote: This field should be always None in normal use. ID of the calibration set to use, or None to use the latest calibration set mapping of logical qubit names to physical qubit names, or None if using physical qubit names how many times to execute each circuit in the batch, must be greater than zero Circuits are disqualified on the server if they are longer than this ratio\\nof the T2 time of the qubits.\\nIf set to 0.0, no circuits are disqualified. If set to None the server default value is used. which heralding mode to use during the execution of circuits in this request. Which method of MOVE gate validation to use for circuit compilation. Which method of MOVE gate frame tracking to use for circuit compilation. Number of active reset operations inserted at the beginning of each circuit for each active qubit. None means active reset is not used but instead reset is done by waiting (relaxation). Integer values smaller\\nthan 1 result in neither active nor reset by wait being used, in which case any reset operations must be explicitly\\nadded in the circuit. Control whether dynamical decoupling should be enabled or disabled during the execution. A particular dynamical decoupling strategy to be used during the execution. previous iqm.iqm_client.models.RunCounts next iqm.iqm_client.models.RunResult By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.api.APIConfig","url":"/iqm-client/api/iqm.iqm_client.api.APIConfig.html","description":"Bases: object Provides supported API endpoints for a given API variant. Methods _get_api_urls () Returns: Relative URLs for each supported API endpoints. is_supported (endpoint) param endpoint : API e...","content":"Bases: object Provides supported API endpoints for a given API variant. Methods _get_api_urls () Returns: Relative URLs for each supported API endpoints. is_supported (endpoint) param endpoint : API endpoint. API endpoint. url (endpoint, *args) param endpoint : API endpoint. API endpoint. variant ( APIVariant ) – iqm_server_url ( str ) – endpoint ( APIEndpoint ) – API endpoint. True if the endpoint is supported, False otherwise. bool endpoint ( APIEndpoint ) – API endpoint. args – Arguments to be passed to the URL. URL for the given endpoint. ValueError – If the endpoint is not supported. str previous iqm.iqm_client.api next iqm.iqm_client.api.APIEndpoint By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors.EndpointRequestError","url":"/iqm-client/api/iqm.iqm_client.errors.EndpointRequestError.html","description":"Retrieving something from a server endpoint failed because we did not understand the response. previous iqm.iqm_client.errors.ClientConfigurationError next iqm.iqm_client.errors.JobAbortionError By IQ...","content":"Retrieving something from a server endpoint failed because we did not understand the response. previous iqm.iqm_client.errors.ClientConfigurationError next iqm.iqm_client.errors.JobAbortionError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.STANDARD_DD_STRATEGY","url":"/iqm-client/api/iqm.iqm_client.models.STANDARD_DD_STRATEGY.html","description":"The default DD strategy uses the following gate sequences: Simple symmetric CPMG sequence for short idling times. Asymmetric (left-aligned) universal XY4 sequence for medium idling times. Asymmetric (...","content":"The default DD strategy uses the following gate sequences: Simple symmetric CPMG sequence for short idling times. Asymmetric (left-aligned) universal XY4 sequence for medium idling times. Asymmetric (left-aligned) universal EDD sequence for longer idling times. previous iqm.iqm_client.models.PRXSequence next iqm.iqm_client.models.CircuitMeasurementResults By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.GateImplementationInfo","url":"/iqm-client/api/iqm.iqm_client.models.GateImplementationInfo.html","description":"Bases: BaseModel Information about an implementation of a quantum gate/operation. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo object...","content":"Bases: BaseModel Information about an implementation of a quantum gate/operation. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. loci loci for which this gate implementation has been calibrated Methods loci ( tuple [ tuple [ str , ... ] , ... ] ) – loci for which this gate implementation has been calibrated A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.DynamicQuantumArchitecture next iqm.iqm_client.models.GateInfo By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.move_gate.MOVE_GATE_UNITARY","url":"/iqm-client/api/iqm.qiskit_iqm.move_gate.MOVE_GATE_UNITARY.html","description":"Unitary matrix for simulating the ideal MOVE gate. This matrix is not a realistic description of MOVE, since it applies a zero phase on the moved\\nstate, and acts as identity in the \\\\(|11\\nangle\\\\) subsp...","content":"Unitary matrix for simulating the ideal MOVE gate. This matrix is not a realistic description of MOVE, since it applies a zero phase on the moved\\nstate, and acts as identity in the \\\\(|11\\nangle\\\\) subspace, thus being equal to the SWAP gate. previous iqm.qiskit_iqm.move_gate next iqm.qiskit_iqm.move_gate.MoveGate By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.CalibrationSet","url":"/iqm-client/api/iqm.iqm_client.models.CalibrationSet.html","description":"Bases: BaseModel Metadata and observations of a calibration set. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config C...","content":"Bases: BaseModel Metadata and observations of a calibration set. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. calibration_set_id ID of the calibration set. calibration_set_dut_label Chip Label of the calibration set. calibration_set_is_invalid Whether the calibration set is invalid. calibration_set_created_timestamp Timestamp when the calibration set was created. calibration_set_end_timestamp Timestamp when the calibration set was finalized. observations Calibration data. Methods calibration_set_id ( UUID ) – calibration_set_dut_label ( str ) – calibration_set_is_invalid ( bool ) – calibration_set_created_timestamp ( str ) – calibration_set_end_timestamp ( str ) – observations ( dict [ str , Any ] ) – ID of the calibration set. Chip Label of the calibration set. Whether the calibration set is invalid. Timestamp when the calibration set was created. Timestamp when the calibration set was finalized. Calibration data. A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.validate_circuit next iqm.iqm_client.models.Circuit By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_backend.IQMBackendBase","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_backend.IQMBackendBase.html","description":"Bases: BackendV2 , ABC Abstract base class for various IQM-specific backends. architecture ( Union [ QuantumArchitectureSpecification , DynamicQuantumArchitecture ] ) – Description of the quantum arch...","content":"Bases: BackendV2 , ABC Abstract base class for various IQM-specific backends. architecture ( Union [ QuantumArchitectureSpecification , DynamicQuantumArchitecture ] ) – Description of the quantum architecture associated with the backend instance. Attributes physical_qubits Return the list of physical qubits in the backend. target A qiskit.transpiler.Target object for the backend. target_with_resonators Return the target with MOVE gates and resonators included. architecture Dynamic quantum architecture of the backend instance. name Name of the backend. description Optional human-readable description. online_date Date that the backend came online. backend_version Version of the backend being provided. Methods get_real_target () Return the real physical target of the backend without virtual CZ gates. get_scheduling_stage_plugin () Return the plugin that should be used for scheduling the circuits on this backend. has_resonators () True iff the backend QPU has computational resonators. index_to_qubit_name (index) Given a quantum register index, return the corresponding IQM-style qubit name. qubit_name_to_index (name) Given an IQM-style qubit name, return the corresponding index in the register. restrict_to_qubits (qubits[, ...]) Generated a restricted transpilation target from this backend that only contains the given qubits. Dynamic quantum architecture of the backend instance. A qiskit.transpiler.Target object for the backend. Target Return the target with MOVE gates and resonators included. Return the list of physical qubits in the backend. True iff the backend QPU has computational resonators. bool Return the real physical target of the backend without virtual CZ gates. Target Given an IQM-style qubit name, return the corresponding index in the register. name ( str ) – IQM-style qubit name (‘QB1’, ‘QB2’, etc.) Index of the given qubit in the quantum register. ValueError – Qubit name cannot be found on the backend. int Given a quantum register index, return the corresponding IQM-style qubit name. index ( int ) – Qubit index in the quantum register. Corresponding IQM-style qubit name (‘QB1’, ‘QB2’, etc.). ValueError – Qubit index cannot be found on the backend. str Return the plugin that should be used for scheduling the circuits on this backend. str Generated a restricted transpilation target from this backend that only contains the given qubits. qubits ( list [ int ] | list [ str ] ) – Qubits to restrict the target to. Can be either a list of qubit indices or qubit names. include_resonators ( bool ) – Whether to restrict self.target or self.target_with_resonators . include_fake_czs ( bool ) – Whether to include virtual CZs that are unsupported, but could be routed via MOVE. restricted target IQMTarget previous iqm.qiskit_iqm.iqm_backend next iqm.qiskit_iqm.iqm_backend.IQMTarget By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_aphrodite.IQMFakeAphrodite","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_aphrodite.IQMFakeAphrodite.html","description":"Return IQMFakeBackend instance representing IQM’s Aphrodite architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_aphrodite next iqm.qiskit_iqm.fake_backends.fake_apollo By IQM clien...","content":"Return IQMFakeBackend instance representing IQM’s Aphrodite architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_aphrodite next iqm.qiskit_iqm.fake_backends.fake_apollo By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.authentication.TokenProviderInterface","url":"/iqm-client/api/iqm.iqm_client.authentication.TokenProviderInterface.html","description":"Bases: ABC Interface to token provider Methods close () Closes authentication session. get_token () Returns a valid access token. Returns a valid access token. ClientAuthenticationError – acquiring th...","content":"Bases: ABC Interface to token provider Methods close () Closes authentication session. get_token () Returns a valid access token. Returns a valid access token. ClientAuthenticationError – acquiring the token failed str Closes authentication session. ClientAuthenticationError – closing the session failed None previous iqm.iqm_client.authentication.TokenManager next iqm.iqm_client.authentication.TokensFileReader By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.CircuitMeasurementResultsBatch","url":"/iqm-client/api/iqm.iqm_client.models.CircuitMeasurementResultsBatch.html","description":"Type that represents measurement results for a batch of circuits. alias of list [ dict [ str , list [ list [ int ]]]] previous iqm.iqm_client.models.CircuitMeasurementResults next iqm.iqm_client.model...","content":"Type that represents measurement results for a batch of circuits. alias of list [ dict [ str , list [ list [ int ]]]] previous iqm.iqm_client.models.CircuitMeasurementResults next iqm.iqm_client.models.serialize_qubit_mapping By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationExactIgnoreBarriersPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationExactIgnoreBarriersPlugin.html","description":"Bases: OnlyRZOptimizationPlugin Plugin class for single qubit gate optimization without MOVE gate routing and\\nthe final RZ gates are not dropped. Methods previous iqm.qiskit_iqm.transpiler_plugins.Mov...","content":"Bases: OnlyRZOptimizationPlugin Plugin class for single qubit gate optimization without MOVE gate routing and\\nthe final RZ gates are not dropped. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingWithRZOptimizationIgnoreBarriersPlugin next iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationExactPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.authentication","url":"/iqm-client/api/iqm.iqm_client.authentication.html","description":"This module contains user authentication related classes and functions required by IQMClient. Classes ExternalToken (token) Holds an external token TokenClient (auth_server_url, realm, ...) Requests n...","content":"This module contains user authentication related classes and functions required by IQMClient. Classes ExternalToken (token) Holds an external token TokenClient (auth_server_url, realm, ...) Requests new token from an authentication server TokenManager ([token, tokens_file, ...]) TokenManager manages the access token required for user authentication. TokenProviderInterface () Interface to token provider TokensFileReader (tokens_file) Reads token from a file Inheritance previous iqm.iqm_client.api.APIVariant next iqm.iqm_client.authentication.ExternalToken By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.DDStrategy","url":"/iqm-client/api/iqm.iqm_client.models.DDStrategy.html","description":"Bases: BaseModel Describes a particular dynamical decoupling strategy. The current standard DD stategy can be found in STANDARD_DD_STRATEGY ,\\nbut users can use this class to provide their own dynamica...","content":"Bases: BaseModel Describes a particular dynamical decoupling strategy. The current standard DD stategy can be found in STANDARD_DD_STRATEGY ,\\nbut users can use this class to provide their own dynamical decoupling strategies. See Ezzell et al., Phys. Rev. Appl. 20, 064027 (2022) for information on DD sequences. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. merge_contiguous_waits Merge contiguous Wait instructions into one if they are separated only by Block instructions. target_qubits Qubits on which dynamical decoupling should be applied. skip_leading_wait Skip processing leading Wait instructions. skip_trailing_wait Skip processing trailing Wait instructions. gate_sequences Available decoupling gate sequences to chose from in this strategy. Methods merge_contiguous_waits ( bool ) – target_qubits ( frozenset [ str ] | None ) – skip_leading_wait ( bool ) – skip_trailing_wait ( bool ) – gate_sequences ( list [ tuple [ int , str | list [ tuple [ float , float ] ] , str ] ] ) – Merge contiguous Wait instructions into one if they are separated only by Block instructions. Qubits on which dynamical decoupling should be applied. If None , all qubits are targeted. Skip processing leading Wait instructions. Skip processing trailing Wait instructions. Available decoupling gate sequences to chose from in this strategy. Each sequence is defined by a tuple of (ratio, gate pattern, align) : ratio: Minimal duration for the sequence (in PRX gate durations) as integer. gate pattern: Gate pattern can be defined in two ways. It can be a string containing “X” and “Y” characters,\\nencoding a PRX gate sequence. For example, “YXYX” corresponds to the\\nXY4 sequence, “XYXYYXYX” to the EDD sequence, etc. If more flexibility is needed, a gate pattern can be\\ndefined as a sequence of PRX gate argument tuples (that contain a rotation angle and a phase angle). For\\nexample, sequence “YX” could be written as [(math.pi, math.pi / 2), (math.pi, 0)] . align: Controls the alignment of the sequence within the time window it is inserted in. Supported values: “asap”: Corresponds to a ASAP-aligned sequence with no waiting time before the first pulse. “center”: Corresponds to a symmetric sequence. “alap”: Corresponds to a ALAP-aligned sequence. The Dynamical Decoupling algorithm uses the best fitting gate sequence by first sorting them\\nby ratio in descending order. Then the longest fitting pattern is determined by comparing ratio with the duration of the time window divided by the PRX gate duration. A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.DDMode next iqm.iqm_client.models.DynamicQuantumArchitecture By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_aphrodite","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_aphrodite.html","description":"Fake (i.e. simulated) backend for IQM’s 54-qubit Aphrodite architecture Functions IQMFakeAphrodite () Return IQMFakeBackend instance representing IQM's Aphrodite architecture. previous iqm.qiskit_iqm....","content":"Fake (i.e. simulated) backend for IQM’s 54-qubit Aphrodite architecture Functions IQMFakeAphrodite () Return IQMFakeBackend instance representing IQM's Aphrodite architecture. previous iqm.qiskit_iqm.fake_backends.fake_adonis.IQMFakeAdonis next iqm.qiskit_iqm.fake_backends.fake_aphrodite.IQMFakeAphrodite By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.RunResult","url":"/iqm-client/api/iqm.iqm_client.models.RunResult.html","description":"Bases: BaseModel Results of the quantum circuit execution job.\\nIf the job succeeded, measurements contains the output of the batch of circuits,\\nconsisting of the results of the measurement operations ...","content":"Bases: BaseModel Results of the quantum circuit execution job.\\nIf the job succeeded, measurements contains the output of the batch of circuits,\\nconsisting of the results of the measurement operations in each circuit.\\nIt is a list of dictionaries, where each dict maps each measurement key to a 2D array of measurement\\nresults, represented as a nested list. RunResult.measurements[circuit_index][key][shot][qubit_index] is the result of measuring the qubit_index ’th qubit in measurement operation key in the shot shot in the circuit_index ’th circuit of the batch. measurements is present iff the status is 'ready' . message carries additional information for the 'failed' status.\\nIf the status is 'pending compilation' or 'pending execution' , measurements and message are None . The results are non-negative integers representing the computational basis state (for qubits, 0 or 1)\\nthat was the measurement outcome. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. status current status of the job, in {'pending compilation', 'pending execution', 'ready', 'failed', 'aborted'} measurements if the job has finished successfully, the measurement results for the circuit(s) message if the job failed, an error message metadata metadata about the job warnings list of warning messages Methods from_dict (inp) Parses the result from a dict. status ( Status ) – measurements ( list [ dict [ str , list [ list [ int ] ] ] ] | None ) – message ( str | None ) – metadata ( Metadata ) – warnings ( list [ str ] | None ) – A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. current status of the job, in {'pending compilation', 'pending execution', 'ready', 'failed', 'aborted'} if the job has finished successfully, the measurement results for the circuit(s) if the job failed, an error message metadata about the job list of warning messages Parses the result from a dict. inp ( dict [ str , str | dict | list | None ] ) – value to parse, has to map to RunResult parsed job result RunResult previous iqm.iqm_client.models.RunRequest next iqm.iqm_client.models.RunStatus By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.serialize_qubit_mapping","url":"/iqm-client/api/iqm.iqm_client.models.serialize_qubit_mapping.html","description":"Serializes a qubit mapping dict into the corresponding IQM data transfer format. qubit_mapping ( dict [ str , str ] ) – mapping from logical to physical qubit names data transfer object representing t...","content":"Serializes a qubit mapping dict into the corresponding IQM data transfer format. qubit_mapping ( dict [ str , str ] ) – mapping from logical to physical qubit names data transfer object representing the mapping list [ SingleQubitMapping ] previous iqm.iqm_client.models.CircuitMeasurementResultsBatch next iqm.iqm_client.models.validate_circuit By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.examples.bell_measure.bell_measure","url":"/iqm-client/api/iqm.qiskit_iqm.examples.bell_measure.bell_measure.html","description":"Run a circuit that prepares and measures a Bell state. server_url ( str ) – URL of the IQM server used for execution a mapping of bitstrings representing qubit measurement results to counts for each r...","content":"Run a circuit that prepares and measures a Bell state. server_url ( str ) – URL of the IQM server used for execution a mapping of bitstrings representing qubit measurement results to counts for each result dict [ str , int ] previous iqm.qiskit_iqm.examples.bell_measure next iqm.qiskit_iqm.examples.resonance_example By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.util","url":"/iqm-client/api/iqm.iqm_client.util.html","description":"Helpful utilities that can be used together with IQMClient. Functions to_json_dict (obj) Convert a dict to JSON serializable dict Classes IQMJSONEncoder (*[, skipkeys, ensure_ascii, ...]) JSONEncoder ...","content":"Helpful utilities that can be used together with IQMClient. Functions to_json_dict (obj) Convert a dict to JSON serializable dict Classes IQMJSONEncoder (*[, skipkeys, ensure_ascii, ...]) JSONEncoder that that adds support for some non-JSON datatypes Inheritance previous iqm.iqm_client.transpile.ExistingMoveHandlingOptions next iqm.iqm_client.util.to_json_dict By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.qiskit_to_iqm.MeasurementKey","url":"/iqm-client/api/iqm.qiskit_iqm.qiskit_to_iqm.MeasurementKey.html","description":"Bases: object Unique key associated with a measurement instruction. Qiskit stores the results of quantum measurements in classical registers consisting of bits.\\nThe circuit execution results are prese...","content":"Bases: object Unique key associated with a measurement instruction. Qiskit stores the results of quantum measurements in classical registers consisting of bits.\\nThe circuit execution results are presented as bitstrings of a certain structure so that the classical\\nregister and the index within that register for each bit is implied from its position in the bitstring. For example, if you have two classical registers in the circuit with lengths 3 and 2, then the\\nmeasurement results will look like ‘01 101’ if the classical register of length 3 was added to\\nthe circuit first, and ‘101 01’ otherwise. If a bit in a classical register is not used in any\\nmeasurement operation it will still show up in the results with the default value of ‘0’. To be able to handle measurement results in a Qiskit-friendly way, we need to keep around some\\ninformation about how the circuit was constructed. This can, for example, be achieved by keeping\\naround the original Qiskit quantum circuit and using it when constructing the results in IQMJob . This should be done so that the circuit is saved on the server side and not in IQMJob , since otherwise users will not be able to retrieve results from a detached Python\\nenvironment solely based on the job id. Another option is to use measurement key strings to\\nstore the required info. Qiskit does not use measurement keys, so we are free to use them\\ninternally in the communication with the IQM server, and can encode the necessary information in\\nthem. This class encapsulates the necessary info, and provides methods to transform between this\\nrepresentation and the measurement key string representation. creg_name ( str ) – name of the classical register creg_len ( int ) – number of bits in the classical register creg_idx ( int ) – Index of the classical register in the circuit. Determines the order in which this register was added\\nto the circuit relative to the others. clbit_idx ( int ) – index of the classical bit within the classical register Attributes creg_name  creg_len  creg_idx  clbit_idx  Methods __delattr__ (name) Implement delattr(self, name). __eq__ (other) Return self==value. __hash__ () Return hash(self). __repr__ () Return repr(self). __setattr__ (name, value) Implement setattr(self, name, value). __str__ () Return str(self). from_clbit (clbit, circuit) Create a MeasurementKey for a classical bit in a quantum circuit. from_string (string) Create a MeasurementKey from its string representation. Create a MeasurementKey from its string representation. string ( str ) – MeasurementKey Create a MeasurementKey for a classical bit in a quantum circuit. clbit ( Clbit ) – circuit ( QuantumCircuit ) – MeasurementKey previous iqm.qiskit_iqm.qiskit_to_iqm.serialize_instructions next iqm.qiskit_iqm.qiskit_to_iqm.InstructionNotSupportedError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_adonis.IQMFakeAdonis","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_adonis.IQMFakeAdonis.html","description":"Return IQMFakeBackend instance representing IQM’s Adonis architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_adonis next iqm.qiskit_iqm.fake_backends.fake_aphrodite By IQM client d...","content":"Return IQMFakeBackend instance representing IQM’s Adonis architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_adonis next iqm.qiskit_iqm.fake_backends.fake_aphrodite By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.QuantumArchitectureSpecification","url":"/iqm-client/api/iqm.iqm_client.models.QuantumArchitectureSpecification.html","description":"Bases: BaseModel Quantum architecture specification. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration...","content":"Bases: BaseModel Quantum architecture specification. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. name Name of the quantum architecture. operations Operations supported by this quantum architecture, mapped to the allowed loci. qubits List of qubits of this quantum architecture. qubit_connectivity Qubit connectivity of this quantum architecture. Methods compare_operations (ops1, ops2) Compares the given operation sets. has_equivalent_operations (other) Compares the given operation sets defined by the quantum architecture against another architecture specification. name ( str ) – operations ( dict [ str , list [ list [ str ] ] ] ) – qubits ( list [ str ] ) – qubit_connectivity ( list [ list [ str ] ] ) – Name of the quantum architecture. List of qubits of this quantum architecture. Qubit connectivity of this quantum architecture. Operations supported by this quantum architecture, mapped to the allowed loci. Compares the given operation sets defined by the quantum architecture against\\nanother architecture specification. True if the operation and the loci are equivalent. other ( QuantumArchitectureSpecification ) – bool Compares the given operation sets. True if the operation and the loci are equivalent. ops1 ( dict [ str , list [ list [ str ] ] ] ) – ops2 ( dict [ str , list [ list [ str ] ] ] ) – bool A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.QuantumArchitecture next iqm.iqm_client.models.RunCounts By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.qiskit_to_iqm.deserialize_instructions","url":"/iqm-client/api/iqm.qiskit_iqm.qiskit_to_iqm.deserialize_instructions.html","description":"Helper function to turn a list of IQM Instructions into a Qiskit QuantumCircuit. instructions ( list [ Instruction ] ) – The gates in the circuit. qubit_name_to_index ( dict [ str , int ] ) – Mapping ...","content":"Helper function to turn a list of IQM Instructions into a Qiskit QuantumCircuit. instructions ( list [ Instruction ] ) – The gates in the circuit. qubit_name_to_index ( dict [ str , int ] ) – Mapping from qubit names to their indices, as specified in a backend. layout ( Layout ) – Qiskit representation of a layout. ValueError – Thrown when a given instruction is not supported. Qiskit circuit represented by the given instructions. QuantumCircuit previous iqm.qiskit_iqm.qiskit_to_iqm next iqm.qiskit_iqm.qiskit_to_iqm.serialize_instructions By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingPlugin.html","description":"Bases: IQMSchedulingPlugin Plugin class for IQM single qubit gate optimization and MoveGate routing as a scheduling stage. Methods optimize_sqg ( bool ) – drop_final_rz ( bool ) – ignore_barriers ( bo...","content":"Bases: IQMSchedulingPlugin Plugin class for IQM single qubit gate optimization and MoveGate routing as a scheduling stage. Methods optimize_sqg ( bool ) – drop_final_rz ( bool ) – ignore_barriers ( bool ) – existing_move_handling ( ExistingMoveHandlingOptions | None ) – previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyTrustExistingMovesPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingRemoveExistingMovesPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors.CircuitTranspilationError","url":"/iqm-client/api/iqm.iqm_client.errors.CircuitTranspilationError.html","description":"Circuit transpilation failed. previous iqm.iqm_client.errors.CircuitExecutionError next iqm.iqm_client.errors.CircuitValidationError By IQM client developers © Copyright 2021-2025, IQM. Last updated o...","content":"Circuit transpilation failed. previous iqm.iqm_client.errors.CircuitExecutionError next iqm.iqm_client.errors.CircuitValidationError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.examples.transpile_example.transpile_example","url":"/iqm-client/api/iqm.qiskit_iqm.examples.transpile_example.transpile_example.html","description":"Run a GHZ circuit transpiled using the Qiskit transpile function. server_url ( str ) – URL of the IQM server used for execution transpiled circuit, a mapping of bitstrings representing qubit measureme...","content":"Run a GHZ circuit transpiled using the Qiskit transpile function. server_url ( str ) – URL of the IQM server used for execution transpiled circuit, a mapping of bitstrings representing qubit measurement results to counts for each result tuple [ QuantumCircuit , dict [ str , int ]] previous iqm.qiskit_iqm.examples.transpile_example next iqm.qiskit_iqm.fake_backends By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.Locus","url":"/iqm-client/api/iqm.iqm_client.models.Locus.html","description":"Names of the QPU components (typically qubits) a quantum operation instance is acting on, e.g. (“QB1”, “QB2”) . alias of tuple [ Annotated [ str ], …] previous iqm.iqm_client.models next iqm.iqm_clien...","content":"Names of the QPU components (typically qubits) a quantum operation instance is acting on, e.g. (“QB1”, “QB2”) . alias of tuple [ Annotated [ str ], …] previous iqm.iqm_client.models next iqm.iqm_client.models.CircuitBatch By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.CircuitBatch","url":"/iqm-client/api/iqm.iqm_client.models.CircuitBatch.html","description":"Type that represents a list of quantum circuits to be executed together in a single batch. alias of list [ Circuit ] previous iqm.iqm_client.models.Locus next iqm.iqm_client.models.QubitMapping By IQM...","content":"Type that represents a list of quantum circuits to be executed together in a single batch. alias of list [ Circuit ] previous iqm.iqm_client.models.Locus next iqm.iqm_client.models.QubitMapping By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors.CircuitValidationError","url":"/iqm-client/api/iqm.iqm_client.errors.CircuitValidationError.html","description":"Circuit validation failed. previous iqm.iqm_client.errors.CircuitTranspilationError next iqm.iqm_client.errors.ClientAuthenticationError By IQM client developers © Copyright 2021-2025, IQM. Last updat...","content":"Circuit validation failed. previous iqm.iqm_client.errors.CircuitTranspilationError next iqm.iqm_client.errors.ClientAuthenticationError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_provider","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_provider.html","description":"Qiskit backend provider for IQM backends. Classes IQMBackend (client, *[, calibration_set_id]) Backend for executing quantum circuits on IQM quantum computers. IQMFacadeBackend (client, **kwargs) Faca...","content":"Qiskit backend provider for IQM backends. Classes IQMBackend (client, *[, calibration_set_id]) Backend for executing quantum circuits on IQM quantum computers. IQMFacadeBackend (client, **kwargs) Facade backend for mimicking the execution of quantum circuits on IQM quantum computers. Allows to submit a IQMProvider (url, **user_auth_args) Provider for IQM backends. Inheritance previous iqm.qiskit_iqm.iqm_naive_move_pass.IQMNaiveResonatorMoving next iqm.qiskit_iqm.iqm_provider.IQMBackend By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.CircuitCompilationOptions","url":"/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html","description":"Bases: object Various discrete options for quantum circuit compilation to pulse schedule. Attributes active_reset_cycles Number of active reset operations inserted at the beginning of each circuit for...","content":"Bases: object Various discrete options for quantum circuit compilation to pulse schedule. Attributes active_reset_cycles Number of active reset operations inserted at the beginning of each circuit for each active qubit. dd_mode Control whether dynamical decoupling should be enabled or disabled during the execution. dd_strategy A particular dynamical decoupling strategy to be used during the execution. heralding_mode Heralding mode to use during the execution. max_circuit_duration_over_t2 Server-side circuit disqualification threshold. move_gate_frame_tracking MOVE gate frame tracking mode for circuit compilation. move_gate_validation MOVE gate validation mode for circuit compilation. Methods __delattr__ (name) Implement delattr(self, name). __eq__ (other) Return self==value. __hash__ () Return hash(self). __post_init__ () Validate the options. __repr__ () Return repr(self). __setattr__ (name, value) Implement setattr(self, name, value). max_circuit_duration_over_t2 ( float | None ) – heralding_mode ( HeraldingMode ) – move_gate_validation ( MoveGateValidationMode ) – move_gate_frame_tracking ( MoveGateFrameTrackingMode ) – active_reset_cycles ( int | None ) – dd_mode ( DDMode ) – dd_strategy ( DDStrategy | None ) – Server-side circuit disqualification threshold.\\nThe job is rejected on the server if any circuit in it is estimated to take longer than\\nthe shortest T2 time of any qubit used in the circuit, multiplied by this value.\\nSetting this value to 0.0 turns off circuit duration checking. None tells the server to use its default value in the check. Heralding mode to use during the execution. MOVE gate validation mode for circuit compilation. This options is ignored on devices that do not support MOVE\\nand for circuits that do not contain MOVE gates. MOVE gate frame tracking mode for circuit compilation. This options is ignored on devices that do not support\\nMOVE and for circuits that do not contain MOVE gates. Number of active reset operations inserted at the beginning of each circuit for each active qubit. None means active reset is not used but instead reset is done by waiting (relaxation). Integer values smaller\\nthan 1 result in neither active nor reset by wait being used, in which case any reset operations must be explicitly\\nadded in the circuit. Control whether dynamical decoupling should be enabled or disabled during the execution. A particular dynamical decoupling strategy to be used during the execution. previous iqm.iqm_client.models.Circuit next iqm.iqm_client.models.ClientLibrary By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_apollo","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_apollo.html","description":"Fake (i.e. simulated) backend for IQM’s 20-qubit Apollo architecture Functions IQMFakeApollo () Return IQMFakeBackend instance representing IQM's Apollo architecture. previous iqm.qiskit_iqm.fake_back...","content":"Fake (i.e. simulated) backend for IQM’s 20-qubit Apollo architecture Functions IQMFakeApollo () Return IQMFakeBackend instance representing IQM's Apollo architecture. previous iqm.qiskit_iqm.fake_backends.fake_aphrodite.IQMFakeAphrodite next iqm.qiskit_iqm.fake_backends.fake_apollo.IQMFakeApollo By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_naive_move_pass.IQMNaiveResonatorMoving","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_naive_move_pass.IQMNaiveResonatorMoving.html","description":"Bases: TransformationPass Naive transpilation pass for resonator moving. The logic of this pass is deferred to iqm-client.transpile_insert_moves .\\nThis pass is a wrapper that converts the circuit into...","content":"Bases: TransformationPass Naive transpilation pass for resonator moving. The logic of this pass is deferred to iqm-client.transpile_insert_moves .\\nThis pass is a wrapper that converts the circuit into the IQMClient Circuit format,\\nruns the transpile_insert_moves function, and then converts the result back to a Qiskit circuit. target – Transpilation target. existing_moves_handling – How to handle existing MOVE gates in the circuit. Attributes Methods run (dag) Run the pass on a circuit. Run the pass on a circuit. dag ( DAGCircuit ) – DAG to map. Mapped dag . TranspilerError – The layout is not compatible with the DAG, or if the input gate set is incorrect. DAGCircuit previous iqm.qiskit_iqm.iqm_naive_move_pass.transpile_to_IQM next iqm.qiskit_iqm.iqm_provider By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.iqm_client.IQMClient","url":"/iqm-client/api/iqm.iqm_client.iqm_client.IQMClient.html","description":"Bases: object Provides access to IQM quantum computers. url ( str ) – Endpoint for accessing the server. Has to start with http or https. client_signature ( str | None ) – String that IQMClient adds t...","content":"Bases: object Provides access to IQM quantum computers. url ( str ) – Endpoint for accessing the server. Has to start with http or https. client_signature ( str | None ) – String that IQMClient adds to User-Agent header of requests\\nit sends to the server. The signature is appended to IQMClient’s own version\\ninformation and is intended to carry additional version information,\\nfor example the version information of the caller. token ( str | None ) – Long-lived authentication token in plain text format. Used by IQM Resonance.\\nIf token is given no other user authentication parameters should be given. tokens_file ( str | None ) – Path to a tokens file used for authentication.\\nIf tokens_file is given no other user authentication parameters should be given. auth_server_url ( str | None ) – Base URL of the authentication server.\\nIf auth_server_url is given also username and password must be given. username ( str | None ) – Username to log in to authentication server. password ( str | None ) – Password to log in to authentication server. api_variant ( APIVariant | None ) – API variant to use. Default is APIVariant.V1 .\\nConfigurable also by environment variable IQM_CLIENT_API_VARIANT . Alternatively, the user authentication related keyword arguments can also be given in\\nenvironment variables IQM_TOKEN , IQM_TOKENS_FILE , IQM_AUTH_SERVER , IQM_AUTH_USERNAME and IQM_AUTH_PASSWORD . All parameters must be given either\\nas keyword arguments or as environment variables. Same combination restrictions apply\\nfor values given as environment variables as for keyword arguments. Methods __del__ ()  _check_authentication_errors (result) Raise ClientAuthenticationError with appropriate message if the authentication failed for some reason. _check_not_found_error (response) Raise HTTPError with appropriate message if response.status_code == 404 . _check_versions () Check the client version against compatible client versions reported by server. _default_headers () Default headers for HTTP requests to the IQM server. _deserialize_response (response, model_class) Deserialize a HTTP endpoint response. _get_request (api_endpoint[, endpoint_args, ...]) Make a HTTP GET request to an IQM server endpoint. _get_run_v1 (job_id[, timeout_secs]) V1 API (Cocos circuit execution and Resonance) has an inefficient GET /jobs/<id> endpoint that returns the full job status, including the result and the original request, in a single call. _get_run_v2 (job_id[, timeout_secs]) V2 API (Station-based circuit execution) has granular endpoints for job status and result. _retry_request_on_error (request) Temporary workaround for 502 errors. _validate_circuit_instructions (architecture, ...) Validate the given circuits against the given quantum architecture. _validate_circuit_moves (architecture, circuit) Raise an error if the MOVE gates in the circuit are not valid in the given architecture. _validate_instruction (architecture, instruction) Validate an instruction against the dynamic quantum quantum architecture. _validate_qubit_mapping (architecture, circuits) Validate the given qubit mapping. abort_job (job_id, *[, timeout_secs]) Abort a job that was submitted for execution. close_auth_session () Terminate session with authentication server if there is one. create_run_request (circuits, *[, ...]) Create a run request for executing circuits without sending it to the server. get_calibration_set ([calibration_set_id, ...]) Retrieve the given calibration set from the server. get_dynamic_quantum_architecture ([...]) Retrieve the dynamic quantum architecture (DQA) for the given calibration set from the server. get_feedback_groups (*[, timeout_secs]) Retrieve groups of qubits that can receive real-time feedback signals from each other. get_quality_metric_set ([calibration_set_id, ...]) Retrieve the latest quality metric set for the given calibration set from the server. get_quantum_architecture (*[, timeout_secs]) Retrieve quantum architecture from server. get_run (job_id, *[, timeout_secs]) Query the status and results of a submitted job. get_run_counts (job_id, *[, timeout_secs]) Query the counts of an executed job. get_run_status (job_id, *[, timeout_secs]) Query the status of a submitted job. get_supported_client_libraries ([timeout_secs]) Retrieve information about supported client libraries from the server. submit_circuits (circuits, *[, ...]) Submit a batch of quantum circuits for execution on a quantum computer. submit_run_request (run_request) Submit a run request for execution on a quantum computer. wait_for_compilation (job_id[, timeout_secs]) Poll results until a job is either compiled, pending execution, ready, failed, aborted, or timed out. wait_for_results (job_id[, timeout_secs]) Poll results until a job is either ready, failed, aborted, or timed out. Submit a batch of quantum circuits for execution on a quantum computer. circuits ( list [ Circuit ] ) – Circuits to be executed. qubit_mapping ( dict [ str , str ] | None ) – Mapping of logical qubit names to physical qubit names.\\nCan be set to None if all circuits already use physical qubit names.\\nNote that the qubit_mapping is used for all circuits . custom_settings ( dict [ str , Any ] | None ) – Custom settings to override default settings and calibration data.\\nNote: This field should always be None in normal use. calibration_set_id ( UUID | None ) – ID of the calibration set to use, or None to use the current default calibration. shots ( int ) – Number of times circuits are executed. Must be greater than zero. options ( CircuitCompilationOptions | None ) – Various discrete options for compiling quantum circuits to instruction schedules. ID for the created job. This ID is needed to query the job status and the execution results. UUID Create a run request for executing circuits without sending it to the server. This is called in submit_circuits() and does not need to be called separately in normal usage. Can be used to inspect the run request that would be submitted by submit_circuits() , without actually\\nsubmitting it for execution. circuits ( list [ Circuit ] ) – Circuits to be executed. qubit_mapping ( dict [ str , str ] | None ) – Mapping of logical qubit names to physical qubit names.\\nCan be set to None if all circuits already use physical qubit names.\\nNote that the qubit_mapping is used for all circuits . custom_settings ( dict [ str , Any ] | None ) – Custom settings to override default settings and calibration data.\\nNote: This field should always be None in normal use. calibration_set_id ( UUID | None ) – ID of the calibration set to use, or None to use the current default calibration. shots ( int ) – Number of times circuits are executed. Must be greater than zero. options ( CircuitCompilationOptions | None ) – Various discrete options for compiling quantum circuits to instruction schedules. RunRequest that would be submitted by equivalent call to submit_circuits() . RunRequest Submit a run request for execution on a quantum computer. This is called in submit_circuits() and does not need to be called separately in normal usage. run_request ( RunRequest ) – Run request to be submitted for execution. ID for the created job. This ID is needed to query the job status and the execution results. UUID Query the status and results of a submitted job. job_id ( UUID ) – ID of the job to query. timeout_secs ( float ) – Network request timeout (seconds). Result of the job (can be pending). CircuitExecutionError – IQM server specific exceptions HTTPException – HTTP exceptions RunResult Query the status of a submitted job. job_id ( UUID ) – ID of the job to query. timeout_secs ( float ) – Network request timeout (seconds). Job status. CircuitExecutionError – IQM server specific exceptions HTTPException – HTTP exceptions RunStatus Poll results until a job is either compiled, pending execution, ready, failed, aborted, or timed out. job_id ( UUID ) – ID of the job to wait for. timeout_secs ( float ) – How long to wait for a response before raising an APITimeoutError (seconds). Job result. APITimeoutError – time exceeded the set timeout RunResult Poll results until a job is either ready, failed, aborted, or timed out. Note that jobs handling on the server side is async and if we try to request the results\\nright after submitting the job (which is usually the case)\\nwe will find the job is still pending at least for the first query. job_id ( UUID ) – ID of the job to wait for. timeout_secs ( float ) – How long to wait for a response before raising an APITimeoutError (seconds). Job result. APITimeoutError – time exceeded the set timeout RunResult Abort a job that was submitted for execution. job_id ( UUID ) – ID of the job to be aborted. timeout_secs ( float ) – Network request timeout (seconds). JobAbortionError – aborting the job failed None Retrieve quantum architecture from server. Caches the result and returns it on later invocations. timeout_secs ( float ) – Network request timeout (seconds). Quantum architecture of the server. EndpointRequestError – did not understand the endpoint response ClientAuthenticationError – no valid authentication provided HTTPException – HTTP exceptions QuantumArchitectureSpecification Retrieve the latest quality metric set for the given calibration set from the server. calibration_set_id ( UUID | None ) – ID of the calibration set for which the quality metrics are returned.\\nIf None , the current default calibration set is used. timeout_secs ( float ) – Network request timeout (seconds). Requested quality metric set. EndpointRequestError – did not understand the endpoint response ClientAuthenticationError – no valid authentication provided HTTPException – HTTP exceptions QualityMetricSet Retrieve the given calibration set from the server. calibration_set_id ( UUID | None ) – ID of the calibration set to retrieve.\\nIf None , the current default calibration set is retrieved. timeout_secs ( float ) – Network request timeout (seconds). Requested calibration set. EndpointRequestError – did not understand the endpoint response ClientAuthenticationError – no valid authentication provided HTTPException – HTTP exceptions CalibrationSet Retrieve the dynamic quantum architecture (DQA) for the given calibration set from the server. Caches the result and returns the same result on later invocations, unless calibration_set_id is None .\\nIf calibration_set_id is None , always retrieves the result from the server because the default\\ncalibration set may have changed. calibration_set_id ( UUID | None ) – ID of the calibration set for which the DQA is retrieved.\\nIf None , use current default calibration set on the server. timeout_secs ( float ) – Network request timeout (seconds). Dynamic quantum architecture corresponding to the given calibration set. EndpointRequestError – did not understand the endpoint response ClientAuthenticationError – no valid authentication provided HTTPException – HTTP exceptions DynamicQuantumArchitecture Retrieve groups of qubits that can receive real-time feedback signals from each other. Real-time feedback enables conditional gates such as cc_prx .\\nSome hardware configurations support routing real-time feedback only between certain qubits. This method is only supported for the API variant V2. timeout_secs ( float ) – Network request timeout (seconds). Feedback groups. Within a group, any qubit can receive real-time feedback from any other qubit in the same group. A qubit can belong to multiple groups.\\nIf there is only one group, there are no restrictions regarding feedback routing. the same group. A qubit can belong to multiple groups.\\nIf there is only one group, there are no restrictions regarding feedback routing. EndpointRequestError – did not understand the endpoint response ClientAuthenticationError – no valid authentication provided HTTPException – HTTP exceptions tuple [ frozenset [ str ], …] Terminate session with authentication server if there is one. True iff session was successfully closed. ClientAuthenticationError – logout failed ClientAuthenticationError – asked to close externally managed authentication session bool Query the counts of an executed job. job_id ( UUID ) – ID of the job to query. timeout_secs ( float ) – Network request timeout (seconds). Measurement results of the job in histogram representation. EndpointRequestError – did not understand the endpoint response ClientAuthenticationError – no valid authentication provided HTTPException – HTTP exceptions RunCounts Retrieve information about supported client libraries from the server. timeout_secs ( float ) – Network request timeout (seconds). Mapping from library identifiers to their metadata. EndpointRequestError – did not understand the endpoint response ClientAuthenticationError – no valid authentication provided HTTPException – HTTP exceptions dict [ str , ClientLibrary ] previous iqm.iqm_client.iqm_client next iqm.iqm_client.models By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.transpile.ExistingMoveHandlingOptions","url":"/iqm-client/api/iqm.iqm_client.transpile.ExistingMoveHandlingOptions.html","description":"Bases: str , Enum Options for how transpile_insert_moves() should handle existing MOVE instructions\\nin the circuit. Attributes KEEP Strict mode. TRUST Lenient mode. REMOVE Removes existing MOVE instru...","content":"Bases: str , Enum Options for how transpile_insert_moves() should handle existing MOVE instructions\\nin the circuit. Attributes KEEP Strict mode. TRUST Lenient mode. REMOVE Removes existing MOVE instructions from the circuit using transpile_remove_moves() , and then does the same as TRUST. Methods _generate_next_value_ (start, count, last_values) Generate the next value when not given. _new_member_ (**kwargs) Create and return a new object. _value_repr_ () Return repr(self). __format__ (format_spec) Return a formatted version of the string as described by format_spec. __new__ (value)  __repr__ () Return repr(self). __str__ () Return str(self). Strict mode. The circuit, including existing MOVE instructions in it, is validated first.\\nThen, any fictional two-qubit gates in the circuit are implemented with qubit-resonator gates. Lenient mode. Same as KEEP, but does not validate the circuit first.\\nWill attempt to fix any apparent user errors in the circuit by adding extra MOVE gates. Removes existing MOVE instructions from the circuit using transpile_remove_moves() , and\\nthen does the same as TRUST. This may produce a more optimized end result. previous iqm.iqm_client.transpile.transpile_remove_moves next iqm.iqm_client.util By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationIgnoreBarriersPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationIgnoreBarriersPlugin.html","description":"Bases: OnlyRZOptimizationPlugin Plugin class for single qubit gate optimization without MOVE gate routing where barriers are ignored. Methods previous iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizat...","content":"Bases: OnlyRZOptimizationPlugin Plugin class for single qubit gate optimization without MOVE gate routing where barriers are ignored. Methods previous iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationExactPlugin next iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_transpilation.optimize_single_qubit_gates","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_transpilation.optimize_single_qubit_gates.html","description":"Optimize number of single-qubit gates in a transpiled circuit exploiting the IQM specific gate set. circuit ( QuantumCircuit ) – quantum circuit to optimize drop_final_rz ( bool ) – Drop terminal RZ g...","content":"Optimize number of single-qubit gates in a transpiled circuit exploiting the IQM specific gate set. circuit ( QuantumCircuit ) – quantum circuit to optimize drop_final_rz ( bool ) – Drop terminal RZ gates even if there are no measurements following them (since they do not affect\\nthe measurement results). Note that this will change the unitary propagator of the circuit.\\nIt is recommended always to set this to true as the final RZ gates do no change the measurement outcomes of\\nthe circuit. ignore_barriers ( bool ) – Removes barriers from the circuit if they exist (default = False) before optimization. optimized circuit QuantumCircuit previous iqm.qiskit_iqm.iqm_transpilation next iqm.qiskit_iqm.iqm_transpilation.IQMOptimizeSingleQubitGates By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_provider.IQMBackend","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_provider.IQMBackend.html","description":"Bases: IQMBackendBase Backend for executing quantum circuits on IQM quantum computers. client ( IQMClient ) – client instance for communicating with an IQM server calibration_set_id ( Union [ str , UU...","content":"Bases: IQMBackendBase Backend for executing quantum circuits on IQM quantum computers. client ( IQMClient ) – client instance for communicating with an IQM server calibration_set_id ( Union [ str , UUID , None ] ) – ID of the calibration set the backend will use. None means the IQM server will be queried for the current default\\ncalibration set. kwargs – optional arguments to be passed to the parent Backend initializer Attributes max_circuits Maximum number of circuits that should be run in a single batch. architecture Dynamic quantum architecture of the backend instance. name Name of the backend. description Optional human-readable description. online_date Date that the backend came online. backend_version Version of the backend being provided. Methods _default_options () Qiskit method for defining the default options for running the backend. close_client () Close IQMClient's session with the authentication server. create_run_request (run_input[, shots, ...]) Creates a run request without submitting it for execution. retrieve_job (job_id) Create and return an IQMJob instance associated with this backend with given job id. run (run_input, *[, timeout_seconds]) Run a quantum circuit or a list of quantum circuits on the IQM quantum computer represented by this backend. serialize_circuit (circuit[, qubit_mapping]) Serialize a quantum circuit into the IQM data transfer format. Maximum number of circuits that should be run in a single batch. Currently there is no hard limit on the number of circuits that can be executed in a single batch/job.\\nHowever, some libraries like Qiskit Experiments use this property to split multi-circuit computational\\ntasks into multiple baches/jobs. The default value is None , meaning there is no limit. You can set it to a specific integer\\nvalue to force these libraries to run at most that many circuits in a single batch. Run a quantum circuit or a list of quantum circuits on the IQM quantum computer represented by this backend. run_input ( QuantumCircuit | list [ QuantumCircuit ] ) – The circuits to run. timeout_seconds ( float | None ) – Maximum time to wait for the job to finish, in seconds. If None , use\\nthe IQMClient default. options – Keyword arguments passed on to create_run_request() , and documented there. Job object from which the results can be obtained once the execution has finished. IQMJob Creates a run request without submitting it for execution. This can be used to check what would be submitted for execution by an equivalent call to run() . run_input ( QuantumCircuit | list [ QuantumCircuit ] ) – Same as in run() . shots ( int ) – Number of repetitions of each circuit, for sampling. circuit_compilation_options ( CircuitCompilationOptions | None ) – Compilation options for the circuits, passed on to IQMClient .\\nIf None , the defaults of the CircuitCompilationOptions class are used. circuit_callback ( Callable [ [ list [ QuantumCircuit ] ] , Any ] | None ) – Callback function that, if provided, will be called for the circuits before sending\\nthem to the device.  This may be useful in situations when you do not have explicit\\ncontrol over transpilation, but need some information on how it was done. This can\\nhappen, for example, when you use pre-implemented algorithms and experiments in\\nQiskit, where the implementation of the said algorithm or experiment takes care of\\ndelivering correctly transpiled circuits to the backend. This callback method gives\\nyou a chance to look into those transpiled circuits, and extract any info you need.\\nAs a side effect, you can also use this callback to modify the transpiled circuits\\nin-place, just before execution; however, we do not recommend to use it for this\\npurpose. qubit_mapping ( dict [ int , str ] | None ) – Mapping from qubit indices in the circuit to qubit names on the device. If None , IQMBackendBase.index_to_qubit_name will be used. The created run request object RunRequest Create and return an IQMJob instance associated with this backend with given job id. job_id ( str ) – ID of the job to retrieve. corresponding job IQMJob Close IQMClient’s session with the authentication server. None Serialize a quantum circuit into the IQM data transfer format. Serializing is not strictly bound to the native gateset, i.e. some gates that are not explicitly mentioned in\\nthe native gateset of the backend can still be serialized. For example, the native single qubit gate for IQM\\nbackend is the ‘r’ gate, however ‘x’, ‘rx’, ‘y’ and ‘ry’ gates can also be serialized since they are just\\nparticular cases of the ‘r’ gate. If the circuit was transpiled against a backend using Qiskit’s transpiler\\nmachinery, these gates are not supposed to be present. However, when constructing circuits manually and\\nsubmitting directly to the backend, it is sometimes more explicit and understandable to use these concrete\\ngates rather than ‘r’. Serializing them explicitly makes it possible for the backend to accept such circuits. Qiskit uses one measurement instruction per qubit (i.e. there is no measurement grouping concept). While\\nserializing we do not group any measurements together but rather associate a unique measurement key with each\\nmeasurement instruction, so that the results can later be reconstructed correctly (see MeasurementKey documentation for more details). circuit ( QuantumCircuit ) – quantum circuit to serialize qubit_mapping ( dict [ int , str ] | None ) – Mapping from qubit indices in the circuit to qubit names on the device. If not provided, IQMBackendBase.index_to_qubit_name will be used. data transfer object representing the circuit ValueError – circuit contains an unsupported instruction or is not transpiled in general Circuit previous iqm.qiskit_iqm.iqm_provider next iqm.qiskit_iqm.iqm_provider.IQMFacadeBackend By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.IQMSchedulingPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.IQMSchedulingPlugin.html","description":"Bases: PassManagerStagePlugin Basic plugin for scheduling stage of IQM devices. move_gate_routing ( bool ) – whether to include MoveGate routing in the scheduling stage. optimize_sqg ( bool ) – Whethe...","content":"Bases: PassManagerStagePlugin Basic plugin for scheduling stage of IQM devices. move_gate_routing ( bool ) – whether to include MoveGate routing in the scheduling stage. optimize_sqg ( bool ) – Whether to include single qubit gate optimization in the scheduling stage. drop_final_rz ( bool ) – Whether to drop trailing RZ gates in the circuit during single qubit gate optimization. ignore_barriers ( bool ) – Whether to ignore barriers during single qubit gate optimization. existing_move_handling ( ExistingMoveHandlingOptions | None ) – How to handle existing MoveGates in the circuit during MoveGate routing. ValueError – When incompatible options are set. Methods pass_manager (pass_manager_config[, ...]) Build scheduling stage PassManager Build scheduling stage PassManager pass_manager_config ( PassManagerConfig ) – optimization_level ( int | None ) – PassManager previous iqm.qiskit_iqm.transpiler_plugins.IQMDefaultSchedulingPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingKeepExistingMovesPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.RunStatus","url":"/iqm-client/api/iqm.iqm_client.models.RunStatus.html","description":"Bases: BaseModel Status of a circuit execution job. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration ...","content":"Bases: BaseModel Status of a circuit execution job. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. status current status of the job, in {'pending compilation', 'pending execution', 'ready', 'failed', 'aborted'} message if the job failed, an error message warnings list of warning messages Methods status ( Status ) – message ( str | None ) – warnings ( list [ str ] | None ) – A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. current status of the job, in {'pending compilation', 'pending execution', 'ready', 'failed', 'aborted'} if the job failed, an error message list of warning messages previous iqm.iqm_client.models.RunResult next iqm.iqm_client.models.SingleQubitMapping By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_deneb","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_deneb.html","description":"Fake backend for IQM’s 6-qubit Deneb architecture. Functions IQMFakeDeneb () Return IQMFakeBackend instance representing IQM's Deneb architecture. previous iqm.qiskit_iqm.fake_backends.fake_apollo.IQM...","content":"Fake backend for IQM’s 6-qubit Deneb architecture. Functions IQMFakeDeneb () Return IQMFakeBackend instance representing IQM's Deneb architecture. previous iqm.qiskit_iqm.fake_backends.fake_apollo.IQMFakeApollo next iqm.qiskit_iqm.fake_backends.fake_deneb.IQMFakeDeneb By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_job.IQMJob","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_job.IQMJob.html","description":"Bases: JobV1 Implementation of Qiskit’s job interface to handle circuit execution on an IQM server. backend ( IQMBackend ) – Backend instance initiating this job. job_id ( str ) – String representatio...","content":"Bases: JobV1 Implementation of Qiskit’s job interface to handle circuit execution on an IQM server. backend ( IQMBackend ) – Backend instance initiating this job. job_id ( str ) – String representation of the UUID generated by IQM server. timeout_seconds ( Optional [ float ] ) – Maximum time to wait for the job to finish. By default, we use the IQMClient default. kwargs – Arguments to be passed to the initializer of the parent class. Attributes Methods _format_iqm_results (iqm_result) Convert the measurement results for a batch of circuits into the Qiskit format. _format_measurement_results (...[, ...]) Convert the measurement results from a circuit into the Qiskit format. cancel () Attempt to cancel the job. error_message () Returns the error message if job has failed, otherwise returns None. queue_position ([refresh]) Return the position of the job in the server queue. result () Return the results of the job. status () Return the status of the job, among the values of JobStatus . submit () Submit the job to the backend for execution. Submit the job to the backend for execution. Attempt to cancel the job. True if the job was cancelled successfully, False otherwise bool Return the results of the job. Result Return the status of the job, among the values of JobStatus . JobStatus Return the position of the job in the server queue. Note The position is not yet implemented and this function will always\\nreturn None . The refresh argument is ignored. refresh ( bool ) – If True , re-query the server to get the latest value.\\nOtherwise return the cached value. Position in the queue or None if position is unknown or not applicable. int | None Returns the error message if job has failed, otherwise returns None. str | None previous iqm.qiskit_iqm.iqm_job next iqm.qiskit_iqm.iqm_move_layout By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.SingleQubitMapping","url":"/iqm-client/api/iqm.iqm_client.models.SingleQubitMapping.html","description":"Bases: BaseModel Mapping of a logical qubit name to a physical qubit name. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. mode...","content":"Bases: BaseModel Mapping of a logical qubit name to a physical qubit name. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. logical_name logical qubit name physical_name physical qubit name Methods logical_name ( str ) – physical_name ( str ) – logical qubit name physical qubit name A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.RunStatus next iqm.iqm_client.models.Status By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.qiskit_to_iqm.serialize_instructions","url":"/iqm-client/api/iqm.qiskit_iqm.qiskit_to_iqm.serialize_instructions.html","description":"Serialize a quantum circuit into the IQM data transfer format. This is IQM’s internal helper for IQMBackend.serialize_circuit() that gives slightly more control.\\nSee IQMBackend.serialize_circuit() for...","content":"Serialize a quantum circuit into the IQM data transfer format. This is IQM’s internal helper for IQMBackend.serialize_circuit() that gives slightly more control.\\nSee IQMBackend.serialize_circuit() for details. circuit ( QuantumCircuit ) – quantum circuit to serialize qubit_index_to_name ( dict [ int , str ] ) – Mapping from qubit indices to the corresponding qubit names. allowed_nonnative_gates ( Collection [ str ] ) – Names of gates that are converted as-is without validation.\\nBy default, any gate that can’t be converted will raise an error.\\nIf such gates are present in the circuit, the caller must edit the result to be valid and executable.\\nNotably, since IQM transfer format requires named parameters and qiskit parameters don’t have names, the i th parameter of an unrecognized instruction is given the name \\"p<i>\\" . list of instructions representing the circuit ValueError – circuit contains an unsupported instruction or is not transpiled in general list [ Instruction ] previous iqm.qiskit_iqm.qiskit_to_iqm.deserialize_instructions next iqm.qiskit_iqm.qiskit_to_iqm.MeasurementKey By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.Metadata","url":"/iqm-client/api/iqm.iqm_client.models.Metadata.html","description":"Bases: BaseModel Metadata describing a circuit execution job. Attributes circuits Return the circuits in the job. dd_mode Return the dynamical decoupling mode requested with the job. dd_strategy Retur...","content":"Bases: BaseModel Metadata describing a circuit execution job. Attributes circuits Return the circuits in the job. dd_mode Return the dynamical decoupling mode requested with the job. dd_strategy Return the dynamical decoupling strategy used with the job. heralding_mode Return the heralding mode requested with the job. model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. shots Return the number of shots in the job. calibration_set_id ID of the calibration set used request optional copy of the original RunRequest sent to the server parameters job-specific parameters extracted from the original request circuits_batch circuits batch submitted for execution cocos_version CoCoS version used to execute the job timestamps Timestamps of execution progress Methods calibration_set_id ( UUID | None ) – request ( RunRequest | None ) – parameters ( JobParameters | None ) – circuits_batch ( list [ Circuit ] | None ) – cocos_version ( str | None ) – timestamps ( dict [ str , str ] | None ) – A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. ID of the calibration set used optional copy of the original RunRequest sent to the server job-specific parameters extracted from the original request circuits batch submitted for execution CoCoS version used to execute the job Timestamps of execution progress Return the number of shots in the job. Return the circuits in the job. Return the heralding mode requested with the job. Return the dynamical decoupling mode requested with the job. Return the dynamical decoupling strategy used with the job. previous iqm.iqm_client.models.JobParameters next iqm.iqm_client.models.MoveGateFrameTrackingMode By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_provider.IQMFacadeBackend","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_provider.IQMFacadeBackend.html","description":"Bases: IQMBackend circuit to the IQM server, and if the execution was successful, performs a simulation with a respective IQM noise\\nmodel locally, then returns the simulated results. client ( IQMClien...","content":"Bases: IQMBackend circuit to the IQM server, and if the execution was successful, performs a simulation with a respective IQM noise\\nmodel locally, then returns the simulated results. client ( IQMClient ) – client instance for communicating with an IQM server **kwargs – optional arguments to be passed to the parent Backend initializer Attributes architecture Dynamic quantum architecture of the backend instance. name Name of the backend. description Optional human-readable description. online_date Date that the backend came online. backend_version Version of the backend being provided. Methods _validate_no_empty_cregs (circuit) Returns True if given circuit has no empty (unused) classical registers, False otherwise. run (run_input, **options) Run a quantum circuit or a list of quantum circuits on the IQM quantum computer represented by this backend. Run a quantum circuit or a list of quantum circuits on the IQM quantum computer represented by this backend. run_input ( QuantumCircuit | list [ QuantumCircuit ] ) – The circuits to run. timeout_seconds – Maximum time to wait for the job to finish, in seconds. If None , use\\nthe IQMClient default. options – Keyword arguments passed on to create_run_request() , and documented there. Job object from which the results can be obtained once the execution has finished. JobV1 previous iqm.qiskit_iqm.iqm_provider.IQMBackend next iqm.qiskit_iqm.iqm_provider.IQMProvider By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_apollo.IQMFakeApollo","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_apollo.IQMFakeApollo.html","description":"Return IQMFakeBackend instance representing IQM’s Apollo architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_apollo next iqm.qiskit_iqm.fake_backends.fake_deneb By IQM client devel...","content":"Return IQMFakeBackend instance representing IQM’s Apollo architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_apollo next iqm.qiskit_iqm.fake_backends.fake_deneb By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.html","description":"Collection of Qiskit transpiler plugins for native use of specialized transpiler passes by our devices. Classes IQMDefaultSchedulingPlugin () Plugin class for IQM single qubit gate optimization and Mo...","content":"Collection of Qiskit transpiler plugins for native use of specialized transpiler passes by our devices. Classes IQMDefaultSchedulingPlugin () Plugin class for IQM single qubit gate optimization and MoveGate routing as a scheduling stage. IQMSchedulingPlugin (move_gate_routing, ...) Basic plugin for scheduling stage of IQM devices. MoveGateRoutingKeepExistingMovesPlugin () Plugin class for single qubit gate optimization and MoveGate routing where existing moves are kept. MoveGateRoutingOnlyKeepExistingMovesPlugin () Plugin class for MoveGate routing without single qubit gate optimization where existing moves are kept. MoveGateRoutingOnlyPlugin () Plugin class for MoveGate routing without single qubit gate optimization as a scheduling stage. MoveGateRoutingOnlyRemoveExistingMovesPlugin () Plugin class for MoveGate routing without single qubit gate optimization where existing moves are removed. MoveGateRoutingOnlyTrustExistingMovesPlugin () Plugin class for MoveGate routing without single qubit gate optimization where existing moves are not checked. MoveGateRoutingPlugin ([optimize_sqg, ...]) Plugin class for IQM single qubit gate optimization and MoveGate routing as a scheduling stage. MoveGateRoutingRemoveExistingMovesPlugin () Plugin class for single qubit gate optimization and MoveGate routing where existing moves are removed. MoveGateRoutingTrustExistingMovesPlugin () Plugin class for single qubit gate optimization and MoveGate routing where existing moves are not checked. MoveGateRoutingWithExactRZPlugin () Plugin class for single qubit gate optimization and MoveGate routing where trailing RZ gates are kept in the circuit. MoveGateRoutingWithRZOptimizationIgnoreBarriersPlugin () Plugin class for single qubit gate optimization and MoveGate routing where barriers are ignored during optimization. OnlyRZOptimizationExactIgnoreBarriersPlugin () Plugin class for single qubit gate optimization without MOVE gate routing and the final RZ gates are not dropped. OnlyRZOptimizationExactPlugin () Plugin class for single qubit gate optimization without MOVE gate routing and the final RZ gates are not dropped. OnlyRZOptimizationIgnoreBarriersPlugin () Plugin class for single qubit gate optimization without MOVE gate routing where barriers are ignored. OnlyRZOptimizationPlugin ([drop_final_rz, ...]) Plugin class for single qubit gate optimization without MOVE gate routing. Inheritance previous iqm.qiskit_iqm.qiskit_to_iqm.InstructionNotSupportedError next iqm.qiskit_iqm.transpiler_plugins.IQMDefaultSchedulingPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.iqm_fake_backend.IQMErrorProfile","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.iqm_fake_backend.IQMErrorProfile.html","description":"Bases: object Properties of an IQM QPU specimen, used for constructing an error model. All the attributes of this class refer to the qubits of the QPU using their physical names. t1s ( dict [ str , fl...","content":"Bases: object Properties of an IQM QPU specimen, used for constructing an error model. All the attributes of this class refer to the qubits of the QPU using their physical names. t1s ( dict [ str , float ] ) – maps qubits to their \\\\(T_1\\\\) times (in ns) t2s ( dict [ str , float ] ) – maps qubits to the \\\\(T_2\\\\) times (in ns) single_qubit_gate_depolarizing_error_parameters ( dict [ str , dict [ str , float ] ] ) – Depolarizing error parameters for single-qubit gates.\\nMaps single-qubit gate names to a mapping of qubits (on which the gate acts) to a depolarizing error.\\nThe error, used in a one-qubit depolarizing channel, concatenated with a thermal relaxation channel,\\nleads to average gate fidelities that would be determined by benchmarking. two_qubit_gate_depolarizing_error_parameters ( dict [ str , dict [ tuple [ str , str ] , float ] ] ) – Depolarizing error parameters for two-qubit gates.\\nMaps two-qubit gate names to a mapping of pairs of qubits (on which the gate acts) to a depolarizing error.\\nThe error, used in a two-qubit depolarizing channel, concatenated with thermal relaxation channels for the\\nqubits, leads to average gate fidelities that would be determined by benchmarking. single_qubit_gate_durations ( dict [ str , float ] ) – Gate duration (in ns) for each single-qubit gate two_qubit_gate_durations ( dict [ str , float ] ) – Gate duration (in ns) for each two-qubit gate. readout_errors ( dict [ str , dict [ str , float ] ] ) – Maps physical qubit names to dicts that describe their single-qubit readout errors.\\nFor each qubit, the inner dict maps the state labels “0” and “1” to the probability \\\\(P(\\\\neg x|x)\\\\) of observing the state \\\\(\\\\ket{\\\\neg x}\\\\) given the true state is \\\\(\\\\ket{x}\\\\) . name ( str | None ) – Identifier of the QPU specimen. Example Attributes name  t1s  t2s  single_qubit_gate_depolarizing_error_parameters  two_qubit_gate_depolarizing_error_parameters  single_qubit_gate_durations  two_qubit_gate_durations  readout_errors  Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). previous iqm.qiskit_iqm.fake_backends.iqm_fake_backend next iqm.qiskit_iqm.fake_backends.iqm_fake_backend.IQMFakeBackend By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.MoveGateFrameTrackingMode","url":"/iqm-client/api/iqm.iqm_client.models.MoveGateFrameTrackingMode.html","description":"Bases: str , Enum MOVE gate frame tracking mode for circuit compilation. This option is meant for advanced users. Attributes FULL Perform complete MOVE gate frame tracking. NO_DETUNING_CORRECTION Do n...","content":"Bases: str , Enum MOVE gate frame tracking mode for circuit compilation. This option is meant for advanced users. Attributes FULL Perform complete MOVE gate frame tracking. NO_DETUNING_CORRECTION Do not add the phase detuning corrections to the pulse schedule for the MOVE gate. NONE Do not perform any MOVE gate frame tracking. Methods _generate_next_value_ (start, count, last_values) Generate the next value when not given. _new_member_ (**kwargs) Create and return a new object. _value_repr_ () Return repr(self). __format__ (format_spec) Return a formatted version of the string as described by format_spec. __new__ (value)  __repr__ () Return repr(self). __str__ () Return str(self). Perform complete MOVE gate frame tracking. Do not add the phase detuning corrections to the pulse schedule for the MOVE gate. The user is expected to do\\nthese manually. Do not perform any MOVE gate frame tracking. The user is expected to do these manually. previous iqm.iqm_client.models.Metadata next iqm.iqm_client.models.MoveGateValidationMode By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.examples.transpile_example","url":"/iqm-client/api/iqm.qiskit_iqm.examples.transpile_example.html","description":"This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on an IQM quantum\\ncomputer. See the Qiskit on IQM user guide for instructions: https://docs.meetiqm.com/i...","content":"This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on an IQM quantum\\ncomputer. See the Qiskit on IQM user guide for instructions: https://docs.meetiqm.com/iqm-client/user_guide_qiskit.html Functions transpile_example (server_url) Run a GHZ circuit transpiled using the Qiskit transpile function. previous iqm.qiskit_iqm.examples.resonance_example.resonance_example next iqm.qiskit_iqm.examples.transpile_example.transpile_example By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingRemoveExistingMovesPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingRemoveExistingMovesPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where existing moves are removed. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingPl...","content":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where existing moves are removed. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingTrustExistingMovesPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for MoveGate routing without single qubit gate optimization as a scheduling stage. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyKeepE...","content":"Bases: MoveGateRoutingPlugin Plugin class for MoveGate routing without single qubit gate optimization as a scheduling stage. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyKeepExistingMovesPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyRemoveExistingMovesPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client","url":"/iqm-client/api/iqm.iqm_client.html","description":"Client-side library for connecting to and executing quantum circuits on IQM quantum computers. Subpackages and modules api This module contains definitions of IQM Server API endpoints. authentication ...","content":"Client-side library for connecting to and executing quantum circuits on IQM quantum computers. Subpackages and modules api This module contains definitions of IQM Server API endpoints. authentication This module contains user authentication related classes and functions required by IQMClient. errors This module contains error classes required by IQMClient. iqm_client Client for connecting to the IQM quantum computer server interface. models This module contains the data models used by IQMClient. transpile Transpiling circuits to IQM devices involving computational resonators. util Helpful utilities that can be used together with IQMClient. previous API Reference next iqm.iqm_client.api By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.api.APIVariant","url":"/iqm-client/api/iqm.iqm_client.api.APIVariant.html","description":"Bases: Enum Supported API versions and variants. Attributes V1  V2  RESONANCE_COCOS_V1  Methods previous iqm.iqm_client.api.APIEndpoint next iqm.iqm_client.authentication By IQM client developers © Co...","content":"Bases: Enum Supported API versions and variants. Attributes V1  V2  RESONANCE_COCOS_V1  Methods previous iqm.iqm_client.api.APIEndpoint next iqm.iqm_client.authentication By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_garnet.IQMFakeGarnet","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_garnet.IQMFakeGarnet.html","description":"Return IQMFakeBackend instance representing IQM’s Garnet architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_garnet next iqm.qiskit_iqm.fake_backends.iqm_fake_backend By IQM client...","content":"Return IQMFakeBackend instance representing IQM’s Garnet architecture. IQMFakeBackend previous iqm.qiskit_iqm.fake_backends.fake_garnet next iqm.qiskit_iqm.fake_backends.iqm_fake_backend By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.MoveGateValidationMode","url":"/iqm-client/api/iqm.iqm_client.models.MoveGateValidationMode.html","description":"Bases: str , Enum MOVE gate validation mode for circuit compilation. This options is meant for advanced users. Attributes STRICT MOVE gates must only appear in sandwiches, with no gates acting on the ...","content":"Bases: str , Enum MOVE gate validation mode for circuit compilation. This options is meant for advanced users. Attributes STRICT MOVE gates must only appear in sandwiches, with no gates acting on the MOVE qubit inside the sandwich. ALLOW_PRX Allow PRX gates on the MOVE qubit inside MOVE sandwiches during validation. NONE Do not perform any MOVE gate validation. Methods _generate_next_value_ (start, count, last_values) Generate the next value when not given. _new_member_ (**kwargs) Create and return a new object. _value_repr_ () Return repr(self). __format__ (format_spec) Return a formatted version of the string as described by format_spec. __new__ (value)  __repr__ () Return repr(self). __str__ () Return str(self). MOVE gates must only appear in sandwiches, with no gates acting on the\\nMOVE qubit inside the sandwich. Perform standard MOVE gate validation Allow PRX gates on the MOVE qubit inside MOVE sandwiches during validation. Do not perform any MOVE gate validation. previous iqm.iqm_client.models.MoveGateFrameTrackingMode next iqm.iqm_client.models.NativeOperation By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.util.to_json_dict","url":"/iqm-client/api/iqm.iqm_client.util.to_json_dict.html","description":"Convert a dict to JSON serializable dict obj ( dict [ str , Any ] ) – dict to convert dict containing converted data ValueError if the original dict contains unsupported datatypes – dict previous iqm....","content":"Convert a dict to JSON serializable dict obj ( dict [ str , Any ] ) – dict to convert dict containing converted data ValueError if the original dict contains unsupported datatypes – dict previous iqm.iqm_client.util next iqm.iqm_client.util.IQMJSONEncoder By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.DDMode","url":"/iqm-client/api/iqm.iqm_client.models.DDMode.html","description":"Bases: str , Enum Dynamical Decoupling (DD) mode for circuit execution. Attributes DISABLED Do not apply dynamical decoupling. ENABLED Apply dynamical decoupling. Methods _generate_next_value_ (start,...","content":"Bases: str , Enum Dynamical Decoupling (DD) mode for circuit execution. Attributes DISABLED Do not apply dynamical decoupling. ENABLED Apply dynamical decoupling. Methods _generate_next_value_ (start, count, last_values) Generate the next value when not given. _new_member_ (**kwargs) Create and return a new object. _value_repr_ () Return repr(self). __format__ (format_spec) Return a formatted version of the string as described by format_spec. __new__ (value)  __repr__ () Return repr(self). __str__ () Return str(self). Do not apply dynamical decoupling. Apply dynamical decoupling. previous iqm.iqm_client.models.Counts next iqm.iqm_client.models.DDStrategy By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.api","url":"/iqm-client/api/iqm.iqm_client.api.html","description":"This module contains definitions of IQM Server API endpoints. Classes APIConfig (variant, iqm_server_url) Provides supported API endpoints for a given API variant. APIEndpoint (value[, names, module, ...","content":"This module contains definitions of IQM Server API endpoints. Classes APIConfig (variant, iqm_server_url) Provides supported API endpoints for a given API variant. APIEndpoint (value[, names, module, ...]) Supported API endpoints. APIVariant (value[, names, module, qualname, ...]) Supported API versions and variants. Inheritance previous iqm.iqm_client next iqm.iqm_client.api.APIConfig By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_circuit_validation","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_circuit_validation.html","description":"Helper functions for circuit validation. Functions validate_circuit (circuit, backend[, ...]) Validate a circuit against the backend. previous iqm.qiskit_iqm.iqm_circuit.IQMCircuit next iqm.qiskit_iqm...","content":"Helper functions for circuit validation. Functions validate_circuit (circuit, backend[, ...]) Validate a circuit against the backend. previous iqm.qiskit_iqm.iqm_circuit.IQMCircuit next iqm.qiskit_iqm.iqm_circuit_validation.validate_circuit By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.validate_circuit","url":"/iqm-client/api/iqm.iqm_client.models.validate_circuit.html","description":"Validates a submitted quantum circuit using Pydantic tooling. circuit ( Circuit ) – a circuit that needs validation pydantic.error_wrappers.ValidationError – validation failed None previous iqm.iqm_cl...","content":"Validates a submitted quantum circuit using Pydantic tooling. circuit ( Circuit ) – a circuit that needs validation pydantic.error_wrappers.ValidationError – validation failed None previous iqm.iqm_client.models.serialize_qubit_mapping next iqm.iqm_client.models.CalibrationSet By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_circuit.IQMCircuit","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_circuit.IQMCircuit.html","description":"Bases: QuantumCircuit Extends the QuantumCircuit class, adding a shortcut for applying the MOVE gate. Attributes name A human-readable name for the circuit. qregs A list of the QuantumRegister s in th...","content":"Bases: QuantumCircuit Extends the QuantumCircuit class, adding a shortcut for applying the MOVE gate. Attributes name A human-readable name for the circuit. qregs A list of the QuantumRegister s in this circuit. cregs A list of the ClassicalRegister s in this circuit. duration The total duration of the circuit, set by a scheduling transpiler pass. unit The unit that duration is specified in. Methods move (qubit, resonator) Applies the MOVE gate to the circuit. regs ( Register | int | Sequence [ Bit ] ) – name ( str | None ) – global_phase ( ParameterValueType ) – metadata ( dict | None ) – inputs ( Iterable [ expr.Var ] ) – captures ( Iterable [ expr.Var ] ) – declarations ( Mapping [ expr.Var , expr.Expr ] | Iterable [ Tuple [ expr.Var , expr.Expr ] ] ) – Applies the MOVE gate to the circuit. Note: at this point the circuit layout is only guaranteed to work if the order\\nof the qubit and the resonator is correct (qubit first, resonator second). qubit ( int ) – the logical index of the qubit resonator ( int ) – the logical index of the resonator previous iqm.qiskit_iqm.iqm_circuit next iqm.qiskit_iqm.iqm_circuit_validation By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.RunCounts","url":"/iqm-client/api/iqm.iqm_client.models.RunCounts.html","description":"Bases: BaseModel Measurement results of a circuit execution job in histogram representation. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedField...","content":"Bases: BaseModel Measurement results of a circuit execution job in histogram representation. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. status current status of the job, in {'pending compilation', 'pending execution', 'ready', 'failed', 'aborted'} counts_batch measurement results in histogram representation for each circuit in the batch Methods status ( Status ) – counts_batch ( list [ Counts ] | None ) – A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. current status of the job, in {'pending compilation', 'pending execution', 'ready', 'failed', 'aborted'} measurement results in histogram representation for each circuit in the batch previous iqm.iqm_client.models.QuantumArchitectureSpecification next iqm.iqm_client.models.RunRequest By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_move_layout","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_move_layout.html","description":"Generate an initial layout for a quantum circuit that is\\nvalid on the quantum architecture specification of the given backend. Functions generate_initial_layout (backend, circuit[, ...]) Generates an ...","content":"Generate an initial layout for a quantum circuit that is\\nvalid on the quantum architecture specification of the given backend. Functions generate_initial_layout (backend, circuit[, ...]) Generates an initial layout for the given circuit, when run against the given backend. Classes IQMMoveLayout (*args, **kwargs) Create a layout that is valid on the dynamic quantum architecture of the given IQM target. Inheritance previous iqm.qiskit_iqm.iqm_job.IQMJob next iqm.qiskit_iqm.iqm_move_layout.generate_initial_layout By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.move_gate.MoveGate","url":"/iqm-client/api/iqm.qiskit_iqm.move_gate.MoveGate.html","description":"Bases: Gate The MOVE operation is a unitary population exchange operation between a qubit and a resonator.\\nIts effect is only defined in the invariant subspace \\\\(S = \\\\text{span}\\\\{|00\\\\rangle, |01\\\\rangl...","content":"Bases: Gate The MOVE operation is a unitary population exchange operation between a qubit and a resonator.\\nIts effect is only defined in the invariant subspace \\\\(S = \\\\text{span}\\\\{|00\\\\rangle, |01\\\\rangle, |10\\\\rangle\\\\}\\\\) ,\\nwhere it swaps the populations of the states \\\\(|01\\\\rangle\\\\) and \\\\(|10\\\\rangle\\\\) .\\nIts effect on the orthogonal subspace is undefined. MOVE has the following presentation in the subspace \\\\(S\\\\) : where \\\\(a\\\\) is an undefined complex phase that is canceled when the MOVE gate is applied a second time. To ensure that the state of the qubit and resonator has no overlap with \\\\(|11\\\\rangle\\\\) , it is\\nrecommended that no single qubit gates are applied to the qubit in between a\\npair of MOVE operations. Note The MOVE gate must always be be applied on the qubit and the resonator in the\\norder [qubit, resonator] , regardless of which component is currently holding the state. Attributes Methods _define () This function is purposefully not defined so that that the Qiskit transpiler cannot accidentally decompose the MOVE gate into a sequence of other gates, instead it will throw an error. previous iqm.qiskit_iqm.move_gate.MOVE_GATE_UNITARY next iqm.qiskit_iqm.qiskit_to_iqm By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.Status","url":"/iqm-client/api/iqm.iqm_client.models.Status.html","description":"Bases: str , Enum Status of a job. Attributes RECEIVED Job has been received but nothing has been done about it. PROCESSING  ACCEPTED Job has passed initial checks and will proceed to compilation. PEN...","content":"Bases: str , Enum Status of a job. Attributes RECEIVED Job has been received but nothing has been done about it. PROCESSING  ACCEPTED Job has passed initial checks and will proceed to compilation. PENDING_COMPILATION Job has been queued for compilation. PENDING_EXECUTION Job has been compiled and is queued for execution. COMPILED Job has been compiled to a low-level representation. READY Job has been executed and results are available. FAILED Execution or compilation failed. ABORTED User caneceled the execution. PENDING_DELETION Job is set to be deleted. DELETION_FAILED Job was supposed to be deleted but deletion failed. DELETED Job deleted from the database. UNKNOWN Job is in a state not recognized by this version of the client. Methods _generate_next_value_ (start, count, last_values) Generate the next value when not given. terminal_statuses () Statuses from which the execution can't continue. _new_member_ (**kwargs) Create and return a new object. _value_repr_ () Return repr(self). __format__ (format_spec) Return a formatted version of the string as described by format_spec. __new__ (value)  __repr__ () Return repr(self). __str__ () Return str(self). Job has been received but nothing has been done about it. Job has passed initial checks and will proceed to compilation. Job has been queued for compilation. Job has been compiled and is queued for execution. Job has been compiled to a low-level representation. Job has been executed and results are available. Execution or compilation failed. User caneceled the execution. Job is set to be deleted. Job was supposed to be deleted but deletion failed. Job deleted from the database. Job is in a state not recognized by this version of the client. Statuses from which the execution can’t continue. set [ Status ] previous iqm.iqm_client.models.SingleQubitMapping next iqm.iqm_client.transpile By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.CircuitMeasurementResults","url":"/iqm-client/api/iqm.iqm_client.models.CircuitMeasurementResults.html","description":"Measurement results from a single circuit. For each measurement operation in the circuit,\\nmaps the measurement key to the corresponding results. The outer list elements correspond to shots,\\nand the in...","content":"Measurement results from a single circuit. For each measurement operation in the circuit,\\nmaps the measurement key to the corresponding results. The outer list elements correspond to shots,\\nand the inner list elements to the qubits measured in the measurement operation. alias of dict [ str , list [ list [ int ]]] previous iqm.iqm_client.models.STANDARD_DD_STRATEGY next iqm.iqm_client.models.CircuitMeasurementResultsBatch By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.authentication.TokenClient","url":"/iqm-client/api/iqm.iqm_client.authentication.TokenClient.html","description":"Bases: TokenProviderInterface Requests new token from an authentication server Attributes PASSWORD_GRANT_TYPE  REFRESH_TOKEN_GRANT_TYPE  Methods _get_access_token_from_server (grant_type) Get new acce...","content":"Bases: TokenProviderInterface Requests new token from an authentication server Attributes PASSWORD_GRANT_TYPE  REFRESH_TOKEN_GRANT_TYPE  Methods _get_access_token_from_server (grant_type) Get new access token from the server and update refresh token. close () Close authentication session get_token () Get new access token and refresh token from the server auth_server_url ( str ) – realm ( str ) – username ( str ) – password ( str ) – Get new access token and refresh token from the server str Close authentication session None previous iqm.iqm_client.authentication.ExternalToken next iqm.iqm_client.authentication.TokenManager By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.examples","url":"/iqm-client/api/iqm.qiskit_iqm.examples.html","description":"Example code. Subpackages and modules bell_measure This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on an IQM quantum computer. resonance_example This fil...","content":"Example code. Subpackages and modules bell_measure This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on an IQM quantum computer. resonance_example This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on Resonance, the IQM quantum cloud service. transpile_example This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on an IQM quantum computer. previous iqm.qiskit_iqm next iqm.qiskit_iqm.examples.bell_measure By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingWithRZOptimizationIgnoreBarriersPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingWithRZOptimizationIgnoreBarriersPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where barriers are ignored during\\noptimization. Methods previous iqm.qiskit_iqm.transpiler_plugins.Mov...","content":"Bases: MoveGateRoutingPlugin Plugin class for single qubit gate optimization and MoveGate routing where barriers are ignored during\\noptimization. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingWithExactRZPlugin next iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationExactIgnoreBarriersPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationPlugin.html","description":"Bases: IQMSchedulingPlugin Plugin class for single qubit gate optimization without MOVE gate routing. Methods previous iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationIgnoreBarriersPlugin next Int...","content":"Bases: IQMSchedulingPlugin Plugin class for single qubit gate optimization without MOVE gate routing. Methods previous iqm.qiskit_iqm.transpiler_plugins.OnlyRZOptimizationIgnoreBarriersPlugin next Integration Guide By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_transpilation.IQMOptimizeSingleQubitGates","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_transpilation.IQMOptimizeSingleQubitGates.html","description":"Bases: TransformationPass Optimize the decomposition of single-qubit gates for the IQM gate set. This optimization pass expects the circuit to be correctly layouted and translated to the IQM architect...","content":"Bases: TransformationPass Optimize the decomposition of single-qubit gates for the IQM gate set. This optimization pass expects the circuit to be correctly layouted and translated to the IQM architecture\\nand raises an error otherwise.\\nThe optimization logic follows the steps: Convert single-qubit gates to \\\\(U\\\\) gates and combine all neighboring \\\\(U\\\\) gates. Convert \\\\(U\\\\) gates according to \\\\(U(\\\\theta , \\\\phi , \\\\lambda) = ~ RZ(\\\\phi + \\\\lambda) R(\\\\theta, \\\\pi / 2  - \\\\lambda)\\\\) . Commute RZ gates to the end of the circuit using the fact that RZ and CZ gates commute, and \\\\(R(\\\\theta , \\\\phi) RZ(\\\\lambda) = RZ(\\\\lambda) R(\\\\theta, \\\\phi - \\\\lambda)\\\\) . Drop RZ gates immediately before measurements, and otherwise replace them according to \\\\(RZ(\\\\lambda) = R(\\\\pi, \\\\lambda / 2) R(- \\\\pi, 0)\\\\) . drop_final_rz – Drop terminal RZ gates even if there are no measurements following them (since they do not affect\\nthe measurement results). Note that this will change the unitary propagator of the circuit.\\nIt is recommended always to set this to true as the final RZ gates do no change the measurement outcomes of\\nthe circuit. ignore_barriers ( bool ) – Removes the barriers from the circuit before optimization (default = False). Attributes Methods _validate_ops (dag)  run (dag) Run a pass on the DAGCircuit. Run a pass on the DAGCircuit. This is implemented by the pass developer. dag ( DAGCircuit ) – the dag on which the pass is run. NotImplementedError – when this is left unimplemented for a pass. DAGCircuit previous iqm.qiskit_iqm.iqm_transpilation.optimize_single_qubit_gates next iqm.qiskit_iqm.iqm_transpilation.IQMReplaceGateWithUnitaryPass By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.DynamicQuantumArchitecture","url":"/iqm-client/api/iqm.iqm_client.models.DynamicQuantumArchitecture.html","description":"Bases: BaseModel Dynamic quantum architecture as returned by server. The dynamic quantum architecture (DQA) describes gates/operations for which calibration data\\nexists in the calibration set. Attribu...","content":"Bases: BaseModel Dynamic quantum architecture as returned by server. The dynamic quantum architecture (DQA) describes gates/operations for which calibration data\\nexists in the calibration set. Attributes components All locus components (qubits and computational resonators) sorted. model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. calibration_set_id id of the calibration set from which this DQA was generated qubits qubits that appear in at least one gate locus in the calibration set computational_resonators computational resonators that appear in at least one gate locus in the calibration set gates mapping of gate names to information about the gates Methods calibration_set_id ( UUID ) – qubits ( list [ str ] ) – computational_resonators ( list [ str ] ) – gates ( dict [ str , GateInfo ] ) – id of the calibration set from which this DQA was generated qubits that appear in at least one gate locus in the calibration set computational resonators that appear in at least one gate locus in the calibration set mapping of gate names to information about the gates All locus components (qubits and computational resonators) sorted. The components are first sorted alphabetically based on their non-numeric part, and then\\ncomponents with the same non-numeric part are sorted numerically. An example of components\\nsorted this way would be: (‘COMPR1’, ‘COMPR2’, ‘QB1’, ‘QB2’, ‘QB3’, ‘QB10’, ‘QB11’, ‘QB20’). A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.DDStrategy next iqm.iqm_client.models.GateImplementationInfo By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.transpile","url":"/iqm-client/api/iqm.iqm_client.transpile.html","description":"Transpiling circuits to IQM devices involving computational resonators. In the IQM Star architecture, computational resonators are connected to multiple qubits.\\nA MOVE gate can be used to move the sta...","content":"Transpiling circuits to IQM devices involving computational resonators. In the IQM Star architecture, computational resonators are connected to multiple qubits.\\nA MOVE gate can be used to move the state of a qubit to a connected, empty computational resonator,\\nand back to the same qubit . Additionally, two-component gates like CZ can be applied\\nbetween a qubit and a connected resonator, so that effectively the qubit can be made to interact\\nwith other qubits connected to the resonator. However, the resonators cannot be measured,\\nand no single-qubit gates can be applied on them. To enable third-party transpilers to work on the IQM Star architecture, we may abstract away the\\nresonators and replace the real dynamic quantum architecture with a simplified architecture .\\nSpecifically, this happens by removing the resonators from the architecture, and for\\neach resonator r , and for each pair of supported native qubit-resonator (QR) gates (G(q1, r), MOVE(q2, r)) adding the fictional gate G(q1, q2) to the simplified architecture.\\nThis works since the fictional gate can be implemented as the QR gate sequence This sequence is called a resolution of G(q1, q2) .\\nCurrently  we assume all the QR gates (other than MOVE) are symmetric in the sense that holds. This has the effect of doubling the number of possible resolutions for G(q1, q2) since\\nyou can reverse the roles of the qubits. Before a circuit transpiled to a simplified architecture can be executed it must be further\\ntranspiled to the real Star architecture using transpile_insert_moves() , which will introduce\\nthe resonators, add MOVE gates as necessary to move the states, and convert the fictional two-qubit\\ngates into real native gates acting on qubit-resonator pairs. Likewise transpile_remove_moves() can be used to perform the opposite transformation,\\nconverting a circuit valid for the real Star architecture into an equivalent circuit for the\\ncorresponding simplified architecture, e.g. so that the circuit can be retranspiled or optimized\\nusing third-party tools that do not support the MOVE gate. Given a DynamicQuantumArchitecture for a Star architecture, the corresponding simplified\\nversion can be obtained using simplify_architecture() . Module Attributes Resolution A (gate qubit, move qubit, resonator) triple that represents a resolution of a fictional qubit-qubit gate. Functions simplify_architecture (arch, *[, ...]) Converts the given IQM Star quantum architecture into the equivalent simplified quantum architecture. transpile_insert_moves (circuit, arch, *[, ...]) Convert a simplified architecture circuit into an equivalent Star architecture circuit with resonators and MOVE gates, if needed. transpile_remove_moves (circuit) Convert a Star architecture circuit involving resonators and MOVE gates into an equivalent simplified achitecture circuit without them. Classes ExistingMoveHandlingOptions (value[, names, ...]) Options for how transpile_insert_moves() should handle existing MOVE instructions in the circuit. Inheritance previous iqm.iqm_client.models.Status next iqm.iqm_client.transpile.Resolution By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors.ClientConfigurationError","url":"/iqm-client/api/iqm.iqm_client.errors.ClientConfigurationError.html","description":"Wrong configuration provided. previous iqm.iqm_client.errors.ClientAuthenticationError next iqm.iqm_client.errors.EndpointRequestError By IQM client developers © Copyright 2021-2025, IQM. Last updated...","content":"Wrong configuration provided. previous iqm.iqm_client.errors.ClientAuthenticationError next iqm.iqm_client.errors.EndpointRequestError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_naive_move_pass","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_naive_move_pass.html","description":"Naive transpilation for the IQM Star architecture. Functions transpile_to_IQM (circuit, backend[, target, ...]) Customized transpilation to IQM backends. Classes IQMNaiveResonatorMoving (*args, **kwar...","content":"Naive transpilation for the IQM Star architecture. Functions transpile_to_IQM (circuit, backend[, target, ...]) Customized transpilation to IQM backends. Classes IQMNaiveResonatorMoving (*args, **kwargs) Naive transpilation pass for resonator moving. Inheritance previous iqm.qiskit_iqm.iqm_move_layout.IQMMoveLayout next iqm.qiskit_iqm.iqm_naive_move_pass.transpile_to_IQM By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.QualityMetricSet","url":"/iqm-client/api/iqm.iqm_client.models.QualityMetricSet.html","description":"Bases: BaseModel Quality metrics for a calibration set. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configurat...","content":"Bases: BaseModel Quality metrics for a calibration set. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. calibration_set_id ID of the calibration set. calibration_set_dut_label Chip Label of the calibration set. calibration_set_number_of_observations Number of observations in the calibration set. calibration_set_created_timestamp Timestamp when the calibration set was created. calibration_set_end_timestamp Timestamp when the calibration set was finalized. calibration_set_is_invalid Whether the calibration set is invalid. quality_metric_set_id ID of the quality metric set. quality_metric_set_dut_label Chip label of the quality metric set. quality_metric_set_created_timestamp Timestamp when the quality metric set was created. quality_metric_set_end_timestamp Timestamp when the quality metric set was finalized. quality_metric_set_is_invalid Whether the quality metric set is invalid. metrics Quality metrics. Methods calibration_set_id ( UUID | None ) – calibration_set_dut_label ( str ) – calibration_set_number_of_observations ( int ) – calibration_set_created_timestamp ( str ) – calibration_set_end_timestamp ( str ) – calibration_set_is_invalid ( bool ) – quality_metric_set_id ( UUID | None ) – quality_metric_set_dut_label ( str | None ) – quality_metric_set_created_timestamp ( str | None ) – quality_metric_set_end_timestamp ( str | None ) – quality_metric_set_is_invalid ( bool ) – metrics ( dict [ str , dict [ str , Any ] ] | None ) – ID of the calibration set. Chip Label of the calibration set. Number of observations in the calibration set. Timestamp when the calibration set was created. Timestamp when the calibration set was finalized. Whether the calibration set is invalid. ID of the quality metric set. Chip label of the quality metric set. Timestamp when the quality metric set was created. Timestamp when the quality metric set was finalized. Whether the quality metric set is invalid. Quality metrics. A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.NativeOperation next iqm.iqm_client.models.QuantumArchitecture By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.authentication.TokensFileReader","url":"/iqm-client/api/iqm.iqm_client.authentication.TokensFileReader.html","description":"Bases: TokenProviderInterface Reads token from a file Methods close () Closes authentication session. get_token () Returns a valid access token. tokens_file ( str ) – Returns a valid access token. Cli...","content":"Bases: TokenProviderInterface Reads token from a file Methods close () Closes authentication session. get_token () Returns a valid access token. tokens_file ( str ) – Returns a valid access token. ClientAuthenticationError – acquiring the token failed str Closes authentication session. ClientAuthenticationError – closing the session failed None previous iqm.iqm_client.authentication.TokenProviderInterface next iqm.iqm_client.errors By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.transpile.simplify_architecture","url":"/iqm-client/api/iqm.iqm_client.transpile.simplify_architecture.html","description":"Converts the given IQM Star quantum architecture into the equivalent simplified quantum architecture. See iqm.iqm_client.transpile for the details. Adds fictional gates, abstracts away their gate impl...","content":"Converts the given IQM Star quantum architecture into the equivalent simplified quantum architecture. See iqm.iqm_client.transpile for the details. Adds fictional gates, abstracts away their gate implementations.\\nReturns arch itself if it does not contain computational resonators (in which case nothing will change). arch ( DynamicQuantumArchitecture ) – quantum architecture to convert remove_resonators ( bool ) – iff False, return the union of the simplified and real architectures equivalent quantum architecture with fictional gates DynamicQuantumArchitecture previous iqm.iqm_client.transpile.Resolution next iqm.iqm_client.transpile.transpile_insert_moves By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_garnet","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_garnet.html","description":"Fake (i.e. simulated) backend for IQM’s 20-qubit Garnet architecture Functions IQMFakeGarnet () Return IQMFakeBackend instance representing IQM's Garnet architecture. previous iqm.qiskit_iqm.fake_back...","content":"Fake (i.e. simulated) backend for IQM’s 20-qubit Garnet architecture Functions IQMFakeGarnet () Return IQMFakeBackend instance representing IQM's Garnet architecture. previous iqm.qiskit_iqm.fake_backends.fake_deneb.IQMFakeDeneb next iqm.qiskit_iqm.fake_backends.fake_garnet.IQMFakeGarnet By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.authentication.ExternalToken","url":"/iqm-client/api/iqm.iqm_client.authentication.ExternalToken.html","description":"Bases: TokenProviderInterface Holds an external token Methods close () Closes authentication session. get_token () Returns a valid access token. token ( str ) – Returns a valid access token. ClientAut...","content":"Bases: TokenProviderInterface Holds an external token Methods close () Closes authentication session. get_token () Returns a valid access token. token ( str ) – Returns a valid access token. ClientAuthenticationError – acquiring the token failed str Closes authentication session. ClientAuthenticationError – closing the session failed None previous iqm.iqm_client.authentication next iqm.iqm_client.authentication.TokenClient By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models","url":"/iqm-client/api/iqm.iqm_client.models.html","description":"This module contains the data models used by IQMClient. Module Attributes Locus Names of the QPU components (typically qubits) a quantum operation instance is acting on, e.g. (\\"QB1\\", \\"QB2\\") . CircuitB...","content":"This module contains the data models used by IQMClient. Module Attributes Locus Names of the QPU components (typically qubits) a quantum operation instance is acting on, e.g. (\\"QB1\\", \\"QB2\\") . CircuitBatch Type that represents a list of quantum circuits to be executed together in a single batch. QubitMapping Type that represents a qubit mapping for a circuit, i.e. a list of single qubit mappings for all qubits in the circuit. PRXSequence A sequence of PRX gates. STANDARD_DD_STRATEGY The default DD strategy uses the following gate sequences: CircuitMeasurementResults Measurement results from a single circuit. CircuitMeasurementResultsBatch Type that represents measurement results for a batch of circuits. Functions serialize_qubit_mapping (qubit_mapping) Serializes a qubit mapping dict into the corresponding IQM data transfer format. validate_circuit (circuit) Validates a submitted quantum circuit using Pydantic tooling. Classes CalibrationSet (*, calibration_set_id, ...) Metadata and observations of a calibration set. Circuit (*, name, instructions[, metadata]) Quantum circuit to be executed. CircuitCompilationOptions ([...]) Various discrete options for quantum circuit compilation to pulse schedule. ClientLibrary (*, name[, package_name, ...]) Represents a client library with its metadata. Counts (*, measurement_keys, counts) Circuit measurement results in histogram representation. DDMode (value[, names, module, qualname, ...]) Dynamical Decoupling (DD) mode for circuit execution. DDStrategy (*[, merge_contiguous_waits, ...]) Describes a particular dynamical decoupling strategy. DynamicQuantumArchitecture (*, ...) Dynamic quantum architecture as returned by server. GateImplementationInfo (*, loci) Information about an implementation of a quantum gate/operation. GateInfo (*, implementations, ...) Information about a quantum gate/operation. HeraldingMode (value[, names, module, ...]) Heralding mode for circuit execution. Instruction (*, name[, implementation, args]) Native quantum operation instance with particular arguments and locus. JobParameters (*, shots[, ...]) Job-specific parameters extracted from the original RunRequest. Metadata (*[, calibration_set_id, request, ...]) Metadata describing a circuit execution job. MoveGateFrameTrackingMode (value[, names, ...]) MOVE gate frame tracking mode for circuit compilation. MoveGateValidationMode (value[, names, ...]) MOVE gate validation mode for circuit compilation. NativeOperation (name, arity, args_required, ...) Describes a native operation on the quantum computer. QualityMetricSet (*, calibration_set_id, ...) Quality metrics for a calibration set. QuantumArchitecture (*, quantum_architecture) Quantum architecture as returned by server. QuantumArchitectureSpecification (*, name, ...) Quantum architecture specification. RunCounts (*, status[, counts_batch]) Measurement results of a circuit execution job in histogram representation. RunRequest (*, circuits[, custom_settings, ...]) Request for an IQM quantum computer to run a job that executes a batch of quantum circuits. RunResult (*, status[, measurements, ...]) Results of the quantum circuit execution job. RunStatus (*, status[, message, warnings]) Status of a circuit execution job. SingleQubitMapping (*, logical_name, ...) Mapping of a logical qubit name to a physical qubit name. Status (value[, names, module, qualname, ...]) Status of a job. Inheritance previous iqm.iqm_client.iqm_client.IQMClient next iqm.iqm_client.models.Locus By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.iqm_client","url":"/iqm-client/api/iqm.iqm_client.iqm_client.html","description":"Client for connecting to the IQM quantum computer server interface. Classes IQMClient (url, *[, client_signature, token, ...]) Provides access to IQM quantum computers. Inheritance previous iqm.iqm_cl...","content":"Client for connecting to the IQM quantum computer server interface. Classes IQMClient (url, *[, client_signature, token, ...]) Provides access to IQM quantum computers. Inheritance previous iqm.iqm_client.errors.JobAbortionError next iqm.iqm_client.iqm_client.IQMClient By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.QuantumArchitecture","url":"/iqm-client/api/iqm.iqm_client.models.QuantumArchitecture.html","description":"Bases: BaseModel Quantum architecture as returned by server. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Confi...","content":"Bases: BaseModel Quantum architecture as returned by server. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. quantum_architecture Details about the quantum architecture. Methods quantum_architecture ( QuantumArchitectureSpecification ) – Details about the quantum architecture. A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.QualityMetricSet next iqm.iqm_client.models.QuantumArchitectureSpecification By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.QubitMapping","url":"/iqm-client/api/iqm.iqm_client.models.QubitMapping.html","description":"Type that represents a qubit mapping for a circuit, i.e. a list of single qubit mappings\\nfor all qubits in the circuit. alias of list [ SingleQubitMapping ] previous iqm.iqm_client.models.CircuitBatch...","content":"Type that represents a qubit mapping for a circuit, i.e. a list of single qubit mappings\\nfor all qubits in the circuit. alias of list [ SingleQubitMapping ] previous iqm.iqm_client.models.CircuitBatch next iqm.iqm_client.models.PRXSequence By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.Circuit","url":"/iqm-client/api/iqm.iqm_client.models.Circuit.html","description":"Bases: BaseModel Quantum circuit to be executed. Consists of native quantum operations, each represented by an instance of the Instruction class. Attributes model_computed_fields A dictionary of compu...","content":"Bases: BaseModel Quantum circuit to be executed. Consists of native quantum operations, each represented by an instance of the Instruction class. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. name name of the circuit instructions instructions comprising the circuit metadata arbitrary metadata associated with the circuit Methods all_qubits () Return the names of all qubits in the circuit. instructions_validator (value) Check the container of instructions and each instruction within name_validator (value) Check if the circuit name is a non-empty string name ( str ) – instructions ( tuple [ Instruction , ... ] ) – metadata ( dict [ str , Any ] | None ) – name of the circuit instructions comprising the circuit arbitrary metadata associated with the circuit Return the names of all qubits in the circuit. set [ str ] Check if the circuit name is a non-empty string Check the container of instructions and each instruction within A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.CalibrationSet next iqm.iqm_client.models.CircuitCompilationOptions By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_backend.IQMTarget","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_backend.IQMTarget.html","description":"Bases: Target Transpilation target for an IQM architecture. Contains the mapping of physical qubit name on the device to qubit index in the Target. architecture ( DynamicQuantumArchitecture ) – Quantu...","content":"Bases: Target Transpilation target for an IQM architecture. Contains the mapping of physical qubit name on the device to qubit index in the Target. architecture ( DynamicQuantumArchitecture ) – Quantum architecture that defines the target. component_to_idx ( dict [ str , int ] ) – Mapping from QPU component names to integer indices used by Qiskit to refer to them. include_resonators ( bool ) – Whether to include MOVE gates in the target. include_fake_czs ( bool ) – Whether to include virtual CZs that are not natively supported, but could be routed via MOVE. Attributes physical_qubits Return the ordered list of physical qubits in the backend. Methods _add_connections_from_DQA () Initializes the Target, making it represent the dynamic quantum architecture iqm_dqa . restrict_to_qubits (qubits) Generated a restricted transpilation target from this Target that only contains the given qubits. Return the ordered list of physical qubits in the backend. Generated a restricted transpilation target from this Target that only contains the given qubits. qubits ( list [ int ] | list [ str ] ) – Qubits to restrict the target to. Can be either a list of qubit indices or qubit names. restricted target IQMTarget previous iqm.qiskit_iqm.iqm_backend.IQMBackendBase next iqm.qiskit_iqm.iqm_circuit By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_transpilation","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_transpilation.html","description":"Transpilation tool to optimize the decomposition of single-qubit gates tailored to IQM hardware. Functions optimize_single_qubit_gates (circuit[, ...]) Optimize number of single-qubit gates in a trans...","content":"Transpilation tool to optimize the decomposition of single-qubit gates tailored to IQM hardware. Functions optimize_single_qubit_gates (circuit[, ...]) Optimize number of single-qubit gates in a transpiled circuit exploiting the IQM specific gate set. Classes IQMOptimizeSingleQubitGates (*args, **kwargs) Optimize the decomposition of single-qubit gates for the IQM gate set. IQMReplaceGateWithUnitaryPass (*args, **kwargs) Transpiler pass that replaces all gates with given name in a circuit with a UnitaryGate. Inheritance previous iqm.qiskit_iqm.iqm_provider.IQMProvider next iqm.qiskit_iqm.iqm_transpilation.optimize_single_qubit_gates By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.util.IQMJSONEncoder","url":"/iqm-client/api/iqm.iqm_client.util.IQMJSONEncoder.html","description":"Bases: JSONEncoder JSONEncoder that that adds support for some non-JSON datatypes Attributes Methods default (o) Implement this method in a subclass such that it returns a serializable object for o , ...","content":"Bases: JSONEncoder JSONEncoder that that adds support for some non-JSON datatypes Attributes Methods default (o) Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). Implement this method in a subclass such that it returns\\na serializable object for o , or calls the base implementation\\n(to raise a TypeError ). For example, to support arbitrary iterators, you could\\nimplement default like this: o ( Any ) – previous iqm.iqm_client.util.to_json_dict next iqm.qiskit_iqm By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.Instruction","url":"/iqm-client/api/iqm.iqm_client.models.Instruction.html","description":"Bases: BaseModel Native quantum operation instance with particular arguments and locus. This class represents a native quantum operation\\nacting on qubits , with the arguments args .\\nThe operation is d...","content":"Bases: BaseModel Native quantum operation instance with particular arguments and locus. This class represents a native quantum operation\\nacting on qubits , with the arguments args .\\nThe operation is determined by name . We currently support the following native operations: name # of qubits args description measure >= 1 key: str , feedback_key: str Measurement in the Z basis. prx 1 angle_t: float , phase_t: float Phased x-rotation gate. cc_prx 1 angle_t: float , phase_t: float , feedback_qubit: str , feedback_key: str Classically controlled PRX gate. reset >= 1 Reset the qubit(s) to \\\\(|0\\\\rangle\\\\) . cz 2 Controlled-Z gate. move 2 Move a qubit state between a qubit and a\\ncomputational resonator, as long as\\nat least one of the components is\\nin the \\\\(|0\\\\rangle\\\\) state. barrier >= 1 Execution barrier. delay >= 1 duration: float Force a delay between circuit operations. For each Instruction you may also optionally specify implementation ,\\nwhich contains the name of an implementation of the operation to use.\\nSupport for multiple implementations is currently experimental and in normal use the\\nfield should be omitted, this selects the default implementation for the operation for that locus. Measurement in the computational (Z) basis. The measurement results are the output of the circuit.\\nTakes two string arguments: key , denoting the measurement key the returned results are labeled with,\\nand feedback_key , which is only needed if the measurement result is used for classical control\\nwithin the circuit.\\nAll the measurement keys and feedback keys used in a circuit must be unique (but the two groups of\\nkeys are independent namespaces).\\nEach qubit may be measured multiple times, i.e. mid-circuit measurements are allowed. Phased x-rotation gate, i.e. an x-rotation conjugated by a z-rotation.\\nTakes two arguments, the rotation angle angle_t and the phase angle phase_t ,\\nboth measured in units of full turns ( \\\\(2\\\\pi\\\\) radians).\\nThe gate is represented in the standard computational basis by the matrix where \\\\(\\\\theta\\\\) = angle_t , \\\\(\\\\phi\\\\) = phase_t ,\\nand \\\\(X\\\\) and \\\\(Y\\\\) are Pauli matrices. Classically controlled PRX gate. Takes four arguments. angle_t and phase_t are exactly as in PRX. feedback_key is a string that identifies the measure instruction whose result controls\\nthe gate (the one that shares the feedback key). feedback_qubit is the name of the physical qubit within the measure instruction that produces the feedback.\\nIf the measurement result is 1, the PRX gate is applied. If it is 0, an identity gate of similar time\\nduration gate is applied instead.\\nThe measurement instruction must precede the classically controlled gate instruction in the quantum circuit. Resets the qubit(s) non-unitarily to the \\\\(|0\\\\rangle\\\\) state. Note Currently inherits its calibration from cc_prx and is only available when cc_prx is. Controlled-Z gate. Represented in the standard computational basis by the matrix It is symmetric wrt. the qubits it’s acting on, and takes no arguments. The MOVE operation is a unitary population exchange operation between a qubit and a resonator.\\nIts effect is only defined in the invariant subspace \\\\(S = \\\\text{span}\\\\{|00\\\\rangle, |01\\\\rangle, |10\\\\rangle\\\\}\\\\) ,\\nwhere it swaps the populations of the states \\\\(|01\\\\rangle\\\\) and \\\\(|10\\\\rangle\\\\) .\\nIts effect on the orthogonal subspace is undefined. MOVE has the following presentation in the subspace \\\\(S\\\\) : where \\\\(a\\\\) is an undefined complex phase that is canceled when the MOVE gate is applied a second time. To ensure that the state of the qubit and resonator has no overlap with \\\\(|11\\\\rangle\\\\) , it is\\nrecommended that no single qubit gates are applied to the qubit in between a\\npair of MOVE operations. Note MOVE is only available in quantum computers with the IQM Star architecture. Affects the physical execution order of the instructions elsewhere in the\\ncircuit that act on qubits spanned by the barrier.\\nIt ensures that any such instructions that succeed the barrier are only executed after\\nall such instructions that precede the barrier have been completed.\\nHence it can be used to guarantee a specific causal order for the other instructions.\\nIt takes no arguments, and has no other effect. Note One-qubit barriers will not have any effect on circuit’s compilation and execution. Higher layers\\nthat sit on top of IQM Client can make actual use of one-qubit barriers (e.g. during circuit optimization),\\ntherefore having them is allowed. Forces a delay between the preceding and following circuit operations.\\nIt can be applied to any number of qubits. Takes one argument, duration , which is the minimum\\nduration of the delay in seconds. It will be rounded up to the nearest possible duration the\\nhardware can handle. Note We can only guarantee that the delay is at least of the requested duration, due to both\\nhardware and practical constraints, but could be much more depending on the other operations\\nin the circuit. To see why, consider e.g. the circuit In this case the actual delay between the two CZ gates will be 100 ns rounded up to\\nhardware granularity, even though only 1 ns was requested for alice . Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. name name of the quantum operation implementation name of the implementation, for experimental use only qubits names of the locus components (typically qubits) the operation acts on args arguments for the operation Methods args_validator (value, info) Check argument names and types for a given instruction implementation_validator (value) Check if the implementation of the instruction is set to a non-empty string. name_validator (value) Check if the name of instruction is set to one of the supported quantum operations. qubits_validator (value, info) Check if the instruction has the correct number of qubits for its operation. name of the implementation, for experimental use only names of the locus components (typically qubits) the operation acts on arguments for the operation name of the quantum operation Check if the name of instruction is set to one of the supported quantum operations. Check if the implementation of the instruction is set to a non-empty string. Check if the instruction has the correct number of qubits for its operation. info ( ValidationInfo ) – Check argument names and types for a given instruction info ( ValidationInfo ) – A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. name ( str ) – implementation ( str | None ) – qubits ( tuple [ str , ... ] ) – args ( dict [ str , Any ] ) – previous iqm.iqm_client.models.HeraldingMode next iqm.iqm_client.models.JobParameters By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.fake_adonis","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.fake_adonis.html","description":"Fake backend for IQM’s 5-qubit Adonis architecture. Functions IQMFakeAdonis () Return IQMFakeBackend instance representing IQM's Adonis architecture. previous iqm.qiskit_iqm.fake_backends next iqm.qis...","content":"Fake backend for IQM’s 5-qubit Adonis architecture. Functions IQMFakeAdonis () Return IQMFakeBackend instance representing IQM's Adonis architecture. previous iqm.qiskit_iqm.fake_backends next iqm.qiskit_iqm.fake_backends.fake_adonis.IQMFakeAdonis By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_move_layout.IQMMoveLayout","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_move_layout.IQMMoveLayout.html","description":"Bases: TrivialLayout Create a layout that is valid on the dynamic quantum architecture of the\\ngiven IQM target. The architecture defines which gate loci are available. This class\\ntries to map the virt...","content":"Bases: TrivialLayout Create a layout that is valid on the dynamic quantum architecture of the\\ngiven IQM target. The architecture defines which gate loci are available. This class\\ntries to map the virtual/logical components of the circuit to the physical QPU components\\nof the architecture, such that the gates in the circuit can be applied on those components. This class is required because Qiskit’s basic layout algorithm assumes all connections between\\ntwo qubits have the same two-qubit gates available, which isn’t true in general. Note This version of the layout generator only works reliably with a single resonator,\\nand can only handle pure Star architecture circuits.\\nIt also assumes that a valid layout exists for the circuit that does not require SWAPs, which\\nisn’t true in general. Attributes Methods _calculate_requirements (dag) Determine the requirements for each used logical qubit in the circuit. get_initial_layout () Returns the initial layout generated by the algorithm. run (dag) Creates a valid layout for the given quantum circuit. Creates a valid layout for the given quantum circuit. dag ( DAGCircuit ) – Circuit DAG to find layout for. TranspilerError – A valid layout could not be found. Returns the initial layout generated by the algorithm. The initial layout. Layout previous iqm.qiskit_iqm.iqm_move_layout.generate_initial_layout next iqm.qiskit_iqm.iqm_naive_move_pass By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors.APITimeoutError","url":"/iqm-client/api/iqm.iqm_client.errors.APITimeoutError.html","description":"Executing a job on the server took too long. previous iqm.iqm_client.errors next iqm.iqm_client.errors.CircuitExecutionError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-0...","content":"Executing a job on the server took too long. previous iqm.iqm_client.errors next iqm.iqm_client.errors.CircuitExecutionError By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends.iqm_fake_backend.IQMFakeBackend","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.iqm_fake_backend.IQMFakeBackend.html","description":"Bases: IQMBackendBase Simulated backend that mimics the behaviour of IQM quantum computers. Can be used to perform noisy gate-level simulations of quantum circuit execution on IQM hardware. A fake bac...","content":"Bases: IQMBackendBase Simulated backend that mimics the behaviour of IQM quantum computers. Can be used to perform noisy gate-level simulations of quantum circuit execution on IQM hardware. A fake backend contains information about a specific IQM system, such as the quantum architecture (number of qubits,\\nconnectivity), the native gate set, and a noise model based on system parameters such as relaxation ( \\\\(T_1\\\\) )\\nand dephasing ( \\\\(T_2\\\\) ) times, gate infidelities, and readout errors. architecture ( QuantumArchitectureSpecification ) – Quantum architecture associated with the backend instance. error_profile ( IQMErrorProfile ) – Characteristics of a particular QPU specimen. name ( str ) – Attributes error_profile Error profile of this instance of IQM fake backend max_circuits The maximum number of circuits (or Pulse schedules) that can be run in a single job. architecture Dynamic quantum architecture of the backend instance. name Name of the backend. description Optional human-readable description. online_date Date that the backend came online. backend_version Version of the backend being provided. Methods _create_noise_model (architecture, error_profile) Builds a noise model from the attributes. _default_options () Return the default options _validate_architecture_and_error_profile (...) Verifies that the parameters of the QPU error profile match the constraints of its quantum architecture. copy_with_error_profile (new_error_profile) Return another instance of IQMFakeBackend, which has the same quantum architecture but a different error profile. run (run_input, **options) Run quantum circuits on the fake backend (by simulating them). validate_compatible_architecture (architecture) Compare a dynamic quantum architecture to the static architecture of the fake backend. Error profile of this instance of IQM fake backend Return another instance of IQMFakeBackend, which has the same quantum architecture but a different error\\nprofile. new_error_profile ( IQMErrorProfile ) – IQMFakeBackend The maximum number of circuits (or Pulse schedules) that can be\\nrun in a single job. If there is no limit this will return None Run quantum circuits on the fake backend (by simulating them). This method will run the simulation with the noise model of the fake backend.\\nValidity of the circuits is also checked. run_input ( QuantumCircuit | list [ QuantumCircuit ] ) – One or more quantum circuits to simulate on the backend. options – Any kwarg options to pass to the backend. The job object representing the run. ValueError – Empty list of circuits was provided. JobV1 Compare a dynamic quantum architecture to the static architecture of the fake backend. architecture ( DynamicQuantumArchitecture ) – dynamic quantum architecture to compare to True iff the number and names of the locus components, the component connectivity,\\nand the available operations in the DQA match the static architecture of this backend. bool previous iqm.qiskit_iqm.fake_backends.iqm_fake_backend.IQMErrorProfile next iqm.qiskit_iqm.iqm_backend By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.PRXSequence","url":"/iqm-client/api/iqm.iqm_client.models.PRXSequence.html","description":"A sequence of PRX gates. A generic PRX gate is defined by rotation angle and phase angle, Theta and Phi,\\nrespectively. alias of list [ tuple [ float , float ]] previous iqm.iqm_client.models.QubitMapp...","content":"A sequence of PRX gates. A generic PRX gate is defined by rotation angle and phase angle, Theta and Phi,\\nrespectively. alias of list [ tuple [ float , float ]] previous iqm.iqm_client.models.QubitMapping next iqm.iqm_client.models.STANDARD_DD_STRATEGY By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.transpile.Resolution","url":"/iqm-client/api/iqm.iqm_client.transpile.Resolution.html","description":"A (gate qubit, move qubit, resonator) triple that represents a resolution of a fictional\\nqubit-qubit gate. alias of tuple [ str , str , str ] previous iqm.iqm_client.transpile next iqm.iqm_client.tran...","content":"A (gate qubit, move qubit, resonator) triple that represents a resolution of a fictional\\nqubit-qubit gate. alias of tuple [ str , str , str ] previous iqm.iqm_client.transpile next iqm.iqm_client.transpile.simplify_architecture By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_transpilation.IQMReplaceGateWithUnitaryPass","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_transpilation.IQMReplaceGateWithUnitaryPass.html","description":"Bases: TransformationPass Transpiler pass that replaces all gates with given name in a circuit with a UnitaryGate. gate – The name of the gate to replace. unitary – The unitary matrix to replace the g...","content":"Bases: TransformationPass Transpiler pass that replaces all gates with given name in a circuit with a UnitaryGate. gate – The name of the gate to replace. unitary – The unitary matrix to replace the gate with. Attributes Methods run (dag) Run a pass on the DAGCircuit. Run a pass on the DAGCircuit. This is implemented by the pass developer. dag – the dag on which the pass is run. NotImplementedError – when this is left unimplemented for a pass. previous iqm.qiskit_iqm.iqm_transpilation.IQMOptimizeSingleQubitGates next iqm.qiskit_iqm.move_gate By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.iqm_provider.IQMProvider","url":"/iqm-client/api/iqm.qiskit_iqm.iqm_provider.IQMProvider.html","description":"Bases: object Provider for IQM backends. IQMProvider connects to a quantum computer through an IQM server.\\nIf the server requires user authentication, you can provide it either using environment\\nvaria...","content":"Bases: object Provider for IQM backends. IQMProvider connects to a quantum computer through an IQM server.\\nIf the server requires user authentication, you can provide it either using environment\\nvariables, or as keyword arguments to IQMProvider. The user authentication kwargs are passed\\nthrough to IQMClient as is, and are documented there. url ( str ) – URL of the IQM server (e.g. https://cocos.resonance.meetiqm.com/garnet ) Methods get_backend ([name, calibration_set_id]) An IQMBackend instance associated with this provider. An IQMBackend instance associated with this provider. name ( str | None ) – optional name of a custom facade backend calibration_set_id ( UUID | None ) – ID of the calibration set used to create the transpilation target of the backend.\\nIf None, the server default calibration set will be used. IQMBackend | IQMFacadeBackend previous iqm.qiskit_iqm.iqm_provider.IQMFacadeBackend next iqm.qiskit_iqm.iqm_transpilation By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.models.ClientLibrary","url":"/iqm-client/api/iqm.iqm_client.models.ClientLibrary.html","description":"Bases: BaseModel Represents a client library with its metadata. name ( str ) – display name of the client library. package_name ( str | None ) – name of the package as published in package repositorie...","content":"Bases: BaseModel Represents a client library with its metadata. name ( str ) – display name of the client library. package_name ( str | None ) – name of the package as published in package repositories. repo_url ( str | None ) – URL to the source code repository. package_url ( str | None ) – URL to the package in the package repository. min ( str ) – minimum supported version. max ( str ) – maximum supported version. Attributes model_computed_fields A dictionary of computed field names and their corresponding ComputedFieldInfo objects. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. model_fields Metadata about the fields defined on the model, mapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. name  package_name  repo_url  package_url  min  max  Methods A dictionary of computed field names and their corresponding ComputedFieldInfo objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Metadata about the fields defined on the model,\\nmapping of field names to [ FieldInfo ][pydantic.fields.FieldInfo] objects. This replaces Model.__fields__ from Pydantic V1. previous iqm.iqm_client.models.CircuitCompilationOptions next iqm.iqm_client.models.Counts By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.transpile.transpile_insert_moves","url":"/iqm-client/api/iqm.iqm_client.transpile.transpile_insert_moves.html","description":"Convert a simplified architecture circuit into an equivalent Star architecture circuit with\\nresonators and MOVE gates, if needed. In the typical use case circuit has been transpiled to a simplified ar...","content":"Convert a simplified architecture circuit into an equivalent Star architecture circuit with\\nresonators and MOVE gates, if needed. In the typical use case circuit has been transpiled to a simplified architecture\\nwhere the resonators have been abstracted away, and this function converts it into\\nthe corresponding Star architecture circuit. It can also handle the case where circuit already contains MOVE gates and resonators,\\nwhich are treated according to existing_moves , followed by the conversion\\nof the two-qubit gates that are not supported by the Star architecture. The function does nothing if arch does not support MOVE gates. circuit ( Circuit ) – The circuit to convert. arch ( DynamicQuantumArchitecture ) – Real Star architecture of the target device. existing_moves ( ExistingMoveHandlingOptions ) – Specifies how to deal with existing MOVE instructions in circuit , if any. qubit_mapping ( dict [ str , str ] | None ) – Mapping of logical qubit names to physical qubit names.\\nCan be set to None if circuit already uses physical qubit names. restore_states ( bool ) – Iff True, all qubit states held in resonators are returned to their qubits\\nat the end of the circuit (i.e. all MOVE sandwiches are closed), even when there\\nis no computational reason to do so. Equivalent Star architecture circuit with MOVEs and resonators added. Circuit previous iqm.iqm_client.transpile.simplify_architecture next iqm.iqm_client.transpile.transpile_remove_moves By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.examples.resonance_example","url":"/iqm-client/api/iqm.qiskit_iqm.examples.resonance_example.html","description":"This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on\\nResonance, the IQM quantum cloud service.\\nSee the Qiskit on IQM user guide for instructions: https://d...","content":"This file is an example of using Qiskit on IQM to run a simple but non-trivial quantum circuit on\\nResonance, the IQM quantum cloud service.\\nSee the Qiskit on IQM user guide for instructions: https://docs.meetiqm.com/iqm-client/user_guide_qiskit.html Functions resonance_example (server_url, api_token) Run a circuit via IQM Resonance. previous iqm.qiskit_iqm.examples.bell_measure.bell_measure next iqm.qiskit_iqm.examples.resonance_example.resonance_example By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyTrustExistingMovesPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyTrustExistingMovesPlugin.html","description":"Bases: MoveGateRoutingPlugin Plugin class for MoveGate routing without single qubit gate optimization\\nwhere existing moves are not checked. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateR...","content":"Bases: MoveGateRoutingPlugin Plugin class for MoveGate routing without single qubit gate optimization\\nwhere existing moves are not checked. Methods previous iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingOnlyRemoveExistingMovesPlugin next iqm.qiskit_iqm.transpiler_plugins.MoveGateRoutingPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.authentication.TokenManager","url":"/iqm-client/api/iqm.iqm_client.authentication.TokenManager.html","description":"Bases: object TokenManager manages the access token required for user authentication. token ( str | None ) – Long-lived IQM token in plain text format tokens_file ( str | None ) – Path to a tokens fil...","content":"Bases: object TokenManager manages the access token required for user authentication. token ( str | None ) – Long-lived IQM token in plain text format tokens_file ( str | None ) – Path to a tokens file used for authentication auth_server_url ( str | None ) – Base URL of the authentication server username ( str | None ) – Username to log in to authentication server password ( str | None ) – Password to log in to authentication server The parameters can also be read from the environment variables IQM_TOKEN, IQM_TOKENS_FILE,\\nIQM_AUTH_SERVER, IQM_AUTH_USERNAME, IQM_AUTH_PASSWORD. Environment variables can not be\\nmixed with initialisation arguments. All parameters must come from the same source. Methods close () Close the configured token provider. get_bearer_token ([retries]) Returns a valid bearer token, or None if no user authentication has been configured. time_left_seconds (token) Check how much time is left until the token expires. Check how much time is left until the token expires. Time left on token in seconds. token ( Any ) – int Returns a valid bearer token, or None if no user authentication has been configured. ClientAuthenticationError – getting the token failed retries ( int ) – str | None Close the configured token provider. True if closing was successful ClientAuthenticationError – closing failed bool previous iqm.iqm_client.authentication.TokenClient next iqm.iqm_client.authentication.TokenProviderInterface By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.fake_backends","url":"/iqm-client/api/iqm.qiskit_iqm.fake_backends.html","description":"Fake backends for simulating IQM quantum computers. Subpackages and modules fake_adonis Fake backend for IQM's 5-qubit Adonis architecture. fake_aphrodite Fake (i.e. simulated) backend for IQM's 54-qu...","content":"Fake backends for simulating IQM quantum computers. Subpackages and modules fake_adonis Fake backend for IQM's 5-qubit Adonis architecture. fake_aphrodite Fake (i.e. simulated) backend for IQM's 54-qubit Aphrodite architecture. fake_apollo Fake (i.e. simulated) backend for IQM's 20-qubit Apollo architecture. fake_deneb Fake backend for IQM's 6-qubit Deneb architecture. fake_garnet Fake (i.e. simulated) backend for IQM's 20-qubit Garnet architecture. iqm_fake_backend Error profile and fake backend base class for simulating IQM quantum computers. previous iqm.qiskit_iqm.examples.transpile_example.transpile_example next iqm.qiskit_iqm.fake_backends.fake_adonis By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.iqm_client.errors.JobAbortionError","url":"/iqm-client/api/iqm.iqm_client.errors.JobAbortionError.html","description":"Job abortion failed. previous iqm.iqm_client.errors.EndpointRequestError next iqm.iqm_client.iqm_client By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30....","content":"Job abortion failed. previous iqm.iqm_client.errors.EndpointRequestError next iqm.iqm_client.iqm_client By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-client","title":"iqm.qiskit_iqm.transpiler_plugins.IQMDefaultSchedulingPlugin","url":"/iqm-client/api/iqm.qiskit_iqm.transpiler_plugins.IQMDefaultSchedulingPlugin.html","description":"Bases: IQMSchedulingPlugin Plugin class for IQM single qubit gate optimization and MoveGate routing as a scheduling stage. Methods pass_manager (pass_manager_config[, ...]) Build scheduling stage Pass...","content":"Bases: IQMSchedulingPlugin Plugin class for IQM single qubit gate optimization and MoveGate routing as a scheduling stage. Methods pass_manager (pass_manager_config[, ...]) Build scheduling stage PassManager Build scheduling stage PassManager pass_manager_config ( PassManagerConfig ) – optimization_level ( int | None ) – PassManager previous iqm.qiskit_iqm.transpiler_plugins next iqm.qiskit_iqm.transpiler_plugins.IQMSchedulingPlugin By IQM client developers © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"IQM Data Definitions","url":"/iqm-data-definitions/index.html","description":"2.10 2025-03-30 Low-level data prototypes shared across the control software of IQM quantum computers. Index Module Index Search Page next API Reference By IQM © Copyright 2021-2025, IQM. Last updated...","content":"2.10 2025-03-30 Low-level data prototypes shared across the control software of IQM quantum computers. Index Module Index Search Page next API Reference By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"API Reference","url":"/iqm-data-definitions/API.html","description":"The module iqm.data_definitions contains autogenerated Python code for Protobuf prototypes.\\nThe prototypes are used in client–server communication between IQM Station Control and it’s clients.\\nUsers a...","content":"The module iqm.data_definitions contains autogenerated Python code for Protobuf prototypes.\\nThe prototypes are used in client–server communication between IQM Station Control and it’s clients.\\nUsers are not expected to interact with this module directly, except when integrating custom client libraries against\\nIQM’s QCCSW. The module iqm.models contains the Python-native representations of the some of the prototypes.\\nUsers of iqm-pulse might encounter these. iqm.models Python-native representation of the protos in iqm.data_definitions , recognized by IQM Station Control. iqm.data_definitions  Note The API documentation of iqm.data_definitions is generated automatically based on the raw .proto files\\nthat define the cross-platform communication protocols.\\nAs such, the minimal HTML documentation is missing the typical docstrings.\\nHowever, the Python module iqm.data_definitions includes Python stub files ( .pyi ), which include\\nproper type hints and docstrings, so they are displayed in IDEs.\\nFurthermore, the HTML documentation of the _pb2 modules include the .proto source files,\\nincluding docstrings, so that low-level integrators can use them generate compatible code for their chosen language. previous IQM Data Definitions next models By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ComplexIntegration","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.ComplexIntegration.html","description":"Bases: AcquisitionMethod Perform a weighted integration of the IQ raw signal, resulting in a complex number. Module: iqm.models.playlist.instructions Attributes weights Integration weights. label Iden...","content":"Bases: AcquisitionMethod Perform a weighted integration of the IQ raw signal, resulting in a complex number. Module: iqm.models.playlist.instructions Attributes weights Integration weights. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) – delay_samples ( int ) – weights ( IQPulse ) – Integration weights. previous AcquisitionMethod next ConditionalInstruction By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"SweepRequest","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.sweep_request_pb2.SweepRequest.html","description":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.sweep_request_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous RunMetadata next task_service_pb2 By IQM © C...","content":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.sweep_request_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous RunMetadata next task_service_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"v2","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v2.html","description":"Full path: iqm.data_definitions.station_control.v2 Subpackages and modules run_definition_pb2 Generated protocol buffer code. task_service_pb2 Generated protocol buffer code. previous SweepTaskRequest...","content":"Full path: iqm.data_definitions.station_control.v2 Subpackages and modules run_definition_pb2 Generated protocol buffer code. task_service_pb2 Generated protocol buffer code. previous SweepTaskRequest next run_definition_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"GaussianDerivative","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.GaussianDerivative.html","description":"Bases: Waveform Derivative of a gaussian pulse. Normalized so that values are in \\\\([-1, 1]\\\\) .\\nThe normalization factor is \\\\(\\\\sigma \\\\: \\\\sqrt{e}\\\\) . where \\\\(c\\\\) is center_offset , and \\\\(\\\\sigma\\\\) is sig...","content":"Bases: Waveform Derivative of a gaussian pulse. Normalized so that values are in \\\\([-1, 1]\\\\) .\\nThe normalization factor is \\\\(\\\\sigma \\\\: \\\\sqrt{e}\\\\) . where \\\\(c\\\\) is center_offset , and \\\\(\\\\sigma\\\\) is sigma . sigma ( float ) – gaussian standard deviation center_offset ( float ) – center offset n_samples ( int ) – Module: iqm.models.playlist.waveforms Attributes center_offset  sigma  n_samples Requested number of samples for the waveform. Methods previous Gaussian next GaussianSmoothedSquare By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Waveform","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.Waveform.html","description":"Bases: object Describes the normalized shape of a real-valued control pulse. The shape is described by a function \\\\(f: \\\\mathbb{R} \\\\to [-1, 1]\\\\) that comes with an implicit\\nsampling window. \\\\(f\\\\) maps ...","content":"Bases: object Describes the normalized shape of a real-valued control pulse. The shape is described by a function \\\\(f: \\\\mathbb{R} \\\\to [-1, 1]\\\\) that comes with an implicit\\nsampling window. \\\\(f\\\\) maps time (measured in units of the sampling window duration and relative\\nto its center point) to the value of the pulse at that time. Each Waveform subclass may have attributes that affect its shape. All time-like attributes are\\nmeasured in units of the sampling window duration. The station method non_timelike_attributes may be used to define non-timelike attributes and their units (in addition to “s” , “Hz” has a special\\nbehaviour in that such attributes will be converted to the units of the inverse of duration). Providing type\\nhints to the waveform attributes is mandatory, as they are used in parsing the information for the GateImplementations . Supported scalar attribute types are: int , float , complex , str , bool .\\nIn addition, list[<scalar type>] is supported for all the aforementioned scalar types, and also numpy.ndarray , in which case it is interpreted to contain complex numbers. When the Waveform is used by an instrument it is typically sampled using the sample() method, which\\nconverts it into an array of n_samples equidistant samples, generated using the midpoint method,\\nby evaluating the function \\\\(f(t)\\\\) inside the sampling window \\\\(t \\\\in [-1/2, 1/2]\\\\) .\\nThe instruments will discretize the values of the samples to a finite, instrument-dependent resolution,\\ntypically 14–16 bits. Usually, it is sufficient for Waveforms to describe normalized waveforms (i.e. using the full\\nvalue range \\\\([-1, 1]\\\\) ), not including a scaling prefactor in the defining expression.\\nInstead, the scaling should be specified as a parameter of the Instruction using the Waveform\\n(e.g. IQPulse , RealPulse ), thus allowing compilers to more efficiently\\nre-use waveforms and utilize the available hardware support to perform such re-scaling in real time. Module: iqm.models.playlist.waveforms Attributes n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. sample Sample the waveform. n_samples ( int ) – Requested number of samples for the waveform. May be different from the duration (in samples) of the\\nparent Instruction. Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\\nBy default all the waveform attributes are “timelike” (the unit for their calibration data is s).\\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\\nconsisting of multiple terms, or frequency-like (calibration data has the unit ‘Hz’).\\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\\nwindow duration. dict [ str , str ] Sample the waveform. Contains the boilerplate code for determining the sample coordinates,\\nthe actual sampling happens in _sample() . self sampled in the window [-1/2, 1/2] ndarray previous TruncatedGaussianSmoothedSquare next data_definitions By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Schedule","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.Schedule.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message Bases: Message , Message previous Samples next TruncatedGaussian By...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message Bases: Message , Message previous Samples next TruncatedGaussian By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"CosineRiseFall","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.CosineRiseFall.html","description":"Bases: Waveform Waveform that has a sinusoidal rise and fall, and a constant part in between. where \\\\(c\\\\) is center_offset , \\\\(r\\\\) is rise_time , and \\\\(p\\\\) is the plateau width,\\ncalculated via \\\\(p :=\\\\...","content":"Bases: Waveform Waveform that has a sinusoidal rise and fall, and a constant part in between. where \\\\(c\\\\) is center_offset , \\\\(r\\\\) is rise_time , and \\\\(p\\\\) is the plateau width,\\ncalculated via \\\\(p :=\\\\) full_width - 2 * rise_time . Its values are in \\\\([0, 1]\\\\) . full_width ( float ) – Duration of the support of the pulse, >= 2 * rise_time . rise_time ( float ) – Duration of the sinusoidal rise (and fall) part of the waveform, >= 0. center_offset ( float ) – The waveform is centered at this offset from the midpoint of the sampling window. n_samples ( int ) – Module: iqm.models.playlist.waveforms Attributes center_offset  full_width  rise_time  n_samples Requested number of samples for the waveform. Methods previous Constant next Gaussian By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"data_definitions","url":"/iqm-data-definitions/api/iqm.data_definitions.html","description":"Full path: iqm.data_definitions Subpackages and modules common  station_control  previous Waveform next common By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30....","content":"Full path: iqm.data_definitions Subpackages and modules common  station_control  previous Waveform next common By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ParallelSweep","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.sweep_pb2.ParallelSweep.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.sweep_pb2 Attributes DESCRIPTOR  Methods previous CartesianSweep next SingleParameterSweep By IQM © Copyright 2021-2025, IQM. Last updat...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.sweep_pb2 Attributes DESCRIPTOR  Methods previous CartesianSweep next SingleParameterSweep By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"RealPulse","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.RealPulse.html","description":"Bases: object Class for Real pulses. Contains a waveform object describing the waveform shape. Module: iqm.models.playlist.instructions Attributes wave  scale  Methods wave ( Waveform ) – scale ( floa...","content":"Bases: object Class for Real pulses. Contains a waveform object describing the waveform shape. Module: iqm.models.playlist.instructions Attributes wave  scale  Methods wave ( Waveform ) – scale ( float ) – previous ReadoutTrigger next ThresholdStateDiscrimination By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"segment","url":"/iqm-data-definitions/api/iqm.models.playlist.segment.html","description":"Segment class definitions Full path: iqm.models.playlist.segment Classes Segment Contains the instructions to be executed in one segment for each channel. previous Playlist next Segment By IQM © Copyr...","content":"Segment class definitions Full path: iqm.models.playlist.segment Classes Segment Contains the instructions to be executed in one segment for each channel. previous Playlist next Segment By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"RunMetadata","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.sweep_request_pb2.RunMetadata.html","description":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.sweep_request_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous sweep_request_pb2 next SweepRequest By IQM ©...","content":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.sweep_request_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous sweep_request_pb2 next SweepRequest By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Samples","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.Samples.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous RealPulse next Schedule By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous RealPulse next Schedule By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Value","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.struct_pb2.Value.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.struct_pb2 Attributes DESCRIPTOR  Methods previous Struct next sweep_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30....","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.struct_pb2 Attributes DESCRIPTOR  Methods previous Struct next sweep_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Float64Array","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.observation_pb2.Float64Array.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous Complex128Array next Int64Array By IQM © Copyright 2021-2025, IQM. Last updated ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous Complex128Array next Int64Array By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Wait","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.Wait.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous VirtualRZ next Waveform By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous VirtualRZ next Waveform By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Int64Sequence","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.Int64Sequence.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Float64Sequence next Sequence By IQM © Copyright 2021-2025, IQM. Last updated on ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Float64Sequence next Sequence By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Int64Array","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.observation_pb2.Int64Array.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous Float64Array next ObservationUncertainty By IQM © Copyright 2021-2025, IQM. Last...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous Float64Array next ObservationUncertainty By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"GaussianDerivative","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.GaussianDerivative.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Gaussian next GaussianSmoothedSquare By IQM © Copyright 2021-2025, IQM. Last update...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Gaussian next GaussianSmoothedSquare By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Complex128Array","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.observation_pb2.Complex128Array.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous observation_pb2 next Float64Array By IQM © Copyright 2021-2025, IQM. Last update...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous observation_pb2 next Float64Array By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"sweep_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.sweep_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.sweep_pb2 Classes CartesianSweep  ParallelSweep  SingleParameterSweep  previous Value next CartesianSweep By IQM © Copyright 2...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.sweep_pb2 Classes CartesianSweep  ParallelSweep  SingleParameterSweep  previous Value next CartesianSweep By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"TruncatedGaussianDerivative","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.TruncatedGaussianDerivative.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous TruncatedGaussian next TruncatedGaussianSmoothedSquare By IQM © Copyright 2021-2025...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous TruncatedGaussian next TruncatedGaussianSmoothedSquare By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"IQPulse","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.IQPulse.html","description":"Bases: object Class for IQ Pulses. Contains waveforms for both in-phase and quadrature waveforms. Module: iqm.models.playlist.instructions Attributes modulation_frequency  phase  phase_increment  wave...","content":"Bases: object Class for IQ Pulses. Contains waveforms for both in-phase and quadrature waveforms. Module: iqm.models.playlist.instructions Attributes modulation_frequency  phase  phase_increment  wave_i  wave_q  scale_i  scale_q  Methods wave_i ( Waveform ) – wave_q ( Waveform ) – scale_i ( float ) – scale_q ( float ) – phase ( float ) – modulation_frequency ( float ) – phase_increment ( float ) – previous ConditionalInstruction next Instruction By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"iqm.models.playlist.waveforms.register_canonical_waveform","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.register_canonical_waveform.html","description":"Decorator for making a Waveform into a canonical waveform. cls ( type [ Waveform ] ) – type previous iqm.models.playlist.waveforms.is_canonical next iqm.models.playlist.waveforms.to_canonical By IQM ©...","content":"Decorator for making a Waveform into a canonical waveform. cls ( type [ Waveform ] ) – type previous iqm.models.playlist.waveforms.is_canonical next iqm.models.playlist.waveforms.to_canonical By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ObservationUncertainty","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.observation_pb2.ObservationUncertainty.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous Int64Array next ObservationValue By IQM © Copyright 2021-2025, IQM. Last updated...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous Int64Array next ObservationValue By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"VirtualRZ","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.VirtualRZ.html","description":"Bases: object Class for Virtual Rz. Module: iqm.models.playlist.instructions Attributes phase_increment  Methods phase_increment ( float ) – previous TimeTrace next Wait By IQM © Copyright 2021-2025, ...","content":"Bases: object Class for Virtual Rz. Module: iqm.models.playlist.instructions Attributes phase_increment  Methods phase_increment ( float ) – previous TimeTrace next Wait By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"NpyArray","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.spot_result_pb2.NpyArray.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.spot_result_pb2 Attributes DESCRIPTOR  Methods previous spot_result_pb2 next NumcodecsConfig By IQM © Copyright 2021-2025, IQM. Last upd...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.spot_result_pb2 Attributes DESCRIPTOR  Methods previous spot_result_pb2 next NumcodecsConfig By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"playlist","url":"/iqm-data-definitions/api/iqm.models.playlist.playlist.html","description":"Implements the new data structure of a playlist. Full path: iqm.models.playlist.playlist Classes Playlist Information required to build a batch of programs for AWGs and readout instruments. previous W...","content":"Implements the new data structure of a playlist. Full path: iqm.models.playlist.playlist Classes Playlist Information required to build a batch of programs for AWGs and readout instruments. previous Wait next Playlist By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"IQPulse","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.IQPulse.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous IQChannelConfig next Instruction By IQM © Copyright 2021-2025, IQM. Last updated on...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous IQChannelConfig next Instruction By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"NumcodecsConfig","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.spot_result_pb2.NumcodecsConfig.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.spot_result_pb2 Attributes DESCRIPTOR  Methods previous NpyArray next SpotResultValue By IQM © Copyright 2021-2025, IQM. Last updated on...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.spot_result_pb2 Attributes DESCRIPTOR  Methods previous NpyArray next SpotResultValue By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Gaussian","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.Gaussian.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous CosineRiseFall next GaussianDerivative By IQM © Copyright 2021-2025, IQM. Last upda...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous CosineRiseFall next GaussianDerivative By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Complex128","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.Complex128.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous BoolSequence next Complex128Sequence By IQM © Copyright 2021-2025, IQM. Last upda...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous BoolSequence next Complex128Sequence By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Segment","url":"/iqm-data-definitions/api/iqm.models.playlist.segment.Segment.html","description":"Bases: object Contains the instructions to be executed in one segment for each channel. instructions ( dict [ str , list [ int ] ] ) – dict containing controller name as the key and the list of Instru...","content":"Bases: object Contains the instructions to be executed in one segment for each channel. instructions ( dict [ str , list [ int ] ] ) – dict containing controller name as the key and the list of Instruction indices to be executed value. ( as the ) – Module: iqm.models.playlist.segment Attributes instructions  Methods add_to_segment Adds an instruction to the segment for a specific channel. Adds an instruction to the segment for a specific channel. Also calls the add_instruction of the channel\\nfor adding the instruction to the channels waveform map. channel_description ( ChannelDescription ) – The target ChannelDescription object instruction ( Instruction ) – The instruction to be added previous segment next waveforms By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"SweepTaskRequest","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.task_service_pb2.SweepTaskRequest.html","description":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.task_service_pb2 Attributes DESCRIPTOR  Methods previous SweepResultsResponse next v2 By IQM © Copyright 2021-2025, IQM. Last u...","content":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.task_service_pb2 Attributes DESCRIPTOR  Methods previous SweepResultsResponse next v2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ObservationValue","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.observation_pb2.ObservationValue.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous ObservationUncertainty next parameter_pb2 By IQM © Copyright 2021-2025, IQM. Las...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.observation_pb2 Attributes DESCRIPTOR  Methods previous ObservationUncertainty next parameter_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ChannelPropertyEntry","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.channel_properties_pb2.ChannelPropertyEntry.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods previous ChannelPropertyDictionary next ReadoutProperties By IQM © Copyright 2021-...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods previous ChannelPropertyDictionary next ReadoutProperties By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"MultiplexedIQPulse","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.MultiplexedIQPulse.html","description":"Bases: object Instruction to simultaneously play multiple IQ pulses. Each component pulse entry can be added with arbitrary delay from the beginning of this instruction.\\nWhere outside the duration of ...","content":"Bases: object Instruction to simultaneously play multiple IQ pulses. Each component pulse entry can be added with arbitrary delay from the beginning of this instruction.\\nWhere outside the duration of the MultiplexedIQPulse, the pulse entries are truncated.\\nWhere overlapping, samples of multiple pulse entries are summed.\\nWhere the interval of a MultiplexedIQPulse does not overlap with any of its entry pulse, its samples will be 0. Module: iqm.models.playlist.instructions Attributes entries Pairs of instruction and offset . Methods entries ( tuple [ tuple [ Instruction , int ] , ... ] ) – Pairs of instruction and offset .\\nInstruction should be an IQPulse. offset is the number of samples the pulse is delayed from the beginning of the instruction.\\nIt has no granularity constraints. Negative values are allowed, but beginning will be truncated. previous Instruction next MultiplexedRealPulse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"MultiplexedRealPulse","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.MultiplexedRealPulse.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous MultiplexedIQPulse next Playlist By IQM © Copyright 2021-2...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous MultiplexedIQPulse next Playlist By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"AWGProperties","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.channel_properties_pb2.AWGProperties.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods previous channel_properties_pb2 next ChannelProperties By IQM © Copyright 2021-202...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods previous channel_properties_pb2 next ChannelProperties By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"GaussianSmoothedSquare","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.GaussianSmoothedSquare.html","description":"Bases: Waveform Convolution of a square pulse and a gaussian pulse. One can think of it as a square pulse smoothed with a gaussian one, or vice versa. where \\\\(\\\\text{erf}\\\\) is the error function, \\\\(c\\\\)...","content":"Bases: Waveform Convolution of a square pulse and a gaussian pulse. One can think of it as a square pulse smoothed with a gaussian one, or vice versa. where \\\\(\\\\text{erf}\\\\) is the error function, \\\\(c\\\\) is center_offset , \\\\(s\\\\) is square_width , and \\\\(\\\\sigma\\\\) is gaussian_sigma . Its values are in \\\\((0, 1)\\\\) . square_width ( float ) – square pulse width gaussian_sigma ( float ) – gaussian pulse standard deviation center_offset ( float ) – The waveform is centered at this offset from the midpoint of the sampling window. n_samples ( int ) – Module: iqm.models.playlist.waveforms Attributes center_offset  square_width  gaussian_sigma  n_samples Requested number of samples for the waveform. Methods previous GaussianDerivative next Samples By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"RealChannelConfig","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.RealChannelConfig.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ReadoutTrigger next RealPulse By IQM © Copyright 2021-2025, IQM. Last updated on 20...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ReadoutTrigger next RealPulse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"TruncatedGaussianSmoothedSquare","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.TruncatedGaussianSmoothedSquare.html","description":"Bases: Waveform Convolution of a square pulse and a gaussian pulse, offset and truncated so that it has finite support. One can think of it as a square pulse smoothed with a gaussian one, or vice vers...","content":"Bases: Waveform Convolution of a square pulse and a gaussian pulse, offset and truncated so that it has finite support. One can think of it as a square pulse smoothed with a gaussian one, or vice versa.\\nThe decaying tails are removed by offsetting, truncating, and then rescaling the pulse slightly,\\nso that the resulting waveform is zero where the original waveform reaches the threshold level, and beyond, while\\nstill reaching the same maximal pulse amplitude.\\nCurrently, the threshold is fixed at \\\\(g_0 = 0.003\\\\) . where \\\\(\\\\text{erf}\\\\) is the error function, \\\\(c\\\\) is center_offset , \\\\(w\\\\) is the\\nsquare width, and \\\\(\\\\sigma\\\\) is the gaussian standard deviation. We set \\\\(w :=\\\\) full_width - rise_time \\\\(\\\\sigma :=\\\\) rise_time \\\\(/ (\\\\sqrt{8} \\\\: \\\\text{erf}^{-1}(1 - 2 g_0))\\\\) The cutoff time \\\\(t_c = c - w / 2 -\\\\) rise_time \\\\(/ 2\\\\) marks the start of the rising segment.\\nThe waveform after offsetting, truncating and rescaling is given by where \\\\(g_0\\\\) is the threshold level for the truncation.\\nWe have \\\\(f(t_c) \\\\approx 0\\\\) , and the approximation is good if \\\\(g_0 < 0.1\\\\) . The values of the waveform are in \\\\([0, 1]\\\\) . full_width ( float ) – Duration of the support of the pulse, from start of the rising to the end of the falling segment. rise_time ( float ) – Duration of the rising and falling segments. center_offset ( float ) – The waveform is centered at this offset from the midpoint of the sampling window. n_samples ( int ) – Module: iqm.models.playlist.waveforms Attributes center_offset  full_width  rise_time  n_samples Requested number of samples for the waveform. Methods previous TruncatedGaussianDerivative next Waveform By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Playlist","url":"/iqm-data-definitions/api/iqm.models.playlist.playlist.Playlist.html","description":"Bases: object Information required to build a batch of programs for AWGs and readout instruments. Consists of a number of Segment s, executed in a sequence, and\\ninformation about the properties of the...","content":"Bases: object Information required to build a batch of programs for AWGs and readout instruments. Consists of a number of Segment s, executed in a sequence, and\\ninformation about the properties of the control and readout channels used\\nin the Segments, as well as Instruction and Waveform tables. This class implements the new data structure that contains all the data necessary\\nfor an experiment to execute. Schedule contains information of all the channels used as\\nwell as the instruction execution schedule. channel_descriptions ( dict [ str , ChannelDescription ] ) – Controller name mapped to channel and channel specific instruction\\nand waveform data. segments ( list [ Segment ] ) – Contains all the segments in the order of execution. Module: iqm.models.playlist.playlist Attributes channel_descriptions  segments  Methods add_channel Adds a new channel to the Schedule. Adds a new channel to the Schedule. new_channel ( ChannelDescription ) – channel to add ValueError – channel with that name already exists, and has different properties None previous playlist next segment By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"IQChannelConfig","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.IQChannelConfig.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous GaussianSmoothedSquare next IQPulse By IQM © Copyright 2021-2025, IQM. Last updated...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous GaussianSmoothedSquare next IQPulse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"data_types_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.data_types_pb2 Classes Array  Arrays  BoolSequence  Complex128  Complex128Sequence  Datum  Float64Sequence  Int64Sequence  Seq...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.data_types_pb2 Classes Array  Arrays  BoolSequence  Complex128  Complex128Sequence  Datum  Float64Sequence  Int64Sequence  Sequence  StringSequence  previous ReadoutProperties next Array By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"RunDefinition","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v2.run_definition_pb2.RunDefinition.html","description":"Bases: Message , Message Module: iqm.data_definitions.station_control.v2.run_definition_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous run_definition_pb2 next task_service_pb2 By...","content":"Bases: Message , Message Module: iqm.data_definitions.station_control.v2.run_definition_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous run_definition_pb2 next task_service_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"RealPulse","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.RealPulse.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous RealChannelConfig next Samples By IQM © Copyright 2021-2025, IQM. Last updated on 2...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous RealChannelConfig next Samples By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"TruncatedGaussian","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.TruncatedGaussian.html","description":"Bases: Waveform Gaussian pulse, where the decaying tails are removed by offsetting, truncating, and then rescaling the pulse\\nslightly, so that the resulting waveform is zero where the original wavefor...","content":"Bases: Waveform Gaussian pulse, where the decaying tails are removed by offsetting, truncating, and then rescaling the pulse\\nslightly, so that the resulting waveform is zero where the original waveform reaches the threshold level, and\\nbeyond, while still reaching the same maximal pulse amplitude.  Currently, the threshold is fixed at \\\\(g_0 = 0.003\\\\) . where \\\\(c\\\\) is center_offset , and \\\\(\\\\sigma\\\\) is calculated via \\\\(\\\\sigma :=\\\\) full_width \\\\(/ \\\\sqrt{8 \\\\text{ln}(1/g_0)}\\\\) . The waveform after offsetting, truncating and rescaling is given by where \\\\(g_0\\\\) is the threshold level for the truncation. full_width ( float ) – Duration of the support of the pulse, >= 0. center_offset ( float ) – The waveform is centered at this offset from the midpoint of the sampling window. n_samples ( int ) – Module: iqm.models.playlist.waveforms Attributes center_offset  full_width  n_samples Requested number of samples for the waveform. Methods previous Samples next TruncatedGaussianDerivative By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"TruncatedGaussianDerivative","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.TruncatedGaussianDerivative.html","description":"Bases: Waveform Derivative of a gaussian pulse, where the decaying tails are removed by offsetting, truncating, and then\\nrescaling the pulse slightly, so that the resulting waveform is zero where the ...","content":"Bases: Waveform Derivative of a gaussian pulse, where the decaying tails are removed by offsetting, truncating, and then\\nrescaling the pulse slightly, so that the resulting waveform is zero where the original waveform reaches the\\nthreshold level, and beyond, while still reaching the same maximal pulse amplitude. Currently, the threshold is\\nfixed at \\\\(g_0 = 0.003\\\\) . Normalized so that values are in \\\\([-1, 1]\\\\) .\\nThe normalization factor is \\\\(\\\\sigma \\\\: \\\\sqrt{e}\\\\) . where \\\\(c\\\\) is center_offset , and \\\\(\\\\sigma\\\\) is calculated via \\\\(\\\\sigma :=\\\\) full_width \\\\(/ \\\\sqrt{8 \\\\text{ln}(1/g_0)}\\\\) . The waveform after offsetting, truncating and rescaling is given by where \\\\(g_0\\\\) is the threshold level for the truncation. full_width ( float ) – Duration of the support of the pulse, >= 0. center_offset ( float ) – The waveform is centered at this offset from the midpoint of the sampling window. n_samples ( int ) – Module: iqm.models.playlist.waveforms Attributes center_offset  full_width  n_samples Requested number of samples for the waveform. Methods previous TruncatedGaussian next TruncatedGaussianSmoothedSquare By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"v1","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.html","description":"Full path: iqm.data_definitions.station_control.v1 Subpackages and modules run_definition_pb2 Generated protocol buffer code. sweep_request_pb2 Generated protocol buffer code. task_service_pb2 Generat...","content":"Full path: iqm.data_definitions.station_control.v1 Subpackages and modules run_definition_pb2 Generated protocol buffer code. sweep_request_pb2 Generated protocol buffer code. task_service_pb2 Generated protocol buffer code. previous station_control next run_definition_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"SettingNode","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.setting_pb2.SettingNode.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.setting_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message Bases: Message , Message Bases: Message , Message previous setting_p...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.setting_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message Bases: Message , Message Bases: Message , Message previous setting_pb2 next spot_result_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Struct","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.struct_pb2.Struct.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.struct_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous ListValue next Value By IQM © Copyright 2021-2025, IQM. Last...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.struct_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous ListValue next Value By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ThresholdStateDiscrimination","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.ThresholdStateDiscrimination.html","description":"Bases: ComplexIntegration Perform a weighted integration of the IQ raw signal and compares the real part of the result against a\\nthreshold value, resulting in a single bit. Module: iqm.models.playlist...","content":"Bases: ComplexIntegration Perform a weighted integration of the IQ raw signal and compares the real part of the result against a\\nthreshold value, resulting in a single bit. Module: iqm.models.playlist.instructions Attributes feedback_signal_label In fast feedback routing, the transmitted signals are associated with this label. threshold The real part of the integration result is compared against this. weights Integration weights. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) – delay_samples ( int ) – weights ( IQPulse ) – threshold ( float ) – feedback_signal_label ( str ) – The real part of the integration result is compared against this. In fast feedback routing, the transmitted signals are associated with this label.\\nConditionalInstructions whose “condition” field has the string value of feedback_signal_label will receive the signal from this ThresholdStateDiscrimination.\\nEmpty string (default) means the signal is not routed anywhere.\\nThe same feedback_signal_label may not be used multiple times within the same ReadoutTrigger.\\nThe same feedback_signal_label can be used in different ReadoutTriggers and different segments. previous RealPulse next TimeTrace By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Arrays","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.Arrays.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Array next BoolSequence By IQM © Copyright 2021-2025, IQM. Last updated on 2025-0...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Array next BoolSequence By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Float64Sequence","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.Float64Sequence.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Datum next Int64Sequence By IQM © Copyright 2021-2025, IQM. Last updated on 2025-...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Datum next Int64Sequence By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Instruction","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.Instruction.html","description":"Bases: Generic [ Operation ] Wrapper class for Instructions. Module: iqm.models.playlist.instructions Attributes duration_samples  operation  Methods duration_samples ( int ) – operation ( Operation )...","content":"Bases: Generic [ Operation ] Wrapper class for Instructions. Module: iqm.models.playlist.instructions Attributes duration_samples  operation  Methods duration_samples ( int ) – operation ( Operation ) – previous IQPulse next MultiplexedIQPulse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"observation_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.observation_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.observation_pb2 Classes Complex128Array  Float64Array  Int64Array  ObservationUncertainty  ObservationValue  previous StringSe...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.observation_pb2 Classes Complex128Array  Float64Array  Int64Array  ObservationUncertainty  ObservationValue  previous StringSequence next Complex128Array By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"TimeTrace","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.TimeTrace.html","description":"Bases: AcquisitionMethod Capture the raw IQ signal without integration. Module: iqm.models.playlist.instructions Attributes duration_samples Length of the capture window, in samples. label Identifier ...","content":"Bases: AcquisitionMethod Capture the raw IQ signal without integration. Module: iqm.models.playlist.instructions Attributes duration_samples Length of the capture window, in samples. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) – delay_samples ( int ) – duration_samples ( int ) – Length of the capture window, in samples. previous ThresholdStateDiscrimination next VirtualRZ By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"run_definition_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v2.run_definition_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v2.run_definition_pb2 Classes RunDefinition  previous v2 next RunDefinition By IQM © Copyright 2021-2025, IQM. Last upda...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v2.run_definition_pb2 Classes RunDefinition  previous v2 next RunDefinition By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Instruction","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.Instruction.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous IQPulse next MultiplexedIQPulse By IQM © Copyright 2021-2025, IQM. Last updated on ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous IQPulse next MultiplexedIQPulse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Constant","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.Constant.html","description":"Bases: Waveform Constant waveform. Module: iqm.models.playlist.waveforms Attributes n_samples Requested number of samples for the waveform. Methods n_samples ( int ) – previous iqm.models.playlist.wav...","content":"Bases: Waveform Constant waveform. Module: iqm.models.playlist.waveforms Attributes n_samples Requested number of samples for the waveform. Methods n_samples ( int ) – previous iqm.models.playlist.waveforms.to_canonical next CosineRiseFall By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"playlist","url":"/iqm-data-definitions/api/iqm.models.playlist.html","description":"Control pulses and pulse sequences for quantum processors. Full path: iqm.models.playlist Subpackages and modules channel_descriptions Channel Description and Channel Configuration definitions. instru...","content":"Control pulses and pulse sequences for quantum processors. Full path: iqm.models.playlist Subpackages and modules channel_descriptions Channel Description and Channel Configuration definitions. instructions Instruction definitions. playlist Implements the new data structure of a playlist. segment Segment class definitions waveforms Waveform definitions. previous ReadoutProperties next channel_descriptions By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ReadoutTrigger","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.ReadoutTrigger.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ReadoutChannelConfig next RealChannelConfig By IQM © Copyright 2021-2025, IQM. Last...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ReadoutChannelConfig next RealChannelConfig By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"AcquisitionMethod","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.AcquisitionMethod.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message Bases: Message , Message Bases: Message , Message previous playlist...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message Bases: Message , Message Bases: Message , Message previous playlist_pb2 next ChannelConfiguration By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"channel_descriptions","url":"/iqm-data-definitions/api/iqm.models.playlist.channel_descriptions.html","description":"Channel Description and Channel Configuration definitions. Full path: iqm.models.playlist.channel_descriptions Classes ChannelConfiguration Base type for all channel configurations. ChannelDescription...","content":"Channel Description and Channel Configuration definitions. Full path: iqm.models.playlist.channel_descriptions Classes ChannelConfiguration Base type for all channel configurations. ChannelDescription ChannelDescription class contains all channel specific data and the suitable instructions and waveforms IQChannelConfig Placeholder configuration for Complex Channels ReadoutChannelConfig Requested configuration of a readout channel. RealChannelConfig Placeholder configuration for Real Channels previous playlist next ChannelConfiguration By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ReadoutChannelConfig","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.ReadoutChannelConfig.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Playlist next ReadoutTrigger By IQM © Copyright 2021-2025, IQM. Last updated on 202...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Playlist next ReadoutTrigger By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ChannelPropertyDictionary","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.channel_properties_pb2.ChannelPropertyDictionary.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous ChannelProperties next ChannelPropertyEntry By I...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous ChannelProperties next ChannelPropertyEntry By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Sequence","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.Sequence.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Int64Sequence next StringSequence By IQM © Copyright 2021-2025, IQM. Last updated...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Int64Sequence next StringSequence By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"BoolSequence","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.BoolSequence.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Arrays next Complex128 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Arrays next Complex128 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"station_control","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.html","description":"Full path: iqm.data_definitions.station_control Subpackages and modules v1  v2  previous SingleParameterSweep next v1 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30....","content":"Full path: iqm.data_definitions.station_control Subpackages and modules v1  v2  previous SingleParameterSweep next v1 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"TruncatedGaussian","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.TruncatedGaussian.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Schedule next TruncatedGaussianDerivative By IQM © Copyright 2021-2025, IQM. Last u...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Schedule next TruncatedGaussianDerivative By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"waveforms","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.html","description":"Waveform definitions. Full path: iqm.models.playlist.waveforms Module Attributes CanonicalWaveform Alias for Waveform to emphasize the fact the waveforms defined in this module have their own serialis...","content":"Waveform definitions. Full path: iqm.models.playlist.waveforms Module Attributes CanonicalWaveform Alias for Waveform to emphasize the fact the waveforms defined in this module have their own serialisation. Functions is_canonical (waveform) Returns True if waveform is a canonical waveform else False register_canonical_waveform (cls) Decorator for making a Waveform into a canonical waveform. to_canonical (waveform) Convert the waveform into a canonical version of itself, e.g. for serialization. Classes CanonicalWaveform Alias for Waveform to emphasize the fact the waveforms defined in this module have their own serialisation. Constant Constant waveform. CosineRiseFall Waveform that has a sinusoidal rise and fall, and a constant part in between. Gaussian Gaussian pulse. GaussianDerivative Derivative of a gaussian pulse. GaussianSmoothedSquare Convolution of a square pulse and a gaussian pulse. Samples Custom pre-sampled waveform. TruncatedGaussian Gaussian pulse, where the decaying tails are removed by offsetting, truncating, and then rescaling the pulse slightly, so that the resulting waveform is zero where the original waveform reaches the threshold level, and beyond, while still reaching the same maximal pulse amplitude. TruncatedGaussianDerivative Derivative of a gaussian pulse, where the decaying tails are removed by offsetting, truncating, and then rescaling the pulse slightly, so that the resulting waveform is zero where the original waveform reaches the threshold level, and beyond, while still reaching the same maximal pulse amplitude. TruncatedGaussianSmoothedSquare Convolution of a square pulse and a gaussian pulse, offset and truncated so that it has finite support. Waveform Describes the normalized shape of a real-valued control pulse. previous Segment next CanonicalWaveform By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"RealChannelConfig","url":"/iqm-data-definitions/api/iqm.models.playlist.channel_descriptions.RealChannelConfig.html","description":"Bases: ChannelConfiguration Placeholder configuration for Real Channels Module: iqm.models.playlist.channel_descriptions Attributes sampling_rate  Methods sampling_rate ( float ) – previous ReadoutCha...","content":"Bases: ChannelConfiguration Placeholder configuration for Real Channels Module: iqm.models.playlist.channel_descriptions Attributes sampling_rate  Methods sampling_rate ( float ) – previous ReadoutChannelConfig next instructions By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ChannelConfiguration","url":"/iqm-data-definitions/api/iqm.models.playlist.channel_descriptions.ChannelConfiguration.html","description":"Bases: object Base type for all channel configurations. Module: iqm.models.playlist.channel_descriptions Methods previous channel_descriptions next ChannelDescription By IQM © Copyright 2021-2025, IQM...","content":"Bases: object Base type for all channel configurations. Module: iqm.models.playlist.channel_descriptions Methods previous channel_descriptions next ChannelDescription By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"CartesianSweep","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.sweep_pb2.CartesianSweep.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.sweep_pb2 Attributes DESCRIPTOR  Methods previous sweep_pb2 next ParallelSweep By IQM © Copyright 2021-2025, IQM. Last updated on 2025-0...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.sweep_pb2 Attributes DESCRIPTOR  Methods previous sweep_pb2 next ParallelSweep By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"IQChannelConfig","url":"/iqm-data-definitions/api/iqm.models.playlist.channel_descriptions.IQChannelConfig.html","description":"Bases: ChannelConfiguration Placeholder configuration for Complex Channels Module: iqm.models.playlist.channel_descriptions Attributes sampling_rate  Methods sampling_rate ( float ) – previous Channel...","content":"Bases: ChannelConfiguration Placeholder configuration for Complex Channels Module: iqm.models.playlist.channel_descriptions Attributes sampling_rate  Methods sampling_rate ( float ) – previous ChannelDescription next ReadoutChannelConfig By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"task_service_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v2.task_service_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v2.task_service_pb2 Classes SweepResultsResponse  previous RunDefinition next SweepResultsResponse By IQM © Copyright 20...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v2.task_service_pb2 Classes SweepResultsResponse  previous RunDefinition next SweepResultsResponse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Wait","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.Wait.html","description":"Bases: object Class for WaitInstruction. Module: iqm.models.playlist.instructions Methods previous VirtualRZ next playlist By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30....","content":"Bases: object Class for WaitInstruction. Module: iqm.models.playlist.instructions Methods previous VirtualRZ next playlist By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ChannelDescription","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.ChannelDescription.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ChannelConfiguration next ConditionalInstruction By IQM © Copyright 2021-2025, IQM....","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ChannelConfiguration next ConditionalInstruction By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"spot_result_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.spot_result_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.spot_result_pb2 Classes NpyArray  NumcodecsConfig  SpotResultValue  previous SettingNode next NpyArray By IQM © Copyright 2021...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.spot_result_pb2 Classes NpyArray  NumcodecsConfig  SpotResultValue  previous SettingNode next NpyArray By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"instructions","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.html","description":"Instruction definitions. Full path: iqm.models.playlist.instructions Classes AcquisitionMethod Describes a way to acquire readout data. ComplexIntegration Perform a weighted integration of the IQ raw ...","content":"Instruction definitions. Full path: iqm.models.playlist.instructions Classes AcquisitionMethod Describes a way to acquire readout data. ComplexIntegration Perform a weighted integration of the IQ raw signal, resulting in a complex number. ConditionalInstruction Class for Conditional Pulses. IQPulse Class for IQ Pulses. Instruction Wrapper class for Instructions. MultiplexedIQPulse Instruction to simultaneously play multiple IQ pulses. MultiplexedRealPulse Instruction to simultaneously play multiple real pulses. ReadoutTrigger Instruction for playing a probe pulse and acquiring the associated readout results. RealPulse Class for Real pulses. ThresholdStateDiscrimination Perform a weighted integration of the IQ raw signal and compares the real part of the result against a threshold value, resulting in a single bit. TimeTrace Capture the raw IQ signal without integration. VirtualRZ Class for Virtual Rz. Wait Class for WaitInstruction. previous RealChannelConfig next AcquisitionMethod By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"MultiplexedRealPulse","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.MultiplexedRealPulse.html","description":"Bases: object Instruction to simultaneously play multiple real pulses. Each component pulse entry can be added with arbitrary delay from the beginning of this instruction.\\nWhere outside the duration o...","content":"Bases: object Instruction to simultaneously play multiple real pulses. Each component pulse entry can be added with arbitrary delay from the beginning of this instruction.\\nWhere outside the duration of the MultiplexedRealPulse, the pulse entries are truncated.\\nWhere overlapping, samples of multiple pulse entries are summed.\\nWhere the interval of a MultiplexedRealPulse does not overlap with any of its entry pulse, its samples will be 0. Module: iqm.models.playlist.instructions Attributes entries Pairs of instruction and offset . Methods entries ( tuple [ tuple [ Instruction , int ] , ... ] ) – Pairs of instruction and offset .\\nInstruction should be valid a RealPulse. offset is the number of samples the pulse is delayed from the beginning of the instruction.\\nIt has no granularity constraints. Negative values are allowed, but beginning will be truncated. previous MultiplexedIQPulse next ReadoutTrigger By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Constant","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.Constant.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ConditionalInstruction next CosineRiseFall By IQM © Copyright 2021-2025, IQM. Last ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ConditionalInstruction next CosineRiseFall By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"sweep_request_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.sweep_request_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v1.sweep_request_pb2 Classes RunMetadata  SweepRequest  previous RunDefinition next RunMetadata By IQM © Copyright 2021-...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v1.sweep_request_pb2 Classes RunMetadata  SweepRequest  previous RunDefinition next RunMetadata By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Datum","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.Datum.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Complex128Sequence next Float64Sequence By IQM © Copyright 2021-2025, IQM. Last u...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Complex128Sequence next Float64Sequence By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"StringSequence","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.StringSequence.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Sequence next observation_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Sequence next observation_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ReadoutTrigger","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.ReadoutTrigger.html","description":"Bases: object Instruction for playing a probe pulse and acquiring the associated readout results. Module: iqm.models.playlist.instructions Attributes probe_pulse Index pointing to a probe pulse, usual...","content":"Bases: object Instruction for playing a probe pulse and acquiring the associated readout results. Module: iqm.models.playlist.instructions Attributes probe_pulse Index pointing to a probe pulse, usually a MultiplexedIQPulse. acquisitions Active readout acquisition methods associated with this trigger instance. Methods probe_pulse ( Instruction ) – acquisitions ( tuple [ AcquisitionMethod , ... ] ) – Index pointing to a probe pulse, usually a MultiplexedIQPulse. Active readout acquisition methods associated with this trigger instance. previous MultiplexedRealPulse next RealPulse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"AcquisitionMethod","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.AcquisitionMethod.html","description":"Bases: object Describes a way to acquire readout data. Module: iqm.models.playlist.instructions Attributes label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay fr...","content":"Bases: object Describes a way to acquire readout data. Module: iqm.models.playlist.instructions Attributes label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) – delay_samples ( int ) – Identifier for the returned data, like QB1__readout.time_trace . Delay from beginning of probe pulse to beginning of acquisition window, in samples. previous instructions next ComplexIntegration By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Playlist","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.Playlist.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous MultiplexedRealPulse next ReadoutChannelConfig By IQM © Co...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous MultiplexedRealPulse next ReadoutChannelConfig By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"parameter_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.parameter_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.parameter_pb2 Classes Parameter  previous ObservationValue next Parameter By IQM © Copyright 2021-2025, IQM. Last updated on 2...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.parameter_pb2 Classes Parameter  previous ObservationValue next Parameter By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"TruncatedGaussianSmoothedSquare","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.TruncatedGaussianSmoothedSquare.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous TruncatedGaussianDerivative next VirtualRZ By IQM © Copyright 2021-2025, IQM. Last ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous TruncatedGaussianDerivative next VirtualRZ By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"SingleParameterSweep","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.sweep_pb2.SingleParameterSweep.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.sweep_pb2 Attributes DESCRIPTOR  Methods previous ParallelSweep next station_control By IQM © Copyright 2021-2025, IQM. Last updated on ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.sweep_pb2 Attributes DESCRIPTOR  Methods previous ParallelSweep next station_control By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Samples","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.Samples.html","description":"Bases: Waveform Custom pre-sampled waveform. This class can be used to represent an arbitrary waveform\\nthat is not supported with the predefined shapes of waveforms. Module: iqm.models.playlist.wavefo...","content":"Bases: Waveform Custom pre-sampled waveform. This class can be used to represent an arbitrary waveform\\nthat is not supported with the predefined shapes of waveforms. Module: iqm.models.playlist.waveforms Attributes samples  n_samples Requested number of samples for the waveform. Methods sample Sample the waveform. samples ( ndarray ) – Sample the waveform. Contains the boilerplate code for determining the sample coordinates,\\nthe actual sampling happens in _sample() . self sampled in the window [-1/2, 1/2] ndarray previous GaussianSmoothedSquare next TruncatedGaussian By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ChannelProperties","url":"/iqm-data-definitions/api/iqm.models.channel_properties.channel_properties.ChannelProperties.html","description":"Bases: object Parent class of AWG and QA Channel properties that contains common attributes and methods. Module: iqm.models.channel_properties.channel_properties Attributes blocks_component Whether co...","content":"Bases: object Parent class of AWG and QA Channel properties that contains common attributes and methods. Module: iqm.models.channel_properties.channel_properties Attributes blocks_component Whether content in this channel should block the entire component that it is associated with in the scheduling. is_virtual Virtual channels are only used on the frontend side during compilation and scheduling. sampling_rate Sample rate of the instrument responsible for the channel (in Hz). instruction_duration_granularity All instruction durations on this channel must be multiples of this granularity (in samples). instruction_duration_min All instruction durations on this channel must at least this long (in samples). compatible_instructions Instruction types that are allowed on this channel. Methods duration_to_int_samples Convert a time duration to an integer number of samples at the channel sample rate. duration_to_samples Convert a time duration to number of samples at the channel sample rate. duration_to_seconds Convert a time duration in samples at the channel sample rate to seconds. round_duration_to_granularity Round a time duration to the channel granularity. sampling_rate ( float ) – instruction_duration_granularity ( float ) – instruction_duration_min ( float ) – compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) – is_virtual ( bool ) – blocks_component ( bool ) – Sample rate of the instrument responsible for the channel (in Hz). All instruction durations on this channel must be multiples of this granularity (in samples). All instruction durations on this channel must at least this long (in samples). Instruction types that are allowed on this channel. Virtual channels are only used on the frontend side during compilation and scheduling.\\nThey are removed from the Schedule before it is sent to Station\\nControl. For example, virtual drive channels of computational resonators. Whether content in this channel should block the entire component that it is associated with in the scheduling.\\nTypically all physical channels should block their components, but certain virtual channels might not\\nrequire this. Convert a time duration to number of samples at the channel sample rate. duration ( float ) – time duration in s duration in samples float Convert a time duration in samples at the channel sample rate to seconds. duration ( float ) – time duration in samples duration in seconds float Convert a time duration to an integer number of samples at the channel sample rate. duration must be sufficiently close to an integer number of samples, and\\nthat number must be something the channel can handle. duration ( float ) – time duration in s message ( str ) – message identifying the duration we are testing check_min_samples ( bool ) – If True, check that the output is at least instruction_duration_min . duration as an integer number of samples ValueError – duration is not close to an integer number of samples, or is\\n    otherwise unacceptable to the channel int Round a time duration to the channel granularity. duration ( float ) – time duration in s round_up ( bool ) – whether to round the durations up to the closest granularity force_min_duration ( bool ) – whether to force the duration to be at least self.instruction_duration_min in\\nseconds duration rounded to channel granularity, in seconds float previous AWGProperties next ReadoutProperties By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ConditionalInstruction","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.ConditionalInstruction.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ChannelDescription next Constant By IQM © Copyright 2021-2025, IQM. Last updated on...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous ChannelDescription next Constant By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"SpotResultValue","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.spot_result_pb2.SpotResultValue.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.spot_result_pb2 Attributes DESCRIPTOR  Methods previous NumcodecsConfig next struct_pb2 By IQM © Copyright 2021-2025, IQM. Last updated ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.spot_result_pb2 Attributes DESCRIPTOR  Methods previous NumcodecsConfig next struct_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Array","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.Array.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous data_types_pb2 next Arrays By IQM © Copyright 2021-2025, IQM. Last updated on 202...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous data_types_pb2 next Arrays By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ChannelProperties","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.channel_properties_pb2.ChannelProperties.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods previous AWGProperties next ChannelPropertyDictionary By IQM © Copyright 2021-2025...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods previous AWGProperties next ChannelPropertyDictionary By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"models","url":"/iqm-data-definitions/api/iqm.models.html","description":"Python-native representation of the protos in iqm.data_definitions , recognized by IQM Station Control. Full path: iqm.models Subpackages and modules channel_properties Hardware properties of station ...","content":"Python-native representation of the protos in iqm.data_definitions , recognized by IQM Station Control. Full path: iqm.models Subpackages and modules channel_properties Hardware properties of station devices. playlist Control pulses and pulse sequences for quantum processors. previous API Reference next channel_properties By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ReadoutProperties","url":"/iqm-data-definitions/api/iqm.models.channel_properties.channel_properties.ReadoutProperties.html","description":"Bases: ChannelProperties Channel properties of a QA channel. Module: iqm.models.channel_properties.channel_properties Attributes integration_start_dead_time Minimum delay for probe pulse entries insid...","content":"Bases: ChannelProperties Channel properties of a QA channel. Module: iqm.models.channel_properties.channel_properties Attributes integration_start_dead_time Minimum delay for probe pulse entries inside a ReadoutTrigger. integration_stop_dead_time Minimum delay after the last integrator has stopped, before a new ReadoutTrigger can be executed. sampling_rate Sample rate of the instrument responsible for the channel (in Hz). instruction_duration_granularity All instruction durations on this channel must be multiples of this granularity (in samples). instruction_duration_min All instruction durations on this channel must at least this long (in samples). compatible_instructions Instruction types that are allowed on this channel. Methods sampling_rate ( float ) – instruction_duration_granularity ( float ) – instruction_duration_min ( float ) – compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) – is_virtual ( bool ) – blocks_component ( bool ) – integration_start_dead_time ( float ) – integration_stop_dead_time ( float ) – Minimum delay for probe pulse entries inside a ReadoutTrigger. Minimum delay after the last integrator has stopped, before a new\\nReadoutTrigger can be executed. This delay must be taken into account when calculating the duration of a\\nReadoutTrigger. The duration is the sum of: This value, The duration of the longest integration among the acquisitions in the ReadoutTrigger instruction, The acquisition delay of the above integration. previous ChannelProperties next playlist By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"VirtualRZ","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.VirtualRZ.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous TruncatedGaussianSmoothedSquare next Wait By IQM © Copyright 2021-2025, IQM. Last u...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous TruncatedGaussianSmoothedSquare next Wait By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"v1","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.html","description":"Full path: iqm.data_definitions.common.v1 Subpackages and modules channel_properties_pb2 Generated protocol buffer code. data_types_pb2 Generated protocol buffer code. observation_pb2 Generated protoc...","content":"Full path: iqm.data_definitions.common.v1 Subpackages and modules channel_properties_pb2 Generated protocol buffer code. data_types_pb2 Generated protocol buffer code. observation_pb2 Generated protocol buffer code. parameter_pb2 Generated protocol buffer code. playlist_pb2 Generated protocol buffer code. setting_pb2 Generated protocol buffer code. spot_result_pb2 Generated protocol buffer code. struct_pb2 Generated protocol buffer code. sweep_pb2 Generated protocol buffer code. previous common next channel_properties_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"setting_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.setting_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.setting_pb2 Classes SettingNode  previous Waveform next SettingNode By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.setting_pb2 Classes SettingNode  previous Waveform next SettingNode By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Waveform","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.Waveform.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Wait next setting_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Wait next setting_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"iqm.models.playlist.waveforms.to_canonical","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.to_canonical.html","description":"Convert the waveform into a canonical version of itself, e.g. for serialization. Canonical waveforms are returned as is, non-canonical waveforms are sampled. canonical version of the waveform waveform...","content":"Convert the waveform into a canonical version of itself, e.g. for serialization. Canonical waveforms are returned as is, non-canonical waveforms are sampled. canonical version of the waveform waveform ( Waveform ) – Waveform previous iqm.models.playlist.waveforms.register_canonical_waveform next Constant By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ChannelConfiguration","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.ChannelConfiguration.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous AcquisitionMethod next ChannelDescription By IQM © Copyright 2021-2025, IQM. Last u...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous AcquisitionMethod next ChannelDescription By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ChannelDescription","url":"/iqm-data-definitions/api/iqm.models.playlist.channel_descriptions.ChannelDescription.html","description":"Bases: object for a channel. channel_config ( ChannelConfiguration ) – ChannelConfiguration object which contains data related to the channel controller_name ( str ) – name of the controller instructi...","content":"Bases: object for a channel. channel_config ( ChannelConfiguration ) – ChannelConfiguration object which contains data related to the channel controller_name ( str ) – name of the controller instruction_table – Contains mapping of the instructions to be executed on this channel. Each\\ninstruction should be unique. waveform_table – Contains mapping of the waveforms to be executed on this channel. Each\\nwaveform should be unique. acquisition_table – Table of acquisition configs.\\nEach ReadoutTrigger instruction may ask to perform an arbitrary combination of these.\\nIn practice, possible combinations are limited by device capabilities. Module: iqm.models.playlist.channel_descriptions Attributes channel_config  controller_name  instruction_table  waveform_table  acquisition_table  Methods add_acquisition Add an acquisition method to the table map if the configuration is unique. add_instruction Add an instruction to the instruction table if the instruction is unique. Add an instruction to the instruction table if the instruction is unique. If the instruction contains other instructions, those are also added if they are unique.\\nIf any of the instructions contain unique waveforms, those are also added to the waveform table. instruction ( Instruction ) – Instruction to be added corresponding index to the instruction table int Add an acquisition method to the table map if the configuration is unique. If it contains unique waveforms, those are added to the waveform table. acquisition ( AcquisitionMethod ) – Configuration to be added. Corresponding index to the acquisition table. int previous ChannelConfiguration next IQChannelConfig By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"task_service_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.task_service_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v1.task_service_pb2 Classes SweepResultsResponse  SweepTaskRequest  previous SweepRequest next SweepResultsResponse By I...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v1.task_service_pb2 Classes SweepResultsResponse  SweepTaskRequest  previous SweepRequest next SweepResultsResponse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ReadoutProperties","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.channel_properties_pb2.ReadoutProperties.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods previous ChannelPropertyEntry next data_types_pb2 By IQM © Copyright 2021-2025, IQ...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.channel_properties_pb2 Attributes DESCRIPTOR  Methods previous ChannelPropertyEntry next data_types_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Gaussian","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.Gaussian.html","description":"Bases: Waveform Gaussian pulse. where \\\\(c\\\\) is center_offset , and \\\\(\\\\sigma\\\\) is sigma . sigma ( float ) – gaussian standard deviation center_offset ( float ) – center offset n_samples ( int ) – Modul...","content":"Bases: Waveform Gaussian pulse. where \\\\(c\\\\) is center_offset , and \\\\(\\\\sigma\\\\) is sigma . sigma ( float ) – gaussian standard deviation center_offset ( float ) – center offset n_samples ( int ) – Module: iqm.models.playlist.waveforms Attributes center_offset  sigma  n_samples Requested number of samples for the waveform. Methods previous CosineRiseFall next GaussianDerivative By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Parameter","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.parameter_pb2.Parameter.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.parameter_pb2 Attributes DESCRIPTOR  Methods previous parameter_pb2 next playlist_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.parameter_pb2 Attributes DESCRIPTOR  Methods previous parameter_pb2 next playlist_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"SweepResultsResponse","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v2.task_service_pb2.SweepResultsResponse.html","description":"Bases: Message , Message Module: iqm.data_definitions.station_control.v2.task_service_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous task_service_pb2 next Changelog By IQM © Copy...","content":"Bases: Message , Message Module: iqm.data_definitions.station_control.v2.task_service_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous task_service_pb2 next Changelog By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"CanonicalWaveform","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.CanonicalWaveform.html","description":"Alias for Waveform to emphasize the fact the waveforms defined in this module have their own serialisation. Module: iqm.models.playlist.waveforms Attributes n_samples Requested number of samples for t...","content":"Alias for Waveform to emphasize the fact the waveforms defined in this module have their own serialisation. Module: iqm.models.playlist.waveforms Attributes n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. sample Sample the waveform. previous waveforms next iqm.models.playlist.waveforms.is_canonical By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"Complex128Sequence","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.data_types_pb2.Complex128Sequence.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Complex128 next Datum By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.data_types_pb2 Attributes DESCRIPTOR  Methods previous Complex128 next Datum By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"channel_properties","url":"/iqm-data-definitions/api/iqm.models.channel_properties.html","description":"Hardware properties of station devices. Full path: iqm.models.channel_properties Subpackages and modules channel_properties Hardware properties of station devices. previous models next channel_propert...","content":"Hardware properties of station devices. Full path: iqm.models.channel_properties Subpackages and modules channel_properties Hardware properties of station devices. previous models next channel_properties By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"MultiplexedIQPulse","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.MultiplexedIQPulse.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous Instruction next MultiplexedRealPulse By IQM © Copyright 2...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous Instruction next MultiplexedRealPulse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"RunDefinition","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.run_definition_pb2.RunDefinition.html","description":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.run_definition_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous run_definition_pb2 next sweep_request_pb2 B...","content":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.run_definition_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous run_definition_pb2 next sweep_request_pb2 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"SweepResultsResponse","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.task_service_pb2.SweepResultsResponse.html","description":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.task_service_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous task_service_pb2 next SweepTaskRequest By IQM...","content":"Bases: Message , Message Module: iqm.data_definitions.station_control.v1.task_service_pb2 Attributes DESCRIPTOR  Methods Bases: Message , Message previous task_service_pb2 next SweepTaskRequest By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"CosineRiseFall","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.CosineRiseFall.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Constant next Gaussian By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-3...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous Constant next Gaussian By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ReadoutChannelConfig","url":"/iqm-data-definitions/api/iqm.models.playlist.channel_descriptions.ReadoutChannelConfig.html","description":"Bases: ChannelConfiguration Requested configuration of a readout channel. Module: iqm.models.playlist.channel_descriptions Attributes sampling_rate  Methods sampling_rate ( float ) – previous IQChanne...","content":"Bases: ChannelConfiguration Requested configuration of a readout channel. Module: iqm.models.playlist.channel_descriptions Attributes sampling_rate  Methods sampling_rate ( float ) – previous IQChannelConfig next RealChannelConfig By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ListValue","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.struct_pb2.ListValue.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.struct_pb2 Attributes DESCRIPTOR  Methods previous struct_pb2 next Struct By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30....","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.struct_pb2 Attributes DESCRIPTOR  Methods previous struct_pb2 next Struct By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"channel_properties_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.channel_properties_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.channel_properties_pb2 Classes AWGProperties  ChannelProperties  ChannelPropertyDictionary  ChannelPropertyEntry  ReadoutPrope...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.channel_properties_pb2 Classes AWGProperties  ChannelProperties  ChannelPropertyDictionary  ChannelPropertyEntry  ReadoutProperties  previous v1 next AWGProperties By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"iqm.models.playlist.waveforms.is_canonical","url":"/iqm-data-definitions/api/iqm.models.playlist.waveforms.is_canonical.html","description":"Returns True if waveform is a canonical waveform else False waveform ( type [ Waveform ] ) – bool previous CanonicalWaveform next iqm.models.playlist.waveforms.register_canonical_waveform By IQM © Cop...","content":"Returns True if waveform is a canonical waveform else False waveform ( type [ Waveform ] ) – bool previous CanonicalWaveform next iqm.models.playlist.waveforms.register_canonical_waveform By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"common","url":"/iqm-data-definitions/api/iqm.data_definitions.common.html","description":"Full path: iqm.data_definitions.common Subpackages and modules v1  previous data_definitions next v1 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30....","content":"Full path: iqm.data_definitions.common Subpackages and modules v1  previous data_definitions next v1 By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"playlist_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.playlist_pb2 Classes AcquisitionMethod  ChannelConfiguration  ChannelDescription  ConditionalInstruction  Constant  CosineRise...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.playlist_pb2 Classes AcquisitionMethod  ChannelConfiguration  ChannelDescription  ConditionalInstruction  Constant  CosineRiseFall  Gaussian  GaussianDerivative  GaussianSmoothedSquare  IQChannelConfig  IQPulse  Instruction  MultiplexedIQPulse  MultiplexedRealPulse  Playlist  ReadoutChannelConfig  ReadoutTrigger  RealChannelConfig  RealPulse  Samples  Schedule  TruncatedGaussian  TruncatedGaussianDerivative  TruncatedGaussianSmoothedSquare  VirtualRZ  Wait  Waveform  previous Parameter next AcquisitionMethod By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"AWGProperties","url":"/iqm-data-definitions/api/iqm.models.channel_properties.channel_properties.AWGProperties.html","description":"Bases: ChannelProperties Channel properties of an AWG channel. Module: iqm.models.channel_properties.channel_properties Attributes local_oscillator Whether this AWG contains a local oscillator or not....","content":"Bases: ChannelProperties Channel properties of an AWG channel. Module: iqm.models.channel_properties.channel_properties Attributes local_oscillator Whether this AWG contains a local oscillator or not. mixer_correction Whether this AWG has mixer correction or not. fast_feedback_sources Defines compatible fast feedback sources sampling_rate Sample rate of the instrument responsible for the channel (in Hz). instruction_duration_granularity All instruction durations on this channel must be multiples of this granularity (in samples). instruction_duration_min All instruction durations on this channel must at least this long (in samples). compatible_instructions Instruction types that are allowed on this channel. Methods sampling_rate ( float ) – instruction_duration_granularity ( float ) – instruction_duration_min ( float ) – compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) – is_virtual ( bool ) – blocks_component ( bool ) – fast_feedback_sources ( list [ str ] ) – local_oscillator ( bool ) – mixer_correction ( bool ) – Defines compatible fast feedback sources Whether this AWG contains a local oscillator or not. Whether this AWG has mixer correction or not. previous channel_properties next ChannelProperties By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"channel_properties","url":"/iqm-data-definitions/api/iqm.models.channel_properties.channel_properties.html","description":"Hardware properties of station devices. Full path: iqm.models.channel_properties.channel_properties Classes AWGProperties Channel properties of an AWG channel. ChannelProperties Parent class of AWG an...","content":"Hardware properties of station devices. Full path: iqm.models.channel_properties.channel_properties Classes AWGProperties Channel properties of an AWG channel. ChannelProperties Parent class of AWG and QA Channel properties that contains common attributes and methods. ReadoutProperties Channel properties of a QA channel. previous channel_properties next AWGProperties By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"run_definition_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.station_control.v1.run_definition_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v1.run_definition_pb2 Classes RunDefinition  previous v1 next RunDefinition By IQM © Copyright 2021-2025, IQM. Last upda...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.station_control.v1.run_definition_pb2 Classes RunDefinition  previous v1 next RunDefinition By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"struct_pb2","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.struct_pb2.html","description":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.struct_pb2 Classes ListValue  Struct  Value  previous SpotResultValue next ListValue By IQM © Copyright 2021-2025, IQM. Last u...","content":"Generated protocol buffer code. Full path: iqm.data_definitions.common.v1.struct_pb2 Classes ListValue  Struct  Value  previous SpotResultValue next ListValue By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"ConditionalInstruction","url":"/iqm-data-definitions/api/iqm.models.playlist.instructions.ConditionalInstruction.html","description":"Bases: object Class for Conditional Pulses. Module: iqm.models.playlist.instructions Attributes condition  if_true  if_false  Methods condition ( str ) – if_true ( Instruction ) – if_false ( Instructi...","content":"Bases: object Class for Conditional Pulses. Module: iqm.models.playlist.instructions Attributes condition  if_true  if_false  Methods condition ( str ) – if_true ( Instruction ) – if_false ( Instruction ) – previous ComplexIntegration next IQPulse By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."},{"package":"iqm-data-definitions","title":"GaussianSmoothedSquare","url":"/iqm-data-definitions/api/iqm.data_definitions.common.v1.playlist_pb2.GaussianSmoothedSquare.html","description":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous GaussianDerivative next IQChannelConfig By IQM © Copyright 2021-2025, IQM. Last upd...","content":"Bases: Message , Message Module: iqm.data_definitions.common.v1.playlist_pb2 Attributes DESCRIPTOR  Methods previous GaussianDerivative next IQChannelConfig By IQM © Copyright 2021-2025, IQM. Last updated on 2025-03-30."}]`);var fp=sc();const pi=({content:c,children:l})=>{const[r,y]=Ge.useState(!1),[_,q]=Ge.useState(null),[v,I]=Ge.useState({x:0,y:0});Ge.useEffect(()=>{const S=document.createElement("div");return document.body.appendChild(S),q(S),()=>{document.body.removeChild(S)}},[]);const M=S=>{I({x:S.clientX,y:S.clientY})};return _?b.jsxs("div",{className:"relative inline-block",onMouseMove:M,children:[l,b.jsx("span",{className:"tooltip-trigger ml-1 cursor-pointer",onMouseEnter:()=>y(!0),onMouseLeave:()=>y(!1),onClick:()=>y(!r),children:"ⓘ"}),r&&fp.createPortal(b.jsx("div",{className:"fixed p-2 bg-gray-700 text-white text-sm rounded shadow-lg z-50",style:{top:v.y+10,left:v.x+10},children:c}),_)]}):null},gp=[{name:"Higher energy states (resonator)",qccsw:"3.1.0",qiskit:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/deneb/Deneb_Unlocked_Resonator.ipynb"},cirq:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.move_gate_validation"}},{name:"Mid-circuit measurements",qccsw:"3.1.0",qiskit:!0,qrisp:!0,cirq:!0,cudaq:!0},{name:"Classically controlled gates",qccsw:"3.1.0",qiskit:{tutorial:"https://docs.meetiqm.com/iqm-client/user_guide_qiskit.html#classically-controlled-gates"},qrisp:!0,cirq:{tutorial:"https://docs.meetiqm.com/cirq-iqm/user_guide.html#classical-control"},cudaq:!1},{name:b.jsx(pi,{content:"Increase throughput by batching circuits that all read out the same qubits.",children:"Batched execution "}),qccsw:"1.0.0",qiskit:!0,cirq:!0,cudaq:!0,qrisp:!0},{name:"Dynamical decoupling",qccsw:"3.3.0",qiskit:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html"},cirq:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html"}},{name:b.jsxs("div",{style:{display:"flex"},children:[" ",b.jsx(pi,{content:"Using a secondary detection event to confirm the successful preparation or measurement of a quantum state.",children:" Heralding"})]}),qccsw:"1.0.0",qiskit:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.heralding_mode"},cirq:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.heralding_mode"}},{name:"Benchmarking tools",qccsw:"-",qiskit:{tutorial:"https://docs.meetiqm.com/iqm-benchmarks/"}},{name:"Simulated backend",qccsw:"-",qiskit:!0,cirq:"-",cudaq:"-",qrisp:"-"},{name:"Compilation check",qccsw:"1.0.0",qiskit:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/garnet/GarnetAlgorithmsChecker.ipynb"},cirq:!0,cudaq:!0,qrisp:!0},{name:"Resetting qubits",qccsw:"3.2.0",qiskit:{tutorial:"https://docs.meetiqm.com/iqm-client/user_guide_qiskit.html#resetting-qubits"},cirq:!1,cudaq:!1,qrisp:!0},{name:b.jsx(pi,{content:"The qubits are actively reset once more using conditional pulses feedback loops before circuit execution.",children:"Automated active reset"}),qccsw:"3.3.0",qiskit:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.active_reset_cycles"},cirq:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.active_reset_cycles"}},{name:"Programmatically retrieve calibration data (Resonance)",qccsw:"-",qiskit:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/general/RetrieveCalibrationData.ipynb"},cirq:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/general/RetrieveCalibrationData.ipynb"},cudaq:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/general/RetrieveCalibrationData.ipynb"},qrisp:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/general/RetrieveCalibrationData.ipynb"}},{name:"Programmatically retrieve calibration data",qccsw:"-",qiskit:!0,cirq:!0,cudaq:!0,qrisp:!0},{name:"MOVE operation support",qccsw:"3.0.0",qiskit:{tutorial:"https://www.iqmacademy.com/learn/deneb/01-move/"},cirq:{tutorial:"https://www.iqmacademy.com/learn/deneb/01-move/"}}],_p=[{name:"Ready-made experiments",resonance:!1,onprem:!0},{name:"Custom calibrations",resonance:"Coming soon",onprem:!0},{name:"Custom gates",resonance:"Coming soon",onprem:!0},{name:"Pulse Schedule viewer",resonance:"Coming soon",onprem:!0},{name:"Custom compiler stages",resonance:"Coming soon",onprem:!0},{name:"Calibration workflows",resonance:!1,onprem:!0}],Ei=({framework:c})=>b.jsxs("div",{children:[c?b.jsx(b.Fragment,{children:typeof c=="string"?c:b.jsx(b.Fragment,{children:"✅"})}):b.jsx(b.Fragment,{children:"❌"})," ",c&&c.tutorial&&b.jsx(b.Fragment,{children:b.jsx("a",{href:c.tutorial,target:"_blank",rel:"noreferrer",children:"🔍"})})]}),bp=()=>b.jsx(b.Fragment,{children:b.jsx("main",{children:b.jsxs("div",{className:"container mx-auto",children:[b.jsxs("div",{className:"my-4",children:[b.jsx("p",{children:"IQM Quantum Computers support multiple quantum computing frameworks with support for varying features. Below's list provides an overview of the features supported by IQM Quantum Computers."}),b.jsxs("p",{className:"mt-4",children:["If the feature you require is not listed here, it might not mean it is not supported. Please contact us at ",b.jsx("a",{href:"mailto:support@meetiqm.com",children:"IQM Support"}),"."]})]}),b.jsx("h2",{className:"text-2xl font-semibold mt-8",children:"Gate-based access"}),b.jsx("p",{children:"Click on the 🔍 to access more information."}),b.jsx("div",{className:"overflow-x-auto pt-4 pb-4",children:b.jsxs("table",{className:"min-w-full bg-white rounded-xl",children:[b.jsx("thead",{children:b.jsxs("tr",{children:[b.jsx("th",{className:"py-2 px-4 border-b",children:"FEATURE"}),b.jsx("th",{className:"py-2 px-4 border-b",children:b.jsx("div",{className:"flex items-center",children:b.jsx(pi,{content:b.jsx(b.Fragment,{children:"Earliest version of the Quantum Computer Software Stack needed to support this feature."}),children:"QCCSW"})})}),b.jsx("th",{className:"py-2 px-4 border-b",children:b.jsx(pi,{content:"For supported versions check the quantum computer detail page.",children:"Qiskit"})}),b.jsx("th",{className:"py-2 px-4 border-b",children:b.jsx(pi,{content:"Supported in Resonance via Qiskit-on-IQM.",children:"qrisp"})}),b.jsx("th",{className:"py-2 px-4 border-b",children:b.jsx(pi,{content:"For supported versions check the quantum computer detail page.",children:"Cirq"})}),b.jsx("th",{className:"py-2 px-4 border-b",children:"CUDA-Q"})]})}),b.jsx("tbody",{children:gp.sort((c,l)=>l.qccsw.localeCompare(c.qccsw)).map((c,l)=>b.jsxs("tr",{children:[b.jsx("td",{className:"py-2 px-4 border-b",children:c.name}),b.jsxs("td",{className:"py-2 px-4 border-b",children:[typeof c.qccsw=="string"&&/\d/.test(c.qccsw[0])&&b.jsx(b.Fragment,{children:"≥"})," ",c.qccsw]}),b.jsx("td",{className:"py-2 px-4 border-b",children:b.jsx(Ei,{framework:c.qiskit})}),b.jsx("td",{className:"py-2 px-4 border-b",children:b.jsx(Ei,{framework:c.qrisp})}),b.jsx("td",{className:"py-2 px-4 border-b",children:b.jsx(Ei,{framework:c.cirq})}),b.jsx("td",{className:"py-2 px-4 border-b",children:b.jsx(Ei,{framework:c.cudaq})})]},l))})]})}),b.jsxs("div",{className:"my-8",children:[b.jsx("h2",{className:"text-2xl font-semibold",children:"Pulse-based access"}),b.jsx("div",{className:"overflow-x-auto",children:b.jsxs("table",{className:"min-w-full bg-white rounded-xl mt-4",children:[b.jsx("thead",{children:b.jsxs("tr",{children:[b.jsx("th",{className:"py-2 px-4 border-b",children:"FEATURE"}),b.jsx("th",{className:"py-2 px-4 border-b",children:"RESONANCE"}),b.jsx("th",{className:"py-2 px-4 border-b",children:"ON-PREMISE DEVICES"})]})}),b.jsx("tbody",{children:_p.sort((c,l)=>{const r=typeof c.name=="string"?c.name:c.name.props.children[0],y=typeof l.name=="string"?l.name:l.name.props.children[0];return r.localeCompare(y)}).map((c,l)=>b.jsxs("tr",{children:[b.jsx("td",{className:"py-2 px-4 border-b",children:c.name}),b.jsx("td",{className:"py-2 px-4 border-b justify-items-center",children:b.jsx(Ei,{framework:c.resonance})}),b.jsx("td",{className:"py-2 px-4 border-b justify-items-center",children:b.jsx(Ei,{framework:c.onprem})})]},l))})]})})]})]})})});function yp(){const[c,l]=Ge.useState(!1),[r,y]=Ge.useState(""),[_,q]=Ge.useState(Gs),v=new Fi(Gs,{keys:["title","description","package"],threshold:.4});Ge.useEffect(()=>{const B=A=>{(A.metaKey||A.ctrlKey)&&A.key==="k"&&(A.preventDefault(),l(!0)),A.key==="Escape"&&l(!1)};return window.addEventListener("keydown",B),()=>window.removeEventListener("keydown",B)},[]),Ge.useEffect(()=>{if(r){const B=v.search(r);q(B.map(A=>A.item))}else q(Gs)},[r]);const I=()=>{l(!0)},[M,S]=Ge.useState(!0),R=[{href:"./iqm-pulse",title:"IQM Pulse",description:"Interface and implementations for control pulses."},{href:"./iqm-pulla",title:"IQM Pulla",description:"Pulse-level access library for compiling quantum circuits."},{href:"./cirq-iqm/",title:"Cirq on IQM",description:"Cirq adapter for IQM’s quantum computers."},{href:"./iqm-benchmarks/",title:"IQM Benchmarks",description:"Quantum Characterization, Verification, and Validation (QCVV) tools for quantum computing."},{href:"./iqm-client/",title:"IQM Client",description:"Python client for remote access to quantum computers for circuit-level access (e.g. via Qiskit)."},{href:"./iqm-station-control-client",title:"IQM Station Control Client",description:"Python client for remote access to quantum computers for pulse-level access."},{href:"./iqm-exa-common",title:"IQM EXA Common",description:"Abstract interfaces, helpers, utility classes, etc."},{href:"./iqm-data-definitions",title:"IQM Data Definitions",description:"A common place for data definitions shared inside IQM."}];return b.jsx("div",{className:"min-h-screen px-8 py-3",children:b.jsxs("div",{className:"mx-auto",children:[b.jsxs("div",{className:"flex flex-col sm:flex-row mb-4 sm:gap-2 lg:gap-[8rem]",children:[b.jsx(hp,{}),b.jsxs("div",{className:"flex gap-4",children:[b.jsxs("button",{className:"relative px-4 pt-2",onClick:()=>S(!0),children:["Documentation",b.jsx("span",{className:`block h-[0.2rem] ml-4 mr-4 ${M?"bg-green-500":"bg-transparent"} absolute bottom-0 left-0 right-0`})]}),b.jsxs("button",{className:"relative px-4 pt-2",onClick:()=>S(!1),children:["Features",b.jsx("span",{className:`block h-[0.2rem] ml-4 mr-4 ${M?"bg-transparent":"bg-green-500"} absolute bottom-0 left-0 right-0`})]})]})]}),b.jsxs("div",{className:"max-w-4xl mx-auto",children:[b.jsxs("div",{onClick:I,className:"mt-6 mb-6 flex items-center gap-2 p-3 bg-white border border-gray-200 rounded-lg cursor-pointer hover:border-gray-300 transition-colors",children:[b.jsx(oc,{className:"w-5 h-5 text-gray-400"}),b.jsxs("span",{className:"text-gray-500",children:["Search all documentation... ",navigator.userAgent.includes("Mac")?"Press ⌘K":"Press Ctrl+K"]})]}),M?b.jsxs(b.Fragment,{children:[b.jsxs("p",{children:["Find below the documentation for IQM client-side libraries that can be used to connect to "," ",b.jsx("a",{href:"https://resonance.meetiqm.com",target:"_blank",children:"IQM Resonance"})," and any IQM on-premise quantum computer."]}),b.jsx("div",{className:"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-8",children:R.map((B,A)=>b.jsxs("a",{href:B.href,target:"_blank",className:"p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow",children:[b.jsx("h2",{className:"text-lg font-semibold text-gray-900",children:B.title}),b.jsx("p",{className:"mt-2 text-sm text-gray-600",children:B.description})]},A))})]}):b.jsx(bp,{}),c&&b.jsx("div",{className:"fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-[15vh] z-50",children:b.jsxs("div",{className:"bg-white rounded-xl shadow-2xl w-full max-w-2xl max-h-[70vh] overflow-hidden",children:[b.jsxs("div",{className:"p-4 border-b border-gray-100 flex items-center gap-3",children:[b.jsx(oc,{className:"w-5 h-5 text-gray-400"}),b.jsx("input",{type:"text",autoFocus:!0,placeholder:"Search documentation...",className:"flex-1 outline-none text-gray-900",value:r,onChange:B=>y(B.target.value)}),b.jsx("button",{onClick:()=>l(!1),className:"p-1 hover:bg-gray-100 rounded-md transition-colors",children:b.jsx(lp,{className:"w-5 h-5 text-gray-500"})})]}),b.jsx("div",{className:"overflow-y-auto max-h-[calc(70vh-4rem)]",children:_.map((B,A)=>b.jsxs("a",{href:"."+B.url,target:"_blank",className:"block p-4 hover:bg-gray-50 transition-colors overflow-hidden",children:[b.jsx("h3",{className:"font-medium text-gray-900",children:B.title}),b.jsx("span",{className:"text-sm text-gray-500 block mt-1",children:B.package}),b.jsx("p",{className:"text-sm text-gray-600 mt-1",children:B.description})]},A))})]})})]}),b.jsxs("footer",{className:"mt-8 text-center text-sm text-gray-500 border-gray-300 border-t pt-4",children:[b.jsx("span",{children:"Copyright IQM Quantum Computers 2021-2025."}),b.jsx("br",{}),b.jsxs("span",{children:["Need assistance? Contact us ",b.jsx("a",{href:"mailto:support@meetiqm.com",children:"support@meetiqm.com"})]})]})]})})}qm.createRoot(document.getElementById("root")).render(b.jsx(Ge.StrictMode,{children:b.jsx(yp,{})}));
